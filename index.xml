<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angelo Stavrow</title>
    <link>https://angelostavrow.com/</link>
    <description>Recent content on Angelo Stavrow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-CA</language>
    <copyright>Copyright © 2018, Angelo Stavrow</copyright>
    <lastBuildDate>Tue, 03 Mar 2020 07:00:00 -0500</lastBuildDate>
    
        <atom:link href="https://angelostavrow.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Per Rewrite Diaries: Day 32</title>
      <link>https://angelostavrow.com/post/per-diaries-day-32/</link>
      <pubDate>Tue, 03 Mar 2020 07:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-32/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;setting-units&#34;&gt;Setting Units&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-31.md&#34;&gt;Yesterday&lt;/a&gt;, I set each entry in my unit &lt;code&gt;KeyValuePairs&lt;/code&gt; to look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;kilograms&amp;quot;: UnitMass.kilograms.symbol
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And that way I could directly get the &lt;code&gt;String&lt;/code&gt; representation of the unit&amp;rsquo;s symbol (in this example, &amp;ldquo;kg&amp;rdquo;) to drop into the picker view and text field.&lt;/p&gt;
&lt;p&gt;Instead, I could make the entries look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;kilograms&amp;quot;: UnitMass.kilograms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When I need to get the string symbol for the unit, I can do that — no need to do that work ahead of time.&lt;/p&gt;
&lt;p&gt;Now, with the addition of an optional tuple &lt;code&gt;selectedUnit: (String, Unit)&lt;/code&gt;, I can handle setting the units for the first product (and thus the unit type for the entire &lt;code&gt;ProductList&lt;/code&gt;) in the picker view&amp;rsquo;s &lt;code&gt;didSelectRow:&lt;/code&gt; delegate method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
    // FIXME: We&#39;re going through both unit data sources when we only need to go through one.
    _ = pickerWeightDataSource.contains { key, value in
        if (value.symbol == pickerTextFieldOutput[row]) {
            selectedUnit = (key, value)
            return true
        }
        return false
    }
    
    _ = pickerVolumeDataSource.contains { key, value in
        if (value.symbol == pickerTextFieldOutput[row]) {
            selectedUnit = (key, value)
            return true
        }
        return false
    }
    
    // FIXME: We&#39;re reaching into the subview to directly manipulate a textfield. THIS IS BAD!
    productDetailFormView.unitsTextField.text = pickerTextFieldOutput[row]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are now a couple of &lt;code&gt;FIXME&lt;/code&gt;s in that one delegate method. I don&amp;rsquo;t love that I&amp;rsquo;m going through both the picker&amp;rsquo;s weight &lt;em&gt;and&lt;/em&gt; volume data sources to see which symbol we&amp;rsquo;ve got; the method should be smarter than this.&lt;/p&gt;
&lt;p&gt;So I can fix that this way, and —because Swift lets you define a function within a function— can clean up the duplicated code at the same time:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
    func checkSymbolAndSetUnit(key: String, value: Unit) -&amp;gt; Bool {
        if (value.symbol == pickerTextFieldOutput[row]) {
            selectedUnit = (key, value)
            return true
        }
        return false
    }
    
    if (pickerTextFieldOutput[0] == pickerWeightDataSource[0].value.symbol) {
        _ = pickerWeightDataSource.contains { key, value in
            checkSymbolAndSetUnit(key: key, value: value)
        }
    } else {
        _ = pickerVolumeDataSource.contains { key, value in
            checkSymbolAndSetUnit(key: key, value: value)
        }
    }
    
    // FIXME: We&#39;re reaching into the subview to directly manipulate a textfield. THIS IS BAD!
    productDetailFormView.unitsTextField.text = pickerTextFieldOutput[row]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That feels &lt;em&gt;much&lt;/em&gt; cleaner. Since &lt;code&gt;pickerTextFieldOutput&lt;/code&gt; is an array of all the unit symbol, I can test to see if the first element matches the symbol of the first element in my &lt;code&gt;pickerWeightDataSource&lt;/code&gt; (a &lt;code&gt;KeyValuePairs&lt;/code&gt; collection). If it is, find the right &lt;code&gt;UnitMass&lt;/code&gt; and set that as the &lt;code&gt;selectedUnit&lt;/code&gt;. If it&amp;rsquo;s not, go through the &lt;code&gt;pickerVolumeDataSource&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;That sorts things out for setting the units on the first product and the unit type for the &lt;code&gt;ProductList&lt;/code&gt;, but then I can&amp;rsquo;t choose the units for subsequent products that I add to the list. I&amp;rsquo;ll work on that tomorrow!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diaries: Day 31</title>
      <link>https://angelostavrow.com/post/per-diaries-day-31/</link>
      <pubDate>Mon, 02 Mar 2020 21:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-31/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;improving-the-picker-view&#34;&gt;Improving the Picker View&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-30/&#34;&gt;Yesterday&lt;/a&gt; I got a spike solution to show the &lt;code&gt;UIPickerView&lt;/code&gt; showing when weight or volume units were selected in the form detail view. The form view doesn&amp;rsquo;t actually set the &lt;code&gt;ProductList&lt;/code&gt;&#39;s &lt;code&gt;unitType&lt;/code&gt; &lt;em&gt;yet&lt;/em&gt;, so today I made some progress toward that.&lt;/p&gt;
&lt;p&gt;First, the UI needs to give the user the ability to select the units for the product they&amp;rsquo;re entering. This means populating the picker view&amp;rsquo;s data source with the appropriate units based on what the selection is for unit type (as set by a &lt;code&gt;UISegmentedControl&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This means adding some kind of backing store for some subset of each type of units. I initially did this by adding two &lt;code&gt;Dictionary&lt;/code&gt; objects with a &lt;code&gt;String&lt;/code&gt; description of the unit as a key, and the &lt;code&gt;symbol&lt;/code&gt; for that particular unit type (i.e., &lt;code&gt;UnitMass.kilograms.symbol&lt;/code&gt;) as the value, figuring that both can be shown in the picker view, and the symbol alone shown in the form&amp;rsquo;s unit text field.&lt;/p&gt;
&lt;p&gt;Then, when the user makes a unit-type selection, a delegate method is called that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creates an array where each element is the concatenation of the key and value for each dictionary entries;&lt;/li&gt;
&lt;li&gt;Sets that array as the data source for the picker view;&lt;/li&gt;
&lt;li&gt;Creates a second array of just the value for each dictionary entry; and&lt;/li&gt;
&lt;li&gt;Calls the picker&amp;rsquo;s delegate&amp;rsquo;s &lt;code&gt;didSelectRow:&lt;/code&gt; method to set the unit text field&amp;rsquo;s value.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;turns-out&#34;&gt;Turns out&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s a fun thing I forgot about! If you call &lt;code&gt;map()&lt;/code&gt; on a &lt;code&gt;Dictionary&lt;/code&gt;, the resulting array isn&amp;rsquo;t guaranteed to be in the same order as the input collection.&lt;/p&gt;
&lt;p&gt;If that&amp;rsquo;s important, you can use a &lt;code&gt;KeyValuePairs&lt;/code&gt; collection, which was renamed from &lt;code&gt;DictionaryLiteral&lt;/code&gt; in Swift 5 (here&amp;rsquo;s the proposal: &lt;a href=&#34;https://github.com/apple/swift-evolution/blob/master/proposals/0214-DictionaryLiteral.md&#34;&gt;SE-0214&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So here&amp;rsquo;s what these not-really-a-dictionary dictionaries look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var pickerView: UIPickerView!
var pickerDataSource = [String]()        // For setting picker options in titleForRow:
var pickerTextFieldOutput = [String]()   // For setting units text field in didSelectRow:

let pickerWeightDataSource: KeyValuePairs = [
    &amp;quot;kilograms&amp;quot;: UnitMass.kilograms.symbol,
    &amp;quot;grams&amp;quot;: UnitMass.grams.symbol,
    &amp;quot;pounds&amp;quot;: UnitMass.pounds.symbol,
    &amp;quot;ounces&amp;quot;: UnitMass.ounces.symbol
]
    
 let pickerVolumeDataSource: KeyValuePairs = [
    &amp;quot;liters&amp;quot;: UnitVolume.liters.symbol,
    &amp;quot;centiliters&amp;quot;: UnitVolume.centiliters.symbol,
    &amp;quot;milliliters&amp;quot;: UnitVolume.milliliters.symbol,
    &amp;quot;gallons&amp;quot;: UnitVolume.gallons.symbol,
    &amp;quot;quarts&amp;quot;: UnitVolume.quarts.symbol,
    &amp;quot;pints&amp;quot;: UnitVolume.pints.symbol,
    &amp;quot;fluid ounces&amp;quot;: UnitVolume.fluidOunces.symbol
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Again, this is an ongoing spike solution, so it doesn&amp;rsquo;t take localization into account — beyond the (American-)English descriptive names as keys,  Foundation actually provides for separate US and Imperial volume units, so that you can convert from e.g. &lt;code&gt;UnitVolume.gallons&lt;/code&gt; and &lt;code&gt;UnitVolume.imperialGallons&lt;/code&gt; — this will be sorted out later.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the functional stuff for setting the picker view&amp;rsquo;s data source and the unit text field&amp;rsquo;s value:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Swap data source contents based on `UISegmentedControl` selection
func setUnitType(_ sender: UISegmentedControl, target: UITextField) {
    var currentlySelectedRow = pickerView.selectedRow(inComponent: 0)

    switch(sender.selectedSegmentIndex) {
    case 0:
        pickerDataSource = pickerWeightDataSource.map({ key, value in &amp;quot;\(key) (\(value))&amp;quot; })
        pickerTextFieldOutput = pickerWeightDataSource.map({ key, value in &amp;quot;\(value)&amp;quot; })
        pickerView.reloadAllComponents()
    case 2:
        pickerDataSource = pickerVolumeDataSource.map({ key, value in &amp;quot;\(key) (\(value))&amp;quot; })
        pickerTextFieldOutput = pickerVolumeDataSource.map({ key, value in &amp;quot;\(value)&amp;quot; })
        pickerView.reloadAllComponents()
    default:
        pickerDataSource = [&amp;quot;&amp;quot;]
        return
    }

    if pickerView.numberOfRows(inComponent: 0) &amp;lt;= currentlySelectedRow {
        currentlySelectedRow = pickerView.numberOfRows(inComponent: 0) - 1
    }
    pickerView.delegate?.pickerView?(self.pickerView, didSelectRow: currentlySelectedRow, inComponent: 0)
    target.becomeFirstResponder()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So that&amp;rsquo;s working nicely. Changing selection between weight and volume units works gracefully, and the text field updates as soon as the picker view is shown or changed, so that it&amp;rsquo;s never in a weird state (as can sometimes happen in the current shipping version of Per).&lt;/p&gt;
&lt;p&gt;Tomorrow, I&amp;rsquo;ll actually hook this sucker up to set the &lt;code&gt;ProductList&lt;/code&gt;&#39;s unit type, which should —I &lt;em&gt;think&lt;/em&gt;— be all I need to get automatic unit conversion working. Then, I can focus on refactoring this stuff into something a little less hack-y.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diaries: Day 30</title>
      <link>https://angelostavrow.com/post/per-diaries-day-30/</link>
      <pubDate>Sun, 01 Mar 2020 07:45:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-30/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;spiking-a-picker-view&#34;&gt;Spiking a Picker View&lt;/h2&gt;
&lt;p&gt;As I mentioned &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-29/&#34;&gt;yesterday&lt;/a&gt;, I&amp;rsquo;m a little stuck trying to implement a &lt;code&gt;UIPickerView&lt;/code&gt; to let you choose the units for a product. Maybe I was trying a bit too hard to be clever about this, so I&amp;rsquo;m going to try a spike solution today and see how that works out.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ProductDetailContentViewController&lt;/code&gt; shows a &lt;code&gt;ProductFormDetailView&lt;/code&gt; that contains the input fields for entering a new product. When the user taps the input field, I want to show a &lt;code&gt;UIPickerView&lt;/code&gt; that presents some options based on the unit type of the list. That unit type is selected when you add the first product via a &lt;code&gt;UISegmentedControl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to start by making the &lt;code&gt;ProductDetailContentViewController&lt;/code&gt; conform to &lt;code&gt;UIPickerViewDelegate&lt;/code&gt; and &lt;code&gt;UIPickerViewDatasource&lt;/code&gt;. That means I have to add a couple of methods, so I let Xcode add the stubs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func numberOfComponents(in pickerView: UIPickerView) -&amp;gt; Int {
    &amp;lt;#code#&amp;gt;
}

func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -&amp;gt; Int {
    &amp;lt;#code#&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I also declare a &lt;code&gt;pickerView&lt;/code&gt; and, in the view controller&amp;rsquo;s &lt;code&gt;viewDidLoad()&lt;/code&gt; method, have its delegate and data source set to &lt;code&gt;self&lt;/code&gt;. For now, the data source will be an array of strings:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var pickerView: UIPickerView!
let pickerDataSource = [&amp;quot;Option 1&amp;quot;, &amp;quot;Option 2&amp;quot;, &amp;quot;Option 3&amp;quot;, &amp;quot;Option 4&amp;quot;, &amp;quot;Option 5&amp;quot;]

override func viewDidLoad() {
    super.viewDidLoad()

    /* --- Some setup for other views --- */

    pickerView = UIPickerView()
    pickerView.delegate = self
    pickerView.dataSource = self
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Okay, with that, I can fill out those protocol stubs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func numberOfComponents(in pickerView: UIPickerView) -&amp;gt; Int {
    return 1
}

func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -&amp;gt; Int {
    return pickerDataSource.count
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There&amp;rsquo;s an important protocol method missing here, though — the one that shows something in each row of the picker view:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -&amp;gt; String? {
    return pickerDataSource[row] as String
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That should be enough to get &lt;code&gt;Option 1&lt;/code&gt;, &lt;code&gt;Option 2&lt;/code&gt;, &lt;code&gt;Option 3&lt;/code&gt;, etc., to show in the picker view. Now we just need to add that picker view to the view hierarchy.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s where things get a little bit complicated. We only want the picker view to show when the following criteria are met:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;unitType&lt;/code&gt; of the &lt;code&gt;ProductList&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; dimensionless (i.e., is of &lt;code&gt;UnitMass&lt;/code&gt; or &lt;code&gt;UnitVolume&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The user taps on the units field in the &lt;code&gt;ProductDetailFormView&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Right now the units field is disabled, so I start by adding logic to the &lt;code&gt;UISegmentedControl&lt;/code&gt;&#39;s action such that it gets enabled if the user chooses something other than &amp;ldquo;units&amp;rdquo;. I also add an &lt;code&gt;showPickerView()&lt;/code&gt; delegate method on the view controller that its subviews can call, but all it does for now is print a success message to the console.&lt;/p&gt;
&lt;p&gt;Now, I can add logic to the &lt;code&gt;textFieldDidBeginEditing()&lt;/code&gt; event listener to show the picker view when someone taps on the units field:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func textFieldDidBeginEditing(_ textField: UITextField) {
    if textField.tag == 101 {
        delegate?.showPickerView()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That calls the delegate method successfully, so I add the necessary code to show the picker view:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func showPickerView() {
    view.addSubview(pickerView)
    pickerView.translatesAutoresizingMaskIntoConstraints = false
    NSLayoutConstraint.activate([
        pickerView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 0),
        pickerView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: 0),
        pickerView.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: 0)
    ])
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A test in Simulator doesn&amp;rsquo;t show the picker view at first&amp;hellip; &lt;em&gt;because it&amp;rsquo;s behind the keyboard&lt;/em&gt;. That makes sense.&lt;/p&gt;
&lt;p&gt;In the shipping version of Per, I set the keyboard to be the picker view — this avoids any jarring appearing/disappearing of the keyboard as you go from text field to text field. So in fact, that deeply simplifies things: I can pass the calling &lt;code&gt;UITextField&lt;/code&gt; into the &lt;code&gt;showPickerView()&lt;/code&gt; method and just set its &lt;code&gt;inputView&lt;/code&gt; to the picker view:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func showPickerView(_ sender: UITextField) {
    sender.inputView = pickerView
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And that works like a charm. When the units field is enabled and tapped, I see a picker view. When another text field is tapped, I see the decimal keyboard.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll add one final protocol method, so that the text field can be set to the selection in the picker view:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
    productDetailFormView.unitsTextField.text = pickerDataSource[row]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This works, but is a bad solution: I&amp;rsquo;m reaching into the subview to directly manipulate one of its controls. The view controller should know nothing about its subviews, because if something changes in the subview, then that could break everything. I added a &lt;code&gt;FIXME&lt;/code&gt; here to update this, and it&amp;rsquo;ll probably involve a property observer on something like &lt;code&gt;VolatileFormData&lt;/code&gt; to update text fields.&lt;/p&gt;
&lt;p&gt;For now, this can wait — I want to continue building off a working solution. Right now the segmented control only shows for the first product you choose, so tomorrow I&amp;rsquo;ll work on making this actually set the &lt;code&gt;ProductList&lt;/code&gt;&#39;s &lt;code&gt;unitType&lt;/code&gt; property so that subsequent products use these units and show the picker view.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diaries: Day 29</title>
      <link>https://angelostavrow.com/post/per-diaries-day-29/</link>
      <pubDate>Sat, 29 Feb 2020 19:30:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-29/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;bleh&#34;&gt;Bleh&lt;/h2&gt;
&lt;p&gt;I was really hoping to wrap up the conversion feature today, but I&amp;rsquo;m struggling to get a &lt;code&gt;UIPickerView&lt;/code&gt; working the way I&amp;rsquo;d like.&lt;/p&gt;
&lt;p&gt;Essentially, I want to be able to set the rows of the picker view based on the &lt;code&gt;UISegmentedControl&lt;/code&gt;&#39;s selected segment, but for whatever reason I just can&amp;rsquo;t get it to work the way I&amp;rsquo;d like.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m also feeling very distracted today, so I&amp;rsquo;ve been having a hard time figuring out just why this isn&amp;rsquo;t working. That&amp;rsquo;s&amp;hellip; okay. I mean, it&amp;rsquo;s a little frustrating, but it&amp;rsquo;s okay. I think part of this is coming from trying to force something so that I can write about it, instead of allowing myself the time to go deep and understand what&amp;rsquo;s going on.&lt;/p&gt;
&lt;p&gt;This is the last day of the month, but I&amp;rsquo;m going to continue journaling on a daily basis at least until this functional rewrite is done.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diaries: Day 28</title>
      <link>https://angelostavrow.com/post/per-diaries-day-28/</link>
      <pubDate>Fri, 28 Feb 2020 05:34:04 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-28/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;two-days-to-go&#34;&gt;Two days to go&lt;/h2&gt;
&lt;p&gt;Okay, so tomorrow&amp;rsquo;s the end of the month. I&amp;rsquo;d like to get to the point where automatic unit conversion is working, but I don&amp;rsquo;t think I&amp;rsquo;ll get there in two hours. One way or the other, I didn&amp;rsquo;t get to the point where the app functionally recreates the features of the currently shipping version of Per, but that&amp;rsquo;s okay! I made a &lt;em&gt;huge&lt;/em&gt; amount of progress and I&amp;rsquo;m really happy about that.&lt;/p&gt;
&lt;p&gt;Today, I implemented the UI for picking the unit type when you add your first item to the product list. When the view controller sets the view&amp;rsquo;s delegate, I have a &lt;code&gt;didSet&lt;/code&gt; property observer that checks the delegate&amp;rsquo;s &lt;code&gt;numberOfProductItems&lt;/code&gt; property and, if there aren&amp;rsquo;t any, inserts a &lt;code&gt;UISegmentedControl&lt;/code&gt; where users can choose whether they want weight, volume, or dimensionless units. And it works really well!&lt;/p&gt;
&lt;p&gt;Tomorrow, I&amp;rsquo;ll set it up such that choosing a non-dimensionless option in the segmented control lets the user choose a weight or volume unit. Given that tomorrow is Saturday, I &lt;em&gt;may&lt;/em&gt; stretch it past the usual hour to get the unit-conversion feature sorted out. There&amp;rsquo;s a lot less complexity this time around for several reasons, so I don&amp;rsquo;t think it&amp;rsquo;ll take too long.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diaries: Day 27</title>
      <link>https://angelostavrow.com/post/per-diaries-day-27/</link>
      <pubDate>Thu, 27 Feb 2020 17:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-27/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;slow-down-and-sleep&#34;&gt;Slow down and sleep&lt;/h2&gt;
&lt;p&gt;To test what unit type (if any) the list should be limited to, I changed the private &lt;code&gt;_unitType&lt;/code&gt; property in the &lt;code&gt;ProductList&lt;/code&gt; to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private(set) var unitType: Unit?
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This value is set when the first &lt;code&gt;ProductItem&lt;/code&gt; is added to the list. Then I can add it as a property with the same access level to the &lt;code&gt;ProductDetailContentViewController&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;protocol ProductDetailContentViewControllerDelegate: AnyObject {
    var numberOfProductItems: Int { get }
    // Other protocol stuff
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This exposes it to the view controller&amp;rsquo;s subviews, but here&amp;rsquo;s something I was perplexed by. In the view controller&amp;rsquo;s &lt;code&gt;viewDidLoad()&lt;/code&gt; method, I (via a call to a &lt;code&gt;setupViews()&lt;/code&gt; method) instantiate a subview, and set its delegate. But when I was trying to access that delegate from within the subview&amp;rsquo;s initializer, it would return &lt;code&gt;nil&lt;/code&gt;. It took me longer than I care to admit to realize that the delegate isn&amp;rsquo;t initialized until &lt;em&gt;after&lt;/em&gt; my subview is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//... other viewDidLoad() stuff in the view controller
productDetailFormView = new ProductDetailFormView(frame: .zero);
productDetailFormView.delegate = self
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In retrospect, this is obvious. You&amp;rsquo;ve got to wait until the view&amp;rsquo;s initializer does its thing, and then the view&amp;rsquo;s delegate is set — so don&amp;rsquo;t try to access it in the view&amp;rsquo;s initializer.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s fascinating to me is that —while I know all this— it was incomprehensible why this was happening while I was in the thick of programming, until I gave up and took a break. Why? Probably because I had a lousy night&amp;rsquo;s sleep, and was rushing to get something done early this morning.&lt;/p&gt;
&lt;p&gt;The takeaway: get a good night&amp;rsquo;s sleep, and don&amp;rsquo;t rush your work.&lt;/p&gt;
&lt;p&gt;Tomorrow, I continue working on this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diaries: Day 26</title>
      <link>https://angelostavrow.com/post/per-diaries-day-26/</link>
      <pubDate>Wed, 26 Feb 2020 08:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-26/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-plan&#34;&gt;The plan&lt;/h2&gt;
&lt;p&gt;The shipping version of Per pre-dates the &lt;a href=&#34;https://developer.apple.com/documentation/foundation/units_and_measurement&#34;&gt;Units and Measurement&lt;/a&gt; libraries, so I had to implement all unit conversion carefully myself. Now that it&amp;rsquo;s built into Foundation, I don&amp;rsquo;t have to do that work anymore (thanks Apple!) and instead can focus on the app itself.&lt;/p&gt;
&lt;p&gt;Unit conversion itself is handled in the &lt;code&gt;ProductItem&lt;/code&gt; model, specifically in the &lt;code&gt;pricePerUnit&lt;/code&gt; computed property (as discussed on &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-4/&#34;&gt;day 4&lt;/a&gt;). Unit-matching enforcement (i.e., so the user doesn&amp;rsquo;t try to compare price-per-pound by price-per-litre) is handled by the &lt;code&gt;ProductList&lt;/code&gt; (as discussed on &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-5/&#34;&gt;day 5&lt;/a&gt;). All this validation is happening at the model layer, so then it&amp;rsquo;s just a question of implementing the UI to do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When adding the &lt;em&gt;first&lt;/em&gt; product, an additional bit of UI to select between weight units, volume units, or dimensionless units. In the shipping version, this is a segmented control, and that&amp;rsquo;s probably fine here as well.&lt;/li&gt;
&lt;li&gt;Once selected, the units input field (currently a disabled text field) becomes some kind of control where you can choose the units. In the shipping version, this is implemented as a &lt;code&gt;UIPicker&lt;/code&gt;, but there&amp;rsquo;s just something about that control I don&amp;rsquo;t like. Maybe some kind of popover?&lt;/li&gt;
&lt;li&gt;In any other products added, the UI should default to only showing the the units that match those of the first product. That&amp;rsquo;s easy enough to check for, via the &lt;code&gt;ProductList&lt;/code&gt;&#39;s &lt;code&gt;_unitType&lt;/code&gt; optional property. It&amp;rsquo;s currently marked as private, but that&amp;rsquo;s not really necessary for the getter — only the setter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tomorrow, I get cracking on this work!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diaries: Day 25</title>
      <link>https://angelostavrow.com/post/per-diaries-day-25/</link>
      <pubDate>Tue, 25 Feb 2020 07:30:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-25/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;nicer-table-view-cells&#34;&gt;Nicer table view cells&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-24&#34;&gt;Yesterday&lt;/a&gt;, I mentioned that each cell should show how much more you&amp;rsquo;re paying over the best-value option. I got that all implemented today, and here&amp;rsquo;s how I did it.&lt;/p&gt;
&lt;p&gt;First, I added a property to the &lt;code&gt;ProductList&lt;/code&gt; called  &lt;code&gt;bestValue&lt;/code&gt; that&amp;rsquo;s updated with the lowest &lt;code&gt;pricePerUnit&lt;/code&gt; in the array of &lt;code&gt;ProductItem&lt;/code&gt;s when we add to it. It&amp;rsquo;s a pretty straightforward affair:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mutating func add(_ item: ProductItem, sort: Bool = false) throws {
	// ...the rest of the function
	bestValue = _products.sorted().first?.pricePerUnit ?? 0.0
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I also added a couple of properties in my &lt;code&gt;ProductListCellView&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;valueForMoney&lt;/code&gt; string that, when updated, sets a &lt;code&gt;UILabel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;isBestValue&lt;/code&gt; flag that, when updated, sets the color of the above label&amp;rsquo;s text&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I set these in the &lt;code&gt;ProductListContentViewController&lt;/code&gt; when adding a new cell, but after checking whether this particular product we&amp;rsquo;re adding to the list is the best-value option:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (productItem.pricePerUnit == productList.bestValue) {
    cell.valueForMoney = &amp;quot;Best value!&amp;quot;
    cell.isBestValue = true
} else {
    cell.valueForMoney = &amp;quot;You&#39;re paying \(Int(100 * (productItem.pricePerUnit - productList.bestValue) / productList.bestValue))% more!&amp;quot;
    cell.isBestValue = false
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here&amp;rsquo;s what it looks like now:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/2020-02-25/product-list.png&#34; alt=&#34;&amp;ldquo;A screen capture of the iPhone Simulator showing a list of products compared by price per unit&amp;rdquo;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Much better! I&amp;rsquo;m hard-coding the currency symbol, which is bad — I need to add a proper formatter for the quantity and price values, and handle localization (something that the current shipping version of Per doesn&amp;rsquo;t do, which is also bad). I&amp;rsquo;ve opened an issue for this.&lt;/p&gt;
&lt;h2 id=&#34;a-display-bug&#34;&gt;A display bug&lt;/h2&gt;
&lt;p&gt;Something that irks me in the above screenshot is a display bug that I don&amp;rsquo;t quite understand how to resove. You can see empty cells in the table, and that looks ugly. I&amp;rsquo;d rather they be hidden.&lt;/p&gt;
&lt;p&gt;According to all of my research, when the table view is empty, I should be able to hide any empty cells by setting:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;productTableView.tableFooterView = UIView(frame: .zero)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That… doesn&amp;rsquo;t work, and I&amp;rsquo;m not sure why. If you&amp;rsquo;ve got any ideas, let me know!&lt;/p&gt;
&lt;p&gt;Tomorrow, I&amp;rsquo;ll start work on unit conversion!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diaries: Day 24</title>
      <link>https://angelostavrow.com/post/per-diaries-day-24/</link>
      <pubDate>Mon, 24 Feb 2020 18:30:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-24/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;design-thinking&#34;&gt;Design Thinking&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s not really much to report today. I spent the day thinking about how to best present information in each &lt;code&gt;ProductListCellView&lt;/code&gt; so that it&amp;rsquo;s easily understood; right now &lt;code&gt;ProductItem&lt;/code&gt;s are sorted in the list by best-value, but there&amp;rsquo;s no indication of &lt;em&gt;how much better&lt;/em&gt; the value is. I&amp;rsquo;m experimenting with some ideas and I think I&amp;rsquo;ve got an idea, though that&amp;rsquo;ll mean adding something to the &lt;code&gt;ProductList&lt;/code&gt; that stores either the best or worst value for your money, and updates it with each new product that&amp;rsquo;s added.&lt;/p&gt;
&lt;p&gt;Then, each cell could show how much worse (or better) it is than that baseline value. So I&amp;rsquo;ll tackle that tomorrow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diaries: Day 23</title>
      <link>https://angelostavrow.com/post/per-diaries-day-23/</link>
      <pubDate>Sun, 23 Feb 2020 17:45:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-23/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;custom-table-view-cells&#34;&gt;Custom Table View Cells&lt;/h2&gt;
&lt;p&gt;Right now, the &lt;code&gt;ProductListContentViewController&lt;/code&gt; is using a very basic &lt;code&gt;UITableViewCell&lt;/code&gt; to show basic details of each &lt;code&gt;ProductItem&lt;/code&gt; entry. That&amp;rsquo;s fine, but it&amp;rsquo;s going to get messy when that cell gets a custom layout. Better to contain that in a separate view!&lt;/p&gt;
&lt;p&gt;So, to begin with, I just wanted to refactor out that code into a new class. Creating one that conformed to &lt;code&gt;UITableViewCell&lt;/code&gt; gave me some stubbed methods to add, and I added some properties to the class. First, a &lt;code&gt;UILabel&lt;/code&gt; that I can later customize:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private let productDetailLabel: UILabel = {
    let label = UILabel()
    return label
}()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then a &lt;code&gt;product&lt;/code&gt; that, when set, updates the &lt;code&gt;productDetailLabel&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var product: ProductItem {
    didSet {
        let productUnits = product.units?.symbol ?? &amp;quot;unit&amp;quot;
        productDetailLabel.text = &amp;quot;\(product.quantity) \(productUnits)s for \(product.price) costs \(product.pricePerUnit) per \(productUnits)&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Right now, this means that I have to initialize the &lt;code&gt;product&lt;/code&gt; property with some default value when it&amp;rsquo;s initialized:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
    self.product = ProductItem(price: 1.00, quantity: 1.99, units: nil)
    super.init(style: style, reuseIdentifier: reuseIdentifier)
    addSubview(productDetailLabel)
    setupConstraints()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;setupContstraints()&lt;/code&gt; method does the same thing that it does in other &lt;code&gt;UIView&lt;/code&gt;s — sets the view to &lt;em&gt;not&lt;/em&gt; translate its autoresizing mask into constraints, and then activates the constraints I want. Pretty straightforward. Then it&amp;rsquo;s just a question of using this custom cell in &lt;code&gt;ProductListContentViewController&lt;/code&gt; instead of the default style:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;override func viewDidLoad() {
    // The other viewDidLoad stuff is done here
    // [...]
    // Then the custom cell is registered:
    productTableView.register(ProductListCellView.self, forCellReuseIdentifier: &amp;quot;productListCell&amp;quot;)
}

override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell {
    let productItem = productList.getItems()[indexPath[1]]
    let cell = productTableView.dequeueReusableCell(withIdentifier: &amp;quot;productListCell&amp;quot;, for: indexPath) as! ProductListCellView
    cell.product = productItem
    return cell
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s it! Something that I tend to forget when laying things out in code is to set &lt;code&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; so that everything works as expected, but I&amp;rsquo;m getting the hang of doing that first in any &lt;code&gt;setupConstraints()&lt;/code&gt; method now.&lt;/p&gt;
&lt;p&gt;Tomorrow, I&amp;rsquo;ll customize this a bit further with multiple lines.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diaries: Day 22</title>
      <link>https://angelostavrow.com/post/per-diaries-day-22/</link>
      <pubDate>Sat, 22 Feb 2020 14:30:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-22/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;marking-as-throw&#34;&gt;Marking As Throw&lt;/h2&gt;
&lt;p&gt;Today&amp;rsquo;s work involves a &lt;code&gt;FIXME&lt;/code&gt; for one of my biggest software pet peeves: silent failures. If I try to add a &lt;code&gt;ProductItem&lt;/code&gt; with, say, kilogram units to a &lt;code&gt;ProductList&lt;/code&gt; of sold-by-volume &lt;code&gt;ProductItem&lt;/code&gt;s (millilitres, pints, and such), that shouldn&amp;rsquo;t work. The UI will protect against this by pre-selecting available units, but the product list doesn&amp;rsquo;t (and shouldn&amp;rsquo;t) know this — it should protect against this by throwing an error if someone tries this particular operation.&lt;/p&gt;
&lt;p&gt;So first, I set up an &lt;code&gt;enum&lt;/code&gt; that conforms to &lt;code&gt;Error&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enum ProductListError: Error {
    case units_mismatch
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then replaced the current functionality of printing an error to the console:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(&amp;quot;Can&#39;t add an item with type \(String(describing: incomingUnitType)) to a list of \(String(describing: _unitType)) items&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;with the throwing of an error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;throw ProductListError.units_mismatch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Great! Now that the bad path throws an error, I can handle it at the call sites.&lt;/p&gt;
&lt;h2 id=&#34;do-try-catch&#34;&gt;Do Try Catch&lt;/h2&gt;
&lt;p&gt;To do this is pretty straight forward; just wrap the call to the throwing function in a &lt;code&gt;do&lt;/code&gt;-&lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; block. In the &lt;code&gt;ProductListContextViewController&lt;/code&gt;, we have an &lt;code&gt;add()&lt;/code&gt; method that&amp;rsquo;s called by the &lt;code&gt;ProductDetailContentViewController&lt;/code&gt; via the delegation pattern:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func add(_ item: ProductItem) {
    do {
        try contentViewController.productList.add(item, sort: true)
        clearListBarButtonItem?.isEnabled = true
        contentViewController.loadView()
    } catch ProductListError.units_mismatch {
        print(&amp;quot;Can&#39;t add an item with type \(String(describing: item.units)) to the list.&amp;quot;)
        return
    } catch {
        print(&amp;quot;Something went wrong adding \(item); abandoning the attempt.&amp;quot;)
        return
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will &lt;code&gt;try&lt;/code&gt; to add the item to the product list; if that fails, it&amp;rsquo;ll &lt;code&gt;catch&lt;/code&gt; the error thrown, print an error to the console, and &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Yes, this is technically still failing silently. But now that it&amp;rsquo;s at the UI layer, I can add a simple alert for now and use &lt;em&gt;that&lt;/em&gt; instead of the call to &lt;code&gt;print()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private func displayError(_ message: String) {
    let alert = UIAlertController(title: &amp;quot;Whoops!&amp;quot;, message: message, preferredStyle: .alert)
    alert.addAction(UIAlertAction(title: NSLocalizedString(&amp;quot;OK&amp;quot;, comment: &amp;quot;Default action&amp;quot;), style: .default, handler: { _ in
      NSLog(message)
    }))
    self.present(alert, animated: true, completion: nil)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Now&lt;/em&gt; we&amp;rsquo;re failing verbosely! I&amp;rsquo;m adding a &lt;code&gt;TODO&lt;/code&gt; here to refactor this spike solution for the alert into an extension on &lt;code&gt;UIViewController&lt;/code&gt;, because our time for today is up.&lt;/p&gt;
&lt;p&gt;Tomorrow, I&amp;rsquo;m going to start work on a custom table view cell for the product list.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diaries: Day 21</title>
      <link>https://angelostavrow.com/post/per-diaries-day-21/</link>
      <pubDate>Fri, 21 Feb 2020 09:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-21/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;refactoring-layout-code&#34;&gt;Refactoring layout code&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m a little short on time today, so I&amp;rsquo;ll grab some low-hanging fruit for a quick win. &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-20&#34;&gt;Yesterday&lt;/a&gt;, I wrote that &amp;ldquo;the &lt;code&gt;ProductDetailContentViewController&lt;/code&gt; is kinda sloppy — some of its UI is from an embedded custom view, and some of it is created in &lt;code&gt;viewDidLoad()&lt;/code&gt;, which should &lt;em&gt;at least&lt;/em&gt; be refactored out into separate &lt;code&gt;setupView()&lt;/code&gt; and &lt;code&gt;setupConstraints()&lt;/code&gt; methods.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s easy enough. I&amp;rsquo;m marking those setup functions as &lt;code&gt;private&lt;/code&gt;, and taking advantage of &lt;code&gt;NSLayoutConstraint.activate()&lt;/code&gt; for setting up and activating constraints. I don&amp;rsquo;t think it&amp;rsquo;s necessarily &lt;em&gt;less&lt;/em&gt; readable than chaining &lt;code&gt;.isActive = true&lt;/code&gt; to the end of each constraint call, but as an array I can fold the code in the editor so it takes up less space, which I something I take advantage of.&lt;/p&gt;
&lt;p&gt;So that&amp;rsquo;s one papercut fixed! Just over a week to go before the end of the month; let&amp;rsquo;s see how close I can get to the current shipping features! Tomorrow I&amp;rsquo;ll tackle one of the &lt;code&gt;FIXME&lt;/code&gt; issues — specifically, making &lt;code&gt;ProductList.add()&lt;/code&gt; throw on trying to add a mismatched-unit &lt;code&gt;ProductItem&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diaries: Day 20</title>
      <link>https://angelostavrow.com/post/per-diaries-day-20/</link>
      <pubDate>Thu, 20 Feb 2020 09:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-20/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;a-list-of-papercuts&#34;&gt;A List of PaPerCuts&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re talking about &amp;ldquo;papercuts&amp;rdquo; and the name of the app (&amp;ldquo;Per&amp;rdquo;) is in &amp;ldquo;papercut&amp;rdquo; — get it?&lt;/p&gt;
&lt;p&gt;Okay, sorry — bad joke. What do I mean by papercuts? These are the little rough edges and tiny bugs that make it annoying to use something. Pile up enough of them, and you have a &lt;a href=&#34;https://english.stackexchange.com/a/326717&#34;&gt;death by a thousand papercuts&lt;/a&gt; — the failure of an effort due to a multitude of fairly minor bits of unpleasantness.&lt;/p&gt;
&lt;h3 id=&#34;models&#34;&gt;Models&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ProductItem&lt;/code&gt; and &lt;code&gt;ProductList&lt;/code&gt; models feel fairly complete, but the list model only prints a message to the console if you try to add a product item whose units don&amp;rsquo;t match what&amp;rsquo;s already in the list (e.g., adding a product whose units are grams to a list full of items that are otherwise sold by volume). It should instead, throw an error.&lt;/p&gt;
&lt;h3 id=&#34;coordinator-view-controllers&#34;&gt;Coordinator View Controllers&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ProductListCoordinatorViewController&lt;/code&gt; takes advantage of extensions on both &lt;code&gt;UIViewController&lt;/code&gt; and &lt;code&gt;UIView&lt;/code&gt; to embed a child view controller into the full frame of the parent view controller. I&amp;rsquo;ll be on the lookout for other places where I can use that. Otherwise, this is a tiny, 20-line view controller. Perfect.&lt;/p&gt;
&lt;h3 id=&#34;context-view-controllers&#34;&gt;Context View Controllers&lt;/h3&gt;
&lt;p&gt;The only context view controller is &lt;code&gt;ProductListContextViewController&lt;/code&gt;, which also leverages the same extensions that the coordinator does. It&amp;rsquo;s also a fairly small view controller, only 56 lines, but I want to rethink the use of &lt;code&gt;UIBarButtonItem&lt;/code&gt;s for adding to and clearing the list of products — this could be refactored into some kind of child view.&lt;/p&gt;
&lt;h3 id=&#34;content-view-controllers&#34;&gt;Content View Controllers&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ProductListContentViewController&lt;/code&gt; is a table view controller using a very basic cell to display results; that should absolutely be refactored into a custom view.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ProductDetailContentViewController&lt;/code&gt; is kinda sloppy — some of its UI is from an embedded custom view, and some of it is created in &lt;code&gt;viewDidLoad()&lt;/code&gt;, which should &lt;em&gt;at least&lt;/em&gt; be refactored out into separate &lt;code&gt;setupView()&lt;/code&gt; and &lt;code&gt;setupConstraints()&lt;/code&gt; methods. The &lt;strong&gt;Add&lt;/strong&gt; button should only be enabled if there&amp;rsquo;s text in both the quantity and price fields for now.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also maybe something to think about in combining or re-using the UI from the add-item/clear-slist &lt;code&gt;UIBarButtonItem&lt;/code&gt;s and the &lt;strong&gt;Add&lt;/strong&gt;/&lt;strong&gt;Cancel&lt;/strong&gt; buttons in the &lt;code&gt;ProductDetailContentViewController&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;custom-views&#34;&gt;Custom Views&lt;/h3&gt;
&lt;p&gt;Finally, we come to the &lt;code&gt;ProductDetailFormView&lt;/code&gt;. This one needs work — if I want to enable/disable the &lt;strong&gt;Add&lt;/strong&gt; button based on how much of the form is filled out, I&amp;rsquo;ll need to do more &lt;code&gt;UITextFieldDelegate&lt;/code&gt; work, which means duplication a lot of the logic that identifies which text field is being edited. That&amp;rsquo;s not too hard to refactor.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m still setting aside any handling of units until I better understand how it works in practice. But it would be helpful to start adding some formatting for the textfields, especially currency. It feels like it&amp;rsquo;s worth refactoring any text field delegation into a separate class here, to better encapsulate these changes.&lt;/p&gt;
&lt;h3 id=&#34;other-thoughts&#34;&gt;Other Thoughts&lt;/h3&gt;
&lt;p&gt;There are comments that explain things that probably don&amp;rsquo;t need to be explained in the body of a code block, and should instead be made part of the function&amp;rsquo;s documentation.&lt;/p&gt;
&lt;p&gt;There are also no tests, whatsover.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not adding these as papercuts, though — that&amp;rsquo;s a whole other thing to tackle.&lt;/p&gt;
&lt;h2 id=&#34;working-down-the-list&#34;&gt;Working down the list&lt;/h2&gt;
&lt;p&gt;Xcode&amp;rsquo;s jump bar (or whatever it&amp;rsquo;s called) along the top of the actual code-editing view in the Editor is really useful for this kind of work; if you use comments that start with &lt;code&gt;// TODO:&lt;/code&gt; or &lt;code&gt;// FIXME:&lt;/code&gt;, you&amp;rsquo;ll see them listed there among your functions, letting you navigate to them very quickly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/2020-02-20/jump-bar.png&#34; alt=&#34;&amp;ldquo;The Xcode jump bar shows FIXME and TODO comments&amp;rdquo;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, you can mark them as &lt;code&gt;#warning(&amp;quot;TODO: Description of task&amp;quot;)&lt;/code&gt; or &lt;code&gt;#error(&amp;quot;FIXME: Description of problem&amp;quot;)&lt;/code&gt; to have these come up as either a ⚠️ &lt;strong&gt;warning&lt;/strong&gt; or an 🛑 &lt;strong&gt;error&lt;/strong&gt; in the Issue navigator.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/2020-02-20/issues-navigator.png&#34; alt=&#34;&amp;ldquo;Xcode&amp;rsquo;s Issues navigator shows comments marked as #warning or #error&amp;rdquo;&#34;&gt;&lt;/p&gt;
&lt;p&gt;It feels awkward to me to set these as compiler warnings —that&amp;rsquo;s absolutely &lt;em&gt;not&lt;/em&gt; what they are— so I&amp;rsquo;m sticking with the comments. Instead, I&amp;rsquo;m going to add them as issues to work on.&lt;/p&gt;
&lt;p&gt;Tomorrow, I start working on this list!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 19</title>
      <link>https://angelostavrow.com/post/per-diaries-day-19/</link>
      <pubDate>Wed, 19 Feb 2020 18:15:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-19/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;whoopsie&#34;&gt;Whoopsie&lt;/h2&gt;
&lt;p&gt;So the plan today was to pause on writing code, and do what I think of as &amp;ldquo;catch-up&amp;rdquo; work. There are some inconsistencies among, for example, content view controllers — some have all kinds of view layout and initialization code in &lt;code&gt;viewDidLoad()&lt;/code&gt;, others dump that stuff into a child &lt;code&gt;UIView&lt;/code&gt; with &lt;code&gt;setupView()&lt;/code&gt; and &lt;code&gt;setupConstraints()&lt;/code&gt; methods. Pushing through on a daily basis with spike solutions and experiments makes for a lot of forward momentum, but it&amp;rsquo;s important to take a step back and make sure you&amp;rsquo;re tidying as you go — hence the list of &amp;lsquo;papercuts,&amp;rsquo; or little issues that aren&amp;rsquo;t a big deal on their own, but a real problem if they&amp;rsquo;re left to accumulate.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Aside: Remember that this is a fairly small and simple app being built by a single person, so it&lt;/em&gt; really &lt;em&gt;doesn&amp;rsquo;t need a fancy and overcomplicated methodology. Experimenting and &amp;lsquo;trying silly ideas&amp;rsquo; are not only allowed, they&amp;rsquo;re encouraged.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So, that was the plan. But overnight I realized that something felt… &lt;em&gt;unsettled&lt;/em&gt; in my brain. Every time I create a new form view, am I making sure the memory is being deallocated when it&amp;rsquo;s dismissed?&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;thought&lt;/em&gt; so — but you know that feeling. The one telling you that you&amp;rsquo;ve probably missed something.&lt;/p&gt;
&lt;p&gt;So today I sat down and fired up Instruments, watching allocations as I navigate in and out of the add-product form. Sure enough, every time I present it, we get a &lt;code&gt;ProductDetailContentViewController&lt;/code&gt; being allocated, but not being de-allocated.&lt;/p&gt;
&lt;p&gt;Well, crap.&lt;/p&gt;
&lt;p&gt;Who&amp;rsquo;s got two thumbs and didn&amp;rsquo;t give a delegate a &lt;code&gt;weak&lt;/code&gt; reference? This guy. This, as you may know, creates a retain cycle, where the view controller can&amp;rsquo;t be destroyed because it&amp;rsquo;s got a strong reference to its delegate object. So, okay, add a &lt;code&gt;weak&lt;/code&gt; keyword and we&amp;rsquo;re done, right?&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;🚫🚫🚫🚫🚫&lt;/h2&gt;
&lt;p&gt;Nope. Xcode refuses to compile the code and gives me the following error if I try that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39;weak&#39; must not be applied to non-class-bound
 &#39;ProductDetailContentViewControllerDelegate&#39;; 
 consider adding a protocol conformance that has a class bound.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Oh. Okay… so what does that mean? I asked &lt;a href=&#34;https://ioscoachfrank.com&#34;&gt;Frank&lt;/a&gt; about it, and here&amp;rsquo;s what he explained:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Make your protocol inherit from AnyObject. Essentially, the compiler is making sure your weak variable is a reference type and not a value type, because a weak value type doesn’t make sense.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And yes, making the &lt;code&gt;ProductDetailContentViewControllerDelegate&lt;/code&gt; protocol conform to &lt;code&gt;AnyObject&lt;/code&gt; fixed the issue. This was a case of me looking for the issue somewhere that was just far enough removed from the actual problem, that I couldn&amp;rsquo;t see the fairly obvious solution.&lt;/p&gt;
&lt;p&gt;A thing I&amp;rsquo;m noticing: if you feel like you&amp;rsquo;re fighting the language/compiler, asking questions like &amp;ldquo;why doesn&amp;rsquo;t &lt;code&gt;removeFromParent()&lt;/code&gt;, y&amp;rsquo;know, &lt;em&gt;remove from parent&lt;/em&gt;?&amp;rdquo; — step back. Re-evaluate and make sure you&amp;rsquo;re asking the right question.&lt;/p&gt;
&lt;p&gt;Oh yeah, and one final bit: &lt;em&gt;why&lt;/em&gt; doesn&amp;rsquo;t a weak value type make sense? Well, &lt;em&gt;weak&lt;/em&gt; or &lt;em&gt;strong&lt;/em&gt; is in relation to the &lt;em&gt;reference&lt;/em&gt; one object has to another. You can&amp;rsquo;t have a reference to a value type — you don&amp;rsquo;t point to them, you copy them. You can only have a reference to the aptly-named reference type.&lt;/p&gt;
&lt;p&gt;So, okay. Tomorrow, we&amp;rsquo;re back to the papercuts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 18</title>
      <link>https://angelostavrow.com/post/per-diaries-day-18/</link>
      <pubDate>Tue, 18 Feb 2020 18:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-18/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;of-delegates-and-datasources&#34;&gt;Of delegates and datasources&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;ProductDetailFormView&lt;/code&gt; has a set of three &lt;code&gt;UITextFields&lt;/code&gt; for entering details (quantity, price, and units) when the user wants to add a new product. Figuring out which text field has been updated is easy enough — give them each a tag and then in the &lt;code&gt;UITextFieldDelegate&lt;/code&gt;&#39;s &lt;code&gt;textFieldDidEndEditing()&lt;/code&gt; method, check for the tag and&amp;hellip; do what with it? It&amp;rsquo;s possible that the user go back and make changes so it&amp;rsquo;s helpful to have a temporary way to track the latest value from the form.&lt;/p&gt;
&lt;p&gt;That temporary object can then be read from and turned into a new &lt;code&gt;ProductItem&lt;/code&gt; object when the user hits the &lt;strong&gt;Add&lt;/strong&gt; button. So how do I set it up?&lt;/p&gt;
&lt;p&gt;I started by creating a simple &lt;code&gt;VolatileFormData&lt;/code&gt; struct in the &lt;code&gt;ProductDetailContentViewController&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct VolatileFormData {
    var price: String
    var units: String
    var quantity: String
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, I give the &lt;code&gt;ProductDetailFormView&lt;/code&gt; a &lt;code&gt;datasource&lt;/code&gt; property:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class ProductDetailFormView: UIView, UITextFieldDelegate {
  var delegate: ProductDetailContentViewControllerDelegate?
  var datasource: VolatileFormData?

  // The rest of the class implementation goes here
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Change the &lt;code&gt;ProductDetailContentViewControllerDelegate&lt;/code&gt; to have an &lt;code&gt;updateVolatileFormData()&lt;/code&gt; method that can be called when a text field&amp;rsquo;s editing-ended event is triggered with the new values, and when the &lt;strong&gt;Add&lt;/strong&gt; button is tapped, a new &lt;code&gt;ProductItem&lt;/code&gt; will be created from the (parsed &lt;code&gt;String&lt;/code&gt;) data in the &lt;code&gt;VolatileFormData&lt;/code&gt; struct. Right?&lt;/p&gt;
&lt;h2 id=&#34;hckin-completion-blocks&#34;&gt;H*ckin&amp;rsquo; completion blocks&lt;/h2&gt;
&lt;p&gt;Not exactly. Why? Well, the action for the &lt;strong&gt;Add&lt;/strong&gt; button looked something like this like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@objc func addButtonTapped(_ sender: UIButton!) {
  delegate.add(createProductFromFormData())
  self.dismiss(animated: true, completion: nil)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This means I&amp;rsquo;m trying to create the &lt;code&gt;ProductItem&lt;/code&gt; based on what was in the temporary form-data object when the &lt;strong&gt;Add&lt;/strong&gt; button was tapped, and then I dismiss the &lt;code&gt;ProductDetailFormView&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So here&amp;rsquo;s what happens in that case (keeping in mind that for now, units are not considered):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User taps on the quantity field, enters a quantity&lt;/li&gt;
&lt;li&gt;User taps on the price field, the quantity field fires the editing-ended event, and &lt;code&gt;volatileFormData&lt;/code&gt; is updated&lt;/li&gt;
&lt;li&gt;User enters price, taps on the &lt;strong&gt;Add&lt;/strong&gt; button&lt;/li&gt;
&lt;li&gt;The view controller fires the &lt;code&gt;addButtonTapped&lt;/code&gt; action, which tries to create the &lt;code&gt;ProductItem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If it succeeds, the view controller dismisses itself, so the price field fires the editing-ended event, and &lt;code&gt;volatileFormData&lt;/code&gt; is updated&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See the issue?&lt;/p&gt;
&lt;p&gt;The form data doesn&amp;rsquo;t get updated until &lt;em&gt;after&lt;/em&gt; the view controller tries to create the product. But the &lt;code&gt;dismiss(animated:)&lt;/code&gt; method includes an optional &lt;code&gt;completion:&lt;/code&gt; block that can be run &lt;em&gt;after&lt;/em&gt; the view controller dismisses itself. Seems like a good time to create the &lt;code&gt;ProductItem&lt;/code&gt;, right?&lt;/p&gt;
&lt;p&gt;So now the action looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@objc func addButtonTapped(_ sender: UIButton!) {
    self.dismiss(animated: true, completion: {
        self.delegate.add(self.createProductFromFormData())
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And thus the flow looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. User taps on the quantity field, enters a quantity
2. User taps on the price field, the quantity field fires the editing-ended event, and `volatileFormData` is updated
3. User enters price, taps on the **Add** button
4. The view controller fires the `addButtonTapped` action, so the view controller prepares to dismiss itself
5. The price field fires the editing-ended event, and `volatileFormData` is updated
6. The view controller is now gone, so the completion block fires and creates the new `ProductItem`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hurray!&lt;/p&gt;
&lt;p&gt;I think this is a good time to stop and take stock of where the app is at. There&amp;rsquo;s been a lot of forward progress, but it makes sense to have a look at the little paper cuts that are building up. Before going any further, I think it&amp;rsquo;s worth reviewing all the code that&amp;rsquo;s been written so far, and see how it can be cleaned up, re-organized, and —most importantly— thoroughly tested. So, tomorrow, I&amp;rsquo;m not writing any code; I&amp;rsquo;m going to create a list of &lt;code&gt;TODO&lt;/code&gt;s, &lt;code&gt;FIXME&lt;/code&gt;s and &lt;code&gt;HACK&lt;/code&gt;s.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 17</title>
      <link>https://angelostavrow.com/post/per-diaries-day-17/</link>
      <pubDate>Mon, 17 Feb 2020 18:30:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-17/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;delegating-to-delegates&#34;&gt;Delegating to delegates&lt;/h2&gt;
&lt;p&gt;With the form laying out the way I&amp;rsquo;d like, I now have to get the data that a user enters into the form from that view to the view controller it&amp;rsquo;s embedded in. And what&amp;rsquo;s the best way to do this? The delegate pattern!&lt;/p&gt;
&lt;p&gt;(I&amp;rsquo;m kinda wiped out after a rough night, so this isn&amp;rsquo;t going to be a big, in-depth post — and today wasn&amp;rsquo;t an especially productive day of writing code, either.)&lt;/p&gt;
&lt;p&gt;But here&amp;rsquo;s the gist of it, implemented kinda hastily just to remind myself how this all works. There&amp;rsquo;s a view controller (in this case, &lt;code&gt;ProductDetailContentViewController&lt;/code&gt;) that adds a child view that has a bunch of &lt;code&gt;UITextField&lt;/code&gt;s in it called &lt;code&gt;ProductDetailFormView&lt;/code&gt;. Each of the text fields have a delegate that capture events like &lt;code&gt;textFieldDidEndEditing()&lt;/code&gt; so you can &lt;em&gt;do stuff&lt;/em&gt;, like formatting numbers or whatever. And you want your view controller to be able to get that data from the child view, but you have no way of knowing &lt;em&gt;what&lt;/em&gt; is in that child view.&lt;/p&gt;
&lt;p&gt;So you create a delegate protocol for the view controller that the child view can talk to!&lt;/p&gt;
&lt;p&gt;Very simply, here&amp;rsquo;s what I&amp;rsquo;ve got right now:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;protocol ProductDetailContentViewControllerDelegate {
    func createProductFromFormInput(_ product: String)
}

class ProductDetailContentViewController: UIViewController {
  // The class implementation
}

extension ProductDetailContentViewController: ProductDetailContentViewControllerDelegate {
    func createProductFromFormInput(_ product: String) {
        // Just print whatever we get back for testing purposes
        print(product)
    }    
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Side note: I like handling delegate conformance in an extension like this because it keeps the class implementation itself nice and clean. If it&amp;rsquo;s a simple protocol you could probably just have it all in your class, but that just feels like yet another path to massive view controllers if you&amp;rsquo;re not careful.&lt;/p&gt;
&lt;p&gt;Anyhow, in my child view, I just need to add this as a delegate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class ProductDetailFromView: UIView, UITextFieldDelegate {
  var delegate: ProductDetailContentViewControllerDelegate?

  // The rest of the class implementation

  func textFieldDidEndEditing(_ textField: UITextField) {
    delegate?.createProductFromFormInput(textField.text)
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At a very high level, having the text field delegate call the &lt;code&gt;createProductFromFormInput()&lt;/code&gt; method of the &lt;code&gt;ProductDetailContentViewControllerDelegate&lt;/code&gt; when editing finishes raises a flag saying, &amp;ldquo;hey, I&amp;rsquo;m done with this text field, whoever owns this can do something with it now!&amp;rdquo; And so the extension I showed you above will catch that flag and say, &amp;ldquo;okay, cool, got it — let me print it to the console!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Oh, one silly little thing that I forgot: when you declare your child view in the view controller&amp;rsquo;s &lt;code&gt;viewDidLoad()&lt;/code&gt; method, don&amp;rsquo;t forget to tell it what its delegate is. 😅&lt;/p&gt;
&lt;p&gt;Something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class ProductDetailContentViewController: UIViewController {
  // Some of the class implementation

  override func viewDidLoad() {
    super.viewDidLoad()

    productDetailFormView = ProductDetailFormView()
    productDetailFormView.delegate = self

    // The rest of the viewDidLoad() stuff
  }

  // The rest of the class implementation
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now this isn&amp;rsquo;t &lt;em&gt;super&lt;/em&gt; helpful because it just sends back whatever is in a text field when that text field loses focus. There are three different text fields in the form, so tomorrow I&amp;rsquo;ll tackle differentiating between them, so that the quantity field sends back a quantity, the price field sends back a price, and the units field sends back units.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 16</title>
      <link>https://angelostavrow.com/post/per-diaries-day-16/</link>
      <pubDate>Sun, 16 Feb 2020 17:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-16/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;constraints&#34;&gt;Constraints&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-15/&#34;&gt;Yesterday&lt;/a&gt;, I started subclassing &lt;code&gt;UIView&lt;/code&gt; to get the setup and layout of the product-details form out of its parent view controller, but was having a heck of a time trying to get it to look the way it was supposed to.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the situation. The view controller doesn&amp;rsquo;t know the size of the child view that is being added, so that child view gets initialized with a &lt;a href=&#34;https://developer.apple.com/documentation/coregraphics/cgrect/1455437-zero&#34;&gt;&lt;code&gt;.zero&lt;/code&gt; frame&lt;/a&gt; — that is, it&amp;rsquo;s placed at the origin (0,0) of the view controller&amp;rsquo;s bounds, with height and width equal to zero.&lt;/p&gt;
&lt;p&gt;The child view has its layout constraints pinned to the top, left, and right of its &lt;code&gt;layoutMarginsGuide&lt;/code&gt;. Cool.&lt;/p&gt;
&lt;p&gt;Of course, as I realized, it&amp;rsquo;s not enough to say &lt;code&gt;view.addSubview(childView)&lt;/code&gt; and be done with it when we&amp;rsquo;re doing our layout in code; the child view has its constraints relative to its &lt;code&gt;layoutMarginsGuide&lt;/code&gt;, but it doesn&amp;rsquo;t have any constraints set up in relation to its parent view!&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s mostly straightforward —add constraints to the top, left, and right of the parent view— until you try to pin another child view to the bottom of the form. Remember, that form was initialized with a &lt;code&gt;.zero&lt;/code&gt; frame, so to UIKit, it&amp;rsquo;s technically got zero height unless you add that constraint. And, at least with the standard UI controls I&amp;rsquo;m using, that height can be determined by the &lt;code&gt;intrinsicContentSize.height&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;Pop quiz: what&amp;rsquo;s the intrinsicContentSize of a &lt;code&gt;UIStackView&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Trick question! A stack view has no intrinsic size of its own. You&amp;rsquo;ve got to figure that out based on the intrinsic size of the controls&lt;/em&gt; within &lt;em&gt;the stack view.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Which is exactly what I did: I exposed a &lt;code&gt;formHeight&lt;/code&gt; property in the child view that is computed by a function called &lt;code&gt;getHeight()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func getHeight(of stackView: UIStackView) -&amp;gt; CGFloat {
if stackView.arrangedSubviews.count &amp;lt; 1 { return 0.0 }

if (stackView.axis == .horizontal) {
    var heights = [CGFloat]()
    
    stackView.arrangedSubviews.forEach { subView in
        if (subView.isKind(of: UIStackView.self)) {
            heights.append(getHeight(of: subView as! UIStackView))
        } else {
            heights.append(subView.intrinsicContentSize.height)
        }
    }
    
    return heights.max() ?? 0.0
} else {
    var totalHeight: CGFloat = 0.0
    
    stackView.arrangedSubviews.forEach { subView in
        if (subView.isKind(of: UIStackView.self)) {
            totalHeight += getHeight(of: subView as! UIStackView)
        } else {
            totalHeight += subView.intrinsicContentSize.height
        }
    }
    
    totalHeight += CGFloat(stackView.arrangedSubviews.count - 1) * stackView.spacing
    
    return totalHeight
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you pass in a stack view, this function will either return the tallest arranged subview in a &lt;code&gt;.horizontal&lt;/code&gt; stack view, or the sum of heights of all arranged subviews in a &lt;code&gt;.vertical&lt;/code&gt; stack view, plus the spacing between them. If, as it walks through the arranged subviews, it finds another subview, it&amp;rsquo;ll recursively call itself on &lt;em&gt;that&lt;/em&gt; stack view. It works really well for this use case!&lt;/p&gt;
&lt;p&gt;So, now I can set the &lt;code&gt;heightAnchor&lt;/code&gt; constraint to the the value of the child view&amp;rsquo;s &lt;code&gt;formHeight&lt;/code&gt; property, and I&amp;rsquo;m set — the layout looks fine, and tomorrow I can work on getting the values from the text fields to create the new &lt;code&gt;ProductItem&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Daily Diary of Small Steps</title>
      <link>https://angelostavrow.com/post/daily-diary-small-steps/</link>
      <pubDate>Sat, 15 Feb 2020 15:45:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/daily-diary-small-steps/</guid>
      <description>&lt;p&gt;As you might know if you subscribe to this site&amp;rsquo;s RSS feed (which syndicates to Micro.blog and Twitter), I&amp;rsquo;ve been working on a from-scratch rewrite of my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. More interesting to me is the context around how and why I&amp;rsquo;m doing this rewrite, as well as what I&amp;rsquo;ve been learning from the process.&lt;/p&gt;
&lt;p&gt;The goal is to spend an hour a day making one small change to the codebase. Not only that, I&amp;rsquo;m also writing a short blog post each day discussing what I got done. The plan is to have a functionally capable (if somewhat plain) iOS app that replicates Per&amp;rsquo;s current v1.2 functionality by the end of February, with maybe a couple of new features.&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t touched Swift or UIKit &amp;ldquo;in anger&amp;rdquo; since I shipped the current version of Per on the App Store, over 4 years ago. As you can imagine, lots has changed, so much of the time I&amp;rsquo;m spending is about learning, trying new things, and forming opinions.&lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;Opinion:&lt;/strong&gt; creating views in code rather than with Interface Builder just… &lt;em&gt;speaks to me&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;Perhaps the biggest takeaway is just how much progress I&amp;rsquo;ve made with such a relatively small amount of time dedicated to this work per day. Writing about that little bit of progress every day —for anyone to read— has been a motivator (public accountability!) to keep at it, day after day, while also serving as a record of what I did the day before.&lt;/p&gt;
&lt;p&gt;As I work, the tasks ahead of me begin to take shape, and the further I progress, the easier it becomes to understand what tomorrow&amp;rsquo;s iteration should be. And —I feel this is key— I also make sure to end my session by noting down what I want to tackle tomorrow. This means that when I sit down, I can open up Xcode and have total clarity on what my goal for the day is.&lt;/p&gt;
&lt;p&gt;This is important! I don&amp;rsquo;t waste time spinning my wheels, trying to figure out what to do today, because I already decided that yesterday. Nor do I don&amp;rsquo;t feel overwhelmed by a monumental task ahead of me, because I don&amp;rsquo;t plan anything that will take more than an hour.&lt;/p&gt;
&lt;p&gt;This is something I&amp;rsquo;ve been applying more generally, and I&amp;rsquo;ve come upon a system that&amp;rsquo;s been working well for me that combines a set of text files to pull together a daily journal, weekly retrospectives, project-specific update logs, and [TaskPaper]-formatted to-do lists. I&amp;rsquo;m nearly done fleshing the system out —mostly, I want to add some automation because it currently involves cutting and pasting things between various text files— and I&amp;rsquo;ll be writing more about it when I do!&lt;/p&gt;
&lt;p&gt;All of this comes from having formed a habit of journaling daily for the last two years — capturing the baby steps we take between having an idea and bringing it to reality. I&amp;rsquo;m excited about this in ways I didn&amp;rsquo;t expect, and I look forward to sharing them with you all!&lt;/p&gt;
&lt;h2 id=&#34;interesting-reads-this-week&#34;&gt;Interesting reads this week&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.theguardian.com/commentisfree/2020/jan/31/we-need-to-move-on-from-self-care-to-something-that-cannot-be-captured-by-capitalism&#34;&gt;We need to move on from self-care to something that cannot be captured by capitalism — Brigid Delaney&lt;/a&gt;: We need to move beyond the fetishization of self-care and focus our efforts on collective care. (H/T: &lt;a href=&#34;https://jkglei.com&#34;&gt;Jocelyn K. Glei&amp;rsquo;s newsletter&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.inthemargins.ca/daily-journaling-practice&#34;&gt;My daily journaling practice — Sameer Vasta&lt;/a&gt;: A great description of how one person does daily journaling. I especially like the ritualistic approach, and using prompts is especially helpful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elsewhere-on-the-web&#34;&gt;Elsewhere on the web&lt;/h2&gt;
&lt;p&gt;I published &lt;a href=&#34;https://dev.to/glitch/create-react-app-and-express-together-on-glitch-28gi&#34;&gt;my first article on DEV.to&lt;/a&gt; on how to get &lt;code&gt;create-react-app&lt;/code&gt; and Express to play nicely together on Glitch, complete with a &lt;a href=&#34;https://glitch.com/~starter-cra-and-express&#34;&gt;starter project&lt;/a&gt; you can remix to get started.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 15</title>
      <link>https://angelostavrow.com/post/per-diaries-day-15/</link>
      <pubDate>Sat, 15 Feb 2020 08:45:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-15/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;subclassing-uiviews&#34;&gt;Subclassing UIViews&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-14/&#34;&gt;Yesterday&lt;/a&gt; I had the &lt;code&gt;ProductDetailContentViewController&lt;/code&gt; working (more or less), but I was unhappy with just how big it was getting. It&amp;rsquo;s got two main components: a form in which the user enters product details (price, quantity, units), and a pair of buttons to add the product to the list, or cancel the action altogether.&lt;/p&gt;
&lt;p&gt;Today, I started work on subclassing &lt;code&gt;UIView&lt;/code&gt; to move that form component into its own &lt;code&gt;ProductDetailFormView&lt;/code&gt;, to pull all of those controls (three &lt;code&gt;UITextField&lt;/code&gt;s, two &lt;code&gt;UIStackView&lt;/code&gt;s, and a &lt;del&gt;partridge in a pear tree&lt;/del&gt; &lt;code&gt;UILabel&lt;/code&gt;) and the form&amp;rsquo;s own layout into its own class.&lt;/p&gt;
&lt;p&gt;Once again, Frank Courville&amp;rsquo;s got &lt;a href=&#34;https://ioscoachfrank.com/uiview-basics.html&#34;&gt;a handy article&lt;/a&gt; for this! So far, I&amp;rsquo;ve started writing the &lt;code&gt;setupView()&lt;/code&gt; and &lt;code&gt;setupConstraints()&lt;/code&gt; methods for the class. One little change that I like is to declare my controls as &lt;code&gt;lazy&lt;/code&gt;, so that I don&amp;rsquo;t have to worry about unwrapping optionals (force-unwrap and &lt;code&gt;guard let&lt;/code&gt; both feel like the wrong way to reason about views, and &lt;a href=&#34;https://swiftbysundell.com/articles/handling-non-optional-optionals-in-swift/&#34;&gt;John Sundell agrees&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class ProductDetailFormView: UIView {
    lazy var quantityTextField = UITextField()
    lazy var unitsTextField = UITextField()
    lazy var measurementStackView = UIStackView()
    lazy var forLabel = UILabel()
    lazy var priceTextField = UITextField()
    lazy var formStackView = UIStackView()

    override init(frame: CGRect) {
        super.init(frame: frame)
        
        setupView()
        setupConstraints()
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        
        setupView()
        setupConstraints()
    }
    
    // Create the views and define some basic styling.
    func setupView() {
        quantityTextField.placeholder = &amp;quot;0&amp;quot;
        quantityTextField.textAlignment = .right
        quantityTextField.keyboardType = .decimalPad
        quantityTextField.borderStyle = .roundedRect
        
        unitsTextField.placeholder = &amp;quot;units&amp;quot;
        unitsTextField.textAlignment = .center
        unitsTextField.isEnabled = false          // Deal with units later
        unitsTextField.borderStyle = .roundedRect
        
        measurementStackView.axis = .horizontal
        measurementStackView.distribution = .fillEqually
        measurementStackView.alignment = .center
        measurementStackView.spacing = 16
        
        measurementStackView.addArrangedSubview(quantityTextField)
        measurementStackView.addArrangedSubview(unitsTextField)
        
        forLabel.text = &amp;quot;for&amp;quot;
        forLabel.textAlignment = .right
        
        priceTextField.placeholder = &amp;quot;0.00&amp;quot;
        priceTextField.textAlignment = .right
        priceTextField.keyboardType = .decimalPad
        priceTextField.borderStyle = .roundedRect
        
        formStackView.axis = .vertical
        formStackView.distribution = .equalSpacing
        formStackView.alignment = .fill
        formStackView.spacing = 16
        
        formStackView.addArrangedSubview(measurementStackView)
        formStackView.addArrangedSubview(forLabel)
        formStackView.addArrangedSubview(priceTextField)
        
        addSubview(formStackView)
    }

    func setupConstraints() {
        formStackView.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            formStackView.topAnchor.constraint(equalTo: layoutMarginsGuide.topAnchor, constant: 16),
            formStackView.leadingAnchor.constraint(equalTo: layoutMarginsGuide.leadingAnchor, constant: 16),
            formStackView.trailingAnchor.constraint(equalTo: layoutMarginsGuide.trailingAnchor, constant: -16)
        ])
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I&amp;rsquo;m running into some trouble figuring out the constraints right now. Specifically, the form take the full width of the top of the superview, and its height should be the height of its contents (the &lt;code&gt;formStackView&lt;/code&gt;). That height is where I&amp;rsquo;m a bit stuck, because when I call the &lt;code&gt;ProductDetailFormView&lt;/code&gt; initializer from its superview, I have to hand it a &lt;code&gt;frame&lt;/code&gt;; it&amp;rsquo;s clear to me that the frame&amp;rsquo;s origin is &lt;code&gt;(0, 0)&lt;/code&gt; and that its width would be &lt;code&gt;view.bounds.width&lt;/code&gt;, but I&amp;rsquo;m haven&amp;rsquo;t quite figured out the best way to set its height.&lt;/p&gt;
&lt;p&gt;I could give it a third of the height of the superview (&lt;code&gt;view.bounds.height / 3&lt;/code&gt;), but that&amp;rsquo;s not adaptive, so if I want to change, say, font sizes in the form view, I need to ensure that it still fits whatever portion of the superview height. That&amp;rsquo;s silly.&lt;/p&gt;
&lt;p&gt;In the form view&amp;rsquo;s initializer, I could throw away whatever frame height I get, but it&amp;rsquo;s still not clear to me how I get the form&amp;rsquo;s inherent height &lt;em&gt;in the initializer&lt;/em&gt;. In Frank&amp;rsquo;s article, he calls it with a &lt;code&gt;.zero&lt;/code&gt; frame (i.e., at the origin, with zero size); if I do that, then I get a broken layout and a warning:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[LayoutConstraints] Unable to simultaneously satisfy constraints.
	Probably at least one of the constraints in the following list is one you don&#39;t want. 
	Try this: 
		(1) look at each constraint and try to figure out which you don&#39;t expect; 
		(2) find the code that added the unwanted constraint or constraints and fix it. 
	(Note: If you&#39;re seeing NSAutoresizingMaskLayoutConstraints that you don&#39;t understand, refer to the documentation for the UIView property translatesAutoresizingMaskIntoConstraints) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If I set&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;productDetailFormView.translatesAutoresizingMaskIntoConstraints = false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;then the warning disappears, and the layout kind-of shows up, but it&amp;rsquo;s sized entirely according to the intrinsic size of the form&amp;rsquo;s controls, not the full width of the superview, and trying to anchor other things to the form view&amp;rsquo;s anchors doesn&amp;rsquo;t work properly because it&amp;rsquo;s still got that &lt;code&gt;.zero&lt;/code&gt; frame.&lt;/p&gt;
&lt;p&gt;This is where my relative inexperience with writing custom &lt;code&gt;UIView&lt;/code&gt;s is throwing me for a loop, but I&amp;rsquo;ll dig into this a bit more tomorrow!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 14</title>
      <link>https://angelostavrow.com/post/per-diaries-day-14/</link>
      <pubDate>Fri, 14 Feb 2020 08:30:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-14/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;getting-to-mvp&#34;&gt;Getting to MVP&lt;/h2&gt;
&lt;p&gt;So, working with stack views is fun!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-13/&#34;&gt;Yesterday&lt;/a&gt; I created a first stack view to layout the &lt;strong&gt;Add&lt;/strong&gt; and &lt;strong&gt;Cancel&lt;/strong&gt; buttons in the add-product view, with today&amp;rsquo;s goal being to layout the rest of the view.&lt;/p&gt;
&lt;p&gt;It was pretty straight forward, and now I have a functional-ish app! I can enter a (unitless) product and it&amp;rsquo;ll get sorted according to price per unit:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/2020-02-14/screenshots-progress-2020-02-14.png&#34; alt=&#34;&amp;ldquo;Two screenshots of Per in action, displaying the add-product screen and the product list screen&amp;rdquo;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Of course, because there&amp;rsquo;s &lt;em&gt;no&lt;/em&gt; validation going on, you can also crash the app by simply tapping the &lt;strong&gt;Add&lt;/strong&gt; button when you don&amp;rsquo;t enter any text. And you can&amp;rsquo;t select anything other than &amp;ldquo;units&amp;rdquo; for the product you&amp;rsquo;re adding. Still, technically, I could install the app on my phone now and start using it!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also now made a huge mess of the &lt;code&gt;ProductDetailContentViewController&lt;/code&gt;, too. In it, there&amp;rsquo;s all the setup code for the stack views (3), the text fields (3), the buttons (2), and a label. All of that should be broken up into at least two view controllers: one for the inputs, and one for the buttons, and validation can be added as necessary there.&lt;/p&gt;
&lt;p&gt;So, breaking up this not-quite-massive-but-kinda-huge view controller is what I&amp;rsquo;ll work on tomorrow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 13</title>
      <link>https://angelostavrow.com/post/per-diaries-day-13/</link>
      <pubDate>Thu, 13 Feb 2020 07:30:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-13/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;stacking-the-deck&#34;&gt;Stacking the Deck&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-12/&#34;&gt;Yesterday&lt;/a&gt; I threw together a little ASCII-rendered layout of nested stack views and mentioned that I&amp;rsquo;d start implementing it by putting the existing &lt;strong&gt;Add&lt;/strong&gt; and &lt;strong&gt;Cancel&lt;/strong&gt; buttons in a horizontal stack view. So the goal for today is to spike something like this in my &lt;code&gt;ProductDetailContentViewController&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+==================+
||  ADD  || CANCEL|| &amp;lt;- Horizontal stack view
+==================+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Eventually, the goal is to refactor this out into context, container and content view controllers, but right now that&amp;rsquo;s overthinking it. Remember, the goal of this rewrite is a &amp;ldquo;one small change per day&amp;rdquo; approach.&lt;/p&gt;
&lt;p&gt;I noticed a UI bug, too: when the user taps the &lt;strong&gt;Add&lt;/strong&gt; button, the action&amp;rsquo;s completion block enables the clear-list button. This means that if you tap the add button to create the first product on the list, and cancel out of that action instead of adding something, that clear-list button &lt;em&gt;still&lt;/em&gt; gets enabled.&lt;/p&gt;
&lt;p&gt;I can&amp;rsquo;t add this logic to the completion block, though — it&amp;rsquo;ll check the length of the product list before the product item actually gets added, rather than after.&lt;/p&gt;
&lt;p&gt;Completion blocks are insidious in this way. You think they&amp;rsquo;re going to run, y&amp;rsquo;know, &lt;em&gt;after completion&lt;/em&gt;, but always ask yourself: after completion &lt;em&gt;of what&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;We want the logic for enabling the clear-list button to be triggered by &lt;em&gt;actually adding an item&lt;/em&gt;, so we can instead move it to the &lt;code&gt;add(item:)&lt;/code&gt; delegate method in the product list context view controller. This gets called by the product detail content view controller when the user taps the &lt;strong&gt;Add&lt;/strong&gt; button, which is all we need!&lt;/p&gt;
&lt;p&gt;Good! So today I started implementing the layout by putting the product detail view&amp;rsquo;s buttons in a horizontal stack view, and fixed a little UI bug. Tomorrow, I&amp;rsquo;m going to continue by adding a vertical stack view for all the labels and text fields.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 12</title>
      <link>https://angelostavrow.com/post/per-diaries-day-12/</link>
      <pubDate>Wed, 12 Feb 2020 07:45:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-12/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;in-the-details&#34;&gt;In The Details&lt;/h2&gt;
&lt;p&gt;On &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-10/&#34;&gt;Monday&lt;/a&gt; I worked on a plan for the week. I tackled a simple clear-the-list feature yesterday, and today I&amp;rsquo;m going to start —but probably not finish— work on the product detail view(s) that let users enter, uh, product details.&lt;/p&gt;
&lt;p&gt;Again, some planning is worth the effort before jumping into writing code. The goal of this part of the rewrite is to get something functional up and running before doing any custom design, and to learn, but making it easy to change a codebase is more invoved than you&amp;rsquo;d think.&lt;/p&gt;
&lt;img title=&#34;A screenshot of Per&#39;s product-entry screen&#34; src=&#34;https://angelostavrow.com/images/2020-02-12/per-product-entry-screenshot.jpg&#34; style=&#34;width:240px;margin-left: 1em;float: right;lock;0px;&#34;/&gt;
&lt;p&gt;In its current form, a product is entered into Per as a set of three text fields, as shown. And it&amp;rsquo;s&amp;hellip; not wonderful.&lt;/p&gt;
&lt;p&gt;The design sacrifices a lot for the sake of compactness — in my initial sketches, I wanted Per to handle as much input as possible in a single view, to make it very quick and easy to get in and out of the app while, say, doing your groceries.&lt;/p&gt;
&lt;p&gt;For v2, users aren&amp;rsquo;t limited to comparing two products, so we necessarily need a separate view for product entry. This gives me a lot more room to breath, as it were, so starting off with three sets of label-plus-textfield input areas is a good start!&lt;/p&gt;
&lt;p&gt;This is where &lt;a href=&#34;https://developer.apple.com/documentation/uikit/uistackview&#34;&gt;stack views&lt;/a&gt; are super helpful. I feel that &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox&#34;&gt;flexbox&lt;/a&gt; is a good analogue to stack views in the web development world; you create either a row or a column of views and align them along the main and cross axes according to some rules, and voilà! You have a basic layout. And you can nest stack views, for something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+------------------+   ^
|                  |   |
+------------------+   |
|                  |   |
+------------------+  Vertical stack view
|                  |   |
+==================+   |
||       ||       || &amp;lt;-+-- Horizontal stack view
+==================+   V
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Tomorrow, I&amp;rsquo;ll start implementing something like this by putting the existing &lt;strong&gt;Add&lt;/strong&gt; and &lt;strong&gt;Cancel&lt;/strong&gt; buttons in a horizontal stack view.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 11</title>
      <link>https://angelostavrow.com/post/per-diaries-day-11/</link>
      <pubDate>Tue, 11 Feb 2020 17:30:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-11/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;thinking-clearly&#34;&gt;Thinking Clearly&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m only able to do a little bit today because &lt;em&gt;reasons&lt;/em&gt;, but there&amp;rsquo;s enough time to tackle the first of &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-10/&#34;&gt;yesterday&amp;rsquo;s goals&lt;/a&gt; for the week: a way to clear the product list.&lt;/p&gt;
&lt;p&gt;First, the &lt;code&gt;Product&lt;/code&gt; model needs a way to clear the list — Swift&amp;rsquo;s &lt;code&gt;removeAll()&lt;/code&gt; array method to the rescue!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mutating func clearItems() {
    _products.removeAll()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, I need a way to trigger this from the UI — and another &lt;code&gt;UIBarButtonItem&lt;/code&gt; next to the add-product button should do it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clearListBarButtonItem = UIBarButtonItem(barButtonSystemItem: .trash,
                                                      target: self,
                                                      action: #selector(handleClearListBarButtonItemTapped))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;handleClearListBarButtonItemTapped&lt;/code&gt; action is then pretty straightforward (remember from &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-7/&#34;&gt;day 7&lt;/a&gt; that the &lt;code&gt;contentViewController&lt;/code&gt; is the one that wraps the table view):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@objc func handleClearListBarButtonItemTapped(sender: UIBarButtonItem) {
    contentViewController.productList.clearItems()
    contentViewController.loadView()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s about it! I went back and sprinkled some &lt;code&gt;.isEnabled&lt;/code&gt; here and there to make sure that the button is disabled if there&amp;rsquo;s nothing in the list, and that was enough to call this done.&lt;/p&gt;
&lt;p&gt;Tomorrow, I&amp;rsquo;ll start work on a form for entering product item details in the &lt;code&gt;ProductItemContentViewController&lt;/code&gt;, which will have me diving into unfamiliar territory: creating layout in code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 10</title>
      <link>https://angelostavrow.com/post/per-diaries-day-10/</link>
      <pubDate>Mon, 10 Feb 2020 08:15:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-10/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;thinking-ahead&#34;&gt;Thinking ahead&lt;/h2&gt;
&lt;p&gt;I mentioned &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-9/&#34;&gt;yesterday&lt;/a&gt; that I&amp;rsquo;d work on understanding a Simulator bug that I&amp;rsquo;m seeing when dismissing a detail view controller today. I&amp;rsquo;m stepping back from writing code today, though, to get a feeling for where I am and what I hope to accomplish this week.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m really happy with progress so far! I&amp;rsquo;ve gone from an empty Xcode project to something with a couple of views and some models and the skeleton of a useful app, more or less. I&amp;rsquo;m learning (I mean, aren&amp;rsquo;t we all, always?) and have gotten a lot done in about an hour a day for the last week and a half. I want to keep up this hour-a-day cadence, but I think it&amp;rsquo;s worth thinking about how to best approach that hour too.&lt;/p&gt;
&lt;p&gt;The app isn&amp;rsquo;t yet &lt;em&gt;usable&lt;/em&gt;, so my goal for this week is to have it in installed on my iPhone and using it for doing &lt;em&gt;at least&lt;/em&gt; dimensionless price comparisons. That shouldn&amp;rsquo;t be too hard to do, as I&amp;rsquo;m almost there — just need to add some labels and text fields to the detail view controller.&lt;/p&gt;
&lt;p&gt;BUT! There&amp;rsquo;s also a complete lack of tests, so I&amp;rsquo;d like to slow down the forward momentum and add some coverage for unit tests. I&amp;rsquo;m rusty with testing a Swift app, so that&amp;rsquo;s something I&amp;rsquo;ll spend time learning as part of my Per time this week, too.&lt;/p&gt;
&lt;p&gt;Here are the goals for this week:&lt;/p&gt;
&lt;h3 id=&#34;a-way-to-clear-the-product-list&#34;&gt;A way to clear the product list&lt;/h3&gt;
&lt;p&gt;Right now, I can add products to the list for comparison, but the only way to clear them out is to force-quit the app (or wait for it to be terminated in the background). A way to clear the list is important.&lt;/p&gt;
&lt;h3 id=&#34;a-product-detail-view-that-lets-me-enter-quantity-units-and-price&#34;&gt;A product detail view that lets me enter quantity, units, and price&lt;/h3&gt;
&lt;p&gt;Right now the product detail view only adds a randomly-generated &lt;code&gt;ProductItem&lt;/code&gt; and that&amp;rsquo;s&amp;hellip; not very helpful, so I want to add a basic form that lets me enter the price, quantity, and units for a product. I don&amp;rsquo;t want to worry about dealing with units yet, though, so I&amp;rsquo;m going to default to dimensionless units.&lt;/p&gt;
&lt;h3 id=&#34;unit-tests-for-the-product-and-product-list-models&#34;&gt;Unit tests for the product and product-list models&lt;/h3&gt;
&lt;p&gt;At a minimum, having solid testing coverage for your models is pretty important, and I will look at testing the view controllers later as they&amp;rsquo;re likely to be refactored &lt;em&gt;a lot&lt;/em&gt; between now and the end of this project. I&amp;rsquo;ve never really explored UI testing on iOS, so that&amp;rsquo;s going to be something that I worry about later.&lt;/p&gt;
&lt;p&gt;More to come tomorrow!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 9</title>
      <link>https://angelostavrow.com/post/per-diaries-day-9/</link>
      <pubDate>Sun, 09 Feb 2020 18:30:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-9/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;delegate-delegate-delegate&#34;&gt;Delegate, Delegate, Delegate&lt;/h2&gt;
&lt;p&gt;So I&amp;rsquo;m now working on a simple UI to add product details to the table view. Presenting a new product detail &lt;em&gt;content&lt;/em&gt; view controller from the product list &lt;em&gt;context&lt;/em&gt; view controller isn&amp;rsquo;t too hard — when the ➕ button is tapped in the navigation bar, we just need to responding by pushing a new view controller onto the navigation stack:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@objc func handleAddProductBarButtonItemTapped(sender: UIBarButtonItem) {
    let productDetailVC = ProductDetailContentViewController()
    self.present(productDetailVC, animated: true, completion: nil)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But we also need to be able to add a item to the product list, so we create a &lt;code&gt;delegate&lt;/code&gt; property in this new product detail content view controller:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;weak var delegate: ProductListContextViewController!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The tells the detail VC, &amp;ldquo;hey, delegate any work back to the product list context VC&amp;rdquo;; in this case, Per will collect the details of the new product you want to add in the &lt;code&gt;ProductDetailContentViewController&lt;/code&gt; and pass them back when to its delegate when you tap an &amp;ldquo;Add&amp;rdquo; button:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@objc func addButtonTapped(_ sender: UIButton!) {
    delegate.add(createRandomProduct())
    self.dismiss(animated: true, completion: nil)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(I&amp;rsquo;ve just got a placeholder &amp;ldquo;Add&amp;rdquo; button that calls the &lt;code&gt;createRandomProduct()&lt;/code&gt; method I mentioned on &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-7/&#34;&gt;day 7&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Now, I can go back to the product list context view controller and add itself as a delegate to the product detail content view controller:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@objc func handleAddProductBarButtonItemTapped(sender: UIBarButtonItem) {
    let productDetailVC = ProductDetailContentViewController()
    productDetailVC.delegate = self
    self.present(productDetailVC, animated: true, completion: nil)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And we add the method called:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func add(_ item: ProductItem) {
    self.contentViewController.productList.add(item, sort: true)
    self.contentViewController.loadView()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, to summarize, here&amp;rsquo;s what happens:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;ProductListContextViewController&lt;/code&gt; creates a &lt;code&gt;ProductDetailContentViewController&lt;/code&gt; and tells it, &amp;ldquo;hey, I&amp;rsquo;m your delegate!&amp;rdquo; before presenting it.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ProductDetailContentViewController&lt;/code&gt; presents a UI for collecting product info (price, quantity, units), and then calls the &lt;code&gt;add()&lt;/code&gt; method of its delegate (the &lt;code&gt;ProductListContextViewController&lt;/code&gt;) before dismissing itself.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ProductListContextViewController&lt;/code&gt; receives the call to its &lt;code&gt;add()&lt;/code&gt; method and updates the product list and table view accordingly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;rsquo;s something weird about how my detail view controller dismisses itself, though — sometimes it&amp;rsquo;s a smooth animation, and sometimes it just disappears. I&amp;rsquo;ll figure out why tomorrow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 8</title>
      <link>https://angelostavrow.com/post/per-diaries-day-8/</link>
      <pubDate>Sat, 08 Feb 2020 08:15:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;sorting-order&#34;&gt;Sorting order&lt;/h2&gt;
&lt;p&gt;In the original version of Per, you entered the details for two products, and hit a big red &amp;ldquo;Compare&amp;rdquo; button to see which option gave you the most value for your money. That isn&amp;rsquo;t going to be a great way to deal with more than two products — imagine having to initiate a comparison every time you add something?&lt;/p&gt;
&lt;p&gt;Instead, the app can simply float the best option(s) to the top of the list every time you add a new product! That makes feedback really fast and really easy.&lt;/p&gt;
&lt;p&gt;Turns out, it&amp;rsquo;s really easy to implement this, because of a couple of things working together.&lt;/p&gt;
&lt;p&gt;First, because I made the &lt;code&gt;Product&lt;/code&gt; protocol conform to &lt;code&gt;Comparable&lt;/code&gt; based on the &lt;code&gt;pricePerUnit&lt;/code&gt; computed property on &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-3/&#34;&gt;day 3&lt;/a&gt;, all I really need to do is call &lt;code&gt;_products.sort()&lt;/code&gt; whenever I add a new product to the &lt;code&gt;ProductList&lt;/code&gt;. Remember that &lt;code&gt;sort()&lt;/code&gt; sorts an array in place, whereas &lt;code&gt;sorted&lt;/code&gt; returns a sorted array.&lt;/p&gt;
&lt;p&gt;But I can&amp;rsquo;t just add &lt;code&gt;_product.sort()&lt;/code&gt; at the end of the &lt;code&gt;add(item: ProductItem)&lt;/code&gt; method I wrote on &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-5/&#34;&gt;day 5&lt;/a&gt; without creating a bug: if there&amp;rsquo;s already something in the &lt;code&gt;_products&lt;/code&gt; array, I (unnecessarily) &lt;code&gt;return&lt;/code&gt; after appending a new &lt;code&gt;ProductItem&lt;/code&gt;, so those early returns have to be removed.&lt;/p&gt;
&lt;p&gt;Furthermore, I&amp;rsquo;d be changing the semantics of &lt;code&gt;add(item: ProductItem)&lt;/code&gt; as well — this method no longer just &lt;em&gt;adds&lt;/em&gt; an item to the product list, it adds an item &lt;em&gt;and then sorts the list&lt;/em&gt;. I am the only person working on this, so I could leave it as is, but I would rather be kind to my future self and create a new method that I call instead:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mutating func add(_ item: ProductItem, sort: Bool = false) {
    
    // The original add(item:) method implementation goes here

    if (sort) {
        _products.sort()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Adding this new &lt;code&gt;sort&lt;/code&gt; parameter with a default value of &lt;code&gt;false&lt;/code&gt; to the &lt;code&gt;add(item:)&lt;/code&gt; method means I don&amp;rsquo;t have to change calls to the method &lt;em&gt;unless&lt;/em&gt; I want the list sorted.&lt;/p&gt;
&lt;p&gt;I only call it in one place right now —the &lt;code&gt;handleAddProductBarButtonItemTapped&lt;/code&gt; action in the product list context view controller, from &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-7/&#34;&gt;yesterday&lt;/a&gt;— and it &lt;em&gt;should&lt;/em&gt; sort the list when called there, because we want to sort the list before updating the product list table view:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;self.contentViewController.productList.add(createRandomProduct(), sort: true)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And that&amp;rsquo;s it! We can now add (randomly-generated) items to the product list and they&amp;rsquo;ll sort themselves automatically.&lt;/p&gt;
&lt;p&gt;Tomorrow feels like a good day to start working on the UI for adding an &lt;em&gt;actual&lt;/em&gt; product&amp;rsquo;s details, so that I can get the app doing what it&amp;rsquo;s supposed to do — compare products.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 7</title>
      <link>https://angelostavrow.com/post/per-diaries-day-7/</link>
      <pubDate>Fri, 07 Feb 2020 07:45:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-7/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;wheres-uinavigationitem&#34;&gt;Where&amp;rsquo;s UINavigationItem?&lt;/h2&gt;
&lt;p&gt;On &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-1/&#34;&gt;day 1&lt;/a&gt;, we created a hierarchy of view controllers — coordinators, context, content, containers. In retrospect, this may have overcomplicated how I reason about where things go. Something like adding a &lt;code&gt;UIBarButtonItem&lt;/code&gt; should be fairly straightforward:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;addBarButtonItem = UIBarButtonItem(barButtonSystemItem: .add,
                                                  target: self,
                                                  action: #selector(handleAddTapped(sender:)))
navigationItem.rightBarButtonItem = addBarButtonItem
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(Remember, I&amp;rsquo;m using stock UI components and functionality for now.)&lt;/p&gt;
&lt;p&gt;So I added that to &lt;code&gt;viewDidLoad()&lt;/code&gt; in my &lt;code&gt;ProductListCoordinatorViewController&lt;/code&gt;, since its root view controller is a &lt;code&gt;UINavigationController&lt;/code&gt;. But when I ran the app&amp;hellip; no button.&lt;/p&gt;
&lt;p&gt;I could change the navigation bar&amp;rsquo;s color without issue, but adding a button to it? Nope. Turns out, I had to drop down a level, to my &lt;code&gt;ProductListContextViewController&lt;/code&gt; and add the button &lt;em&gt;there&lt;/em&gt;. Why? We can always turn to Hacking With Swift for an answer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: usually bar button items don&amp;rsquo;t belong to the &lt;code&gt;UINavigationBar&lt;/code&gt; directly. Instead, they belong to a &lt;code&gt;UINavigationItem&lt;/code&gt; that is currently active on the navigation bar, which in turn is usually owned by the view controller that is currently active on the screen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;a href=&#34;https://www.hackingwithswift.com/example-code/uikit/how-to-add-a-bar-button-to-a-navigation-bar&#34;&gt;source&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;This makes sense, because you&amp;rsquo;ll want the view controller that&amp;rsquo;s active to make decisions about what navigation items are relevant. Could I have gone deeper still into the embedded &lt;code&gt;ProductListContentViewController&lt;/code&gt;, which holds our table view? Probably! Does it make more sense? Maybe! I&amp;rsquo;m going to explore this when I implement a detail view controller for adding new products.&lt;/p&gt;
&lt;p&gt;Right now, when you tap the ➕ button in the navigation bar, the app runs the following action:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@objc func handleAddProductBarButtonItemTapped(sender: UIBarButtonItem) {
    self.contentViewController.productList.add(createRandomProduct())
    self.contentViewController.loadView()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All this does is add a product to the table view&amp;rsquo;s data source, and then call &lt;code&gt;loadView()&lt;/code&gt; on the content view controller to update the table view with the new entries. And we&amp;rsquo;re just creating a simple, unitless random product for now:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// MARK: - Temporary methods for testing
private func createRandomProduct() -&amp;gt; ProductItem {
    let dollars = Double(Int.random(in: 1...5))
    let cents = Double(Int.random(in: 0..&amp;lt;100)) / 100
    let price = dollars + cents
    let quantity = Double(Int.random(in: 25...50))
    
    return ProductItem(price: price, quantity: quantity)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And so we can now add products to the product list, and see them appear in the app&amp;rsquo;s table view UI. Neat!&lt;/p&gt;
&lt;p&gt;But&amp;hellip; this app is about comparing price per unit, not just listing products. So, tomorrow, I&amp;rsquo;m going to add a sorting feature to the ProductList model that gets called whenever you add a new item.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 6</title>
      <link>https://angelostavrow.com/post/per-diaries-day-6/</link>
      <pubDate>Thu, 06 Feb 2020 07:15:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-6/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;building-the-uitableview-in-code&#34;&gt;Building the UITableView in code&lt;/h2&gt;
&lt;p&gt;If you try to simply add &lt;code&gt;var productTableView: UITableView = UITableView()&lt;/code&gt; as a property and then set its &lt;code&gt;delegate&lt;/code&gt; and &lt;code&gt;dataSource&lt;/code&gt; as &lt;code&gt;self&lt;/code&gt; without touching the other boilerplate methods, you&amp;rsquo;ll crash the app with this error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*** Assertion failure in -[UITableView _dequeueReusableCellWithIdentifier:forIndexPath:usingPresentationValues:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKitCore_Sim/UIKit-3901.4.2/UITableView.m:8624
*** Terminating app due to uncaught exception &#39;NSInternalInconsistencyException&#39;, reason: &#39;unable to dequeue a cell with identifier customcell - must register a nib or a class for the identifier or connect a prototype cell in a storyboard&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This makes sense! The commented-out &lt;code&gt;tableView(cellForRowAt:)&lt;/code&gt; method needs to be uncommented, and I need to give this table view a UITableViewCell to work with. And it&amp;rsquo;s not too hard, I just need to add this to the table view controller&amp;rsquo;s &lt;code&gt;viewDidLoad&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;productTableView.register(UITableViewCell.self, forCellReuseIdentifier: &amp;quot;productListCell&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;adding-the-productlist-data&#34;&gt;Adding the ProductList data&lt;/h2&gt;
&lt;p&gt;Now I can create a &lt;code&gt;ProductList&lt;/code&gt; in the table view controller, populate it with some fake data, and start working with it!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/2020-02-06/simulator.png&#34; alt=&#34;iOS Simulator showing three of rows of ProductItem data&#34;&gt;&lt;/p&gt;
&lt;p&gt;Getting that to display just requires three lines in &lt;code&gt;tableView(cellForRowAt:)&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let productItem = productList.getItems()[indexPath[1]]
let productUnits = productItem.units?.symbol ?? &amp;quot;units&amp;quot;
cell.textLabel?.text = &amp;quot;\(productItem.quantity) \(productUnits) for \(productItem.price) costs \(productItem.pricePerUnit) per unit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remember that the &lt;code&gt;indexPath&lt;/code&gt; is collection of two values (&lt;code&gt;[section, row]&lt;/code&gt;), so we want to specify its row value (&lt;code&gt;indexPath[1]&lt;/code&gt;) as our index for the array returned by &lt;code&gt;productList.getItems()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s no formatting, and it&amp;rsquo;s a static view of data that we can&amp;rsquo;t add to, but we&amp;rsquo;re slowly getting there! Tomorrow, I&amp;rsquo;ll start working on a way to add product items to the table view.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 5</title>
      <link>https://angelostavrow.com/post/per-diaries-day-5/</link>
      <pubDate>Wed, 05 Feb 2020 19:30:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-5/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;start-with-a-spike&#34;&gt;Start with a Spike&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m trying to spend less than an hour a day working on this rewrite.&lt;/p&gt;
&lt;p&gt;One thing I&amp;rsquo;ve found is that trying to think through an elegant solution, write the code, and write up these little diary posts is&amp;hellip; ambitious, especially on a daily cadence.&lt;/p&gt;
&lt;p&gt;What does seem to work well is thinking about the problem I&amp;rsquo;m trying to solve, and then &lt;a href=&#34;http://www.extremeprogramming.org/rules/spike.html&#34;&gt;spiking a solution&lt;/a&gt; for it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Create spike solutions to figure out answers to tough technical or design problems. A spike solution is a very simple program to explore potential solutions. Build the spike to only addresses the problem under examination and ignore all other concerns. &lt;strong&gt;Most spikes are not good enough to keep, so expect to throw it away.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(Emphasis mine.)&lt;/p&gt;
&lt;p&gt;I like iteratively solving little problems to maintain forward momentum. It lets me easily scale back the scope of what I&amp;rsquo;m trying to achieve if the problem feels too hairy to solve in an hour. And if I keep in mind that every line of code I write is equally likely to be thrown away, I don&amp;rsquo;t have to feel attached to the way I&amp;rsquo;m tackling the problem.&lt;/p&gt;
&lt;p&gt;Of course, the point of this rewrite is to remove technical debt, so if at the end of my hour I don&amp;rsquo;t feel great about my solution, I can always choose to revisit it again tomorrow.&lt;/p&gt;
&lt;p&gt;So, with that, on to today&amp;rsquo;s problem.&lt;/p&gt;
&lt;h2 id=&#34;the-product-list&#34;&gt;The Product List&lt;/h2&gt;
&lt;p&gt;The table view controller from &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-1/&#34;&gt;day 1&lt;/a&gt; needs a data source, and that data source should contain a collection of the &lt;code&gt;Product&lt;/code&gt; items I&amp;rsquo;ve been working on the last few days.&lt;/p&gt;
&lt;p&gt;But we can&amp;rsquo;t just add any ol&amp;rsquo; object that conforms to &lt;code&gt;Product&lt;/code&gt; to an array and call it a day. Once we add the first such object to this collection —call it a &lt;code&gt;ProductList&lt;/code&gt; (because&amp;hellip; that&amp;rsquo;s what I called it)— we&amp;rsquo;re defining what &lt;em&gt;type&lt;/em&gt; of product it will hold, based on the type of units it uses: either something based on &lt;code&gt;UnitMass&lt;/code&gt; for items sold by weight, &lt;code&gt;UnitVolume&lt;/code&gt; for items sold by volume, or &lt;code&gt;nil&lt;/code&gt; (&lt;code&gt;Product.units&lt;/code&gt; is an optional, after all) for items that are sold by the unit.&lt;/p&gt;
&lt;p&gt;So, if the first item I add has a &lt;code&gt;UnitMass&lt;/code&gt; type, and then I try to add something without units (i.e., &lt;code&gt;nil&lt;/code&gt;), the &lt;code&gt;ProductList&lt;/code&gt; should reject it. That means it needs to remember the first type of &lt;code&gt;Product&lt;/code&gt; added.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what I came up with as today&amp;rsquo;s spike. It&amp;rsquo;s a struct that uses private properties, and a &lt;code&gt;mutating&lt;/code&gt; function to add &lt;code&gt;ProductItem&lt;/code&gt;s (which conform to &lt;code&gt;Product&lt;/code&gt;) to an internal array as well as set and check the unit type integrity. It doesn&amp;rsquo;t throw an error yet, it just prints a message to console and skips adding the item.&lt;/p&gt;
&lt;p&gt;It also adds a function to return the internal array. So it&amp;rsquo;s basically a public-get, private-set value type.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct ProductList {
    private var _products: [ProductItem]
    private var _unitType: Unit?
    
    init() {
        _products = [ProductItem]()
    }
    
    mutating func add(_ item: ProductItem) {
        // We can&#39;t just add ProductItems willy-nilly because they have to have matching units.
        // So, we need to check two things:
        //
        // 1. Is there already a ProductItem in the _products array?
        // 2. If so, what is its unit type (nil, UnitMass, or UnitVolume)?
        let incomingUnitType = item.units ?? nil
        
        if (_products.count &amp;gt; 0) {
            // There&#39;s stuff already in the _products array, so check the unit type.
            if (incomingUnitType == nil &amp;amp;&amp;amp; _unitType == nil) {
                _products.append(item)
                return
            } else if (incomingUnitType != nil &amp;amp;&amp;amp; incomingUnitType!.isKind(of: type(of: _unitType!))) {
                _products.append(item)
                return
            } else {
                print(&amp;quot;Can&#39;t add an item with type \(String(describing: incomingUnitType)) to a list of \(String(describing: _unitType)) items&amp;quot;)
            }
        } else {
            _unitType = incomingUnitType
            _products.append(item)
        }
    }
    
    func getItems() -&amp;gt; [ProductItem] {
        return _products
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I don&amp;rsquo;t love the &lt;code&gt;if/else if/else&lt;/code&gt; stuff going on here and can probably make it more elegant, but I can reason about this type of logic really easily, so it makes it very fast, if somewhat ugly, to write.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;add(item:)&lt;/code&gt; function should also be marked as &lt;code&gt;throws&lt;/code&gt;, and that logged message about mismatched types should throw an error for the client to catch. I&amp;rsquo;ll add that tomorrow and see what I can do about cleaning up the logic. I feel like I&amp;rsquo;m not using a lot of the really beautiful bits of Swift —like &lt;code&gt;guard&lt;/code&gt; and nil coalescing— to their full potential here, and that&amp;rsquo;s due to a lack of familiarity.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve got feedback, it&amp;rsquo;s always welcome!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 4</title>
      <link>https://angelostavrow.com/post/per-diaries-day-4/</link>
      <pubDate>Tue, 04 Feb 2020 18:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-4/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;funny-subtitle-goes-here&#34;&gt;Funny subtitle goes here&lt;/h2&gt;
&lt;p&gt;On &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-2/&#34;&gt;day 2&lt;/a&gt; of the rewrite, I put together a computed property for &lt;code&gt;pricePerUnit&lt;/code&gt; in an extension to the &lt;code&gt;Product&lt;/code&gt; protocol that looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var pricePerUnit: Double {
    get {
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        let formattedPricePerUnit = formatter.string(for: NSNumber(value: price / quantity))
        return Double(truncating: formatter.number(from: formattedPricePerUnit!)!)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As I mentioned at the time, I still don&amp;rsquo;t like the way I&amp;rsquo;m doing the necessary work  of rounding digits using the &lt;code&gt;NumberFormatter&lt;/code&gt; conversion to a &lt;code&gt;String&lt;/code&gt; and back, but it works as a spike solution &lt;em&gt;for now&lt;/em&gt; — we can come back to it another day.&lt;/p&gt;
&lt;p&gt;I also added two static functions to the extension &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-3/&#34;&gt;yesterday&lt;/a&gt; so that the protocol better conforms to &lt;code&gt;Comparable&lt;/code&gt; — not only do we want to compare the &lt;code&gt;pricePerUnit&lt;/code&gt; property, but we also want to compare the types of &lt;code&gt;Unit&lt;/code&gt;s and make sure they&amp;rsquo;re comparable.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s where I need to be careful. I can use &lt;code&gt;quantity&lt;/code&gt; and &lt;code&gt;units&lt;/code&gt; properties to initialize a &lt;a href=&#34;https://developer.apple.com/documentation/foundation/units_and_measurement&#34;&gt;&lt;code&gt;Measurement&lt;/code&gt;&lt;/a&gt;, which gives me the ability to convert this to base units via the appropriately-named &lt;code&gt;baseUnits()&lt;/code&gt; method on &lt;code&gt;Measurement&lt;/code&gt; — this gives me a common unit to compare all items of the same unit type (&lt;code&gt;UnitMass&lt;/code&gt; and &lt;code&gt;UnitVolume&lt;/code&gt; are the two we care about). I can add the following logic to the &lt;code&gt;pricePerUnit&lt;/code&gt; computed property getter and we&amp;rsquo;re good to go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var pricePerUnit: Double {
    get {
        var amount: Double = 0
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        
        if let unitType = units {
            if (unitType.isKind(of: UnitMass.self)) {
                // This product is sold by weight.
                let measurement = Measurement(value: quantity, unit: unitType as! UnitMass).converted(to: UnitMass.baseUnit())
                amount = measurement.value
            } else if (unitType.isKind(of: UnitVolume.self)) {
                // This product is sold by volumne.
                let measurement = Measurement(value: quantity, unit: unitType as! UnitVolume).converted(to: UnitVolume.baseUnit())
                amount = measurement.value
            }
        } else {
            amount = quantity
        }
        // We&#39;re force-unwrapping here but these variables should never be nil. 😬
        return Double(truncating: formatter.number(from: formatter.string(for: NSNumber(value: price / amount))!)!)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With that, we can set up a simple ProductList model and get it hooked up as a &lt;code&gt;UITableViewController&lt;/code&gt; data source tomorrow!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 3</title>
      <link>https://angelostavrow.com/post/per-diaries-day-3/</link>
      <pubDate>Mon, 03 Feb 2020 17:30:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-3/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;whats-that-smell&#34;&gt;What&amp;rsquo;s that smell?&lt;/h2&gt;
&lt;p&gt;So &lt;a href=&#34;https://angelostavrow.com/post/per-diaries-day-2&#34;&gt;yesterday&lt;/a&gt;, I posted about making Per&amp;rsquo;s &lt;code&gt;Product&lt;/code&gt; model conform to &lt;code&gt;Comparable&lt;/code&gt;, so that I can compare between &lt;code&gt;Product&lt;/code&gt; objects — something that&amp;rsquo;s pretty important in a price-comparison app.&lt;/p&gt;
&lt;p&gt;Comparing the actual price-per-unit is pretty straightforward:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;static func &amp;lt;(lhs: Self, rhs: Self) -&amp;gt; Bool {
    return lhs.pricePerUnit &amp;lt; rhs.pricePerUnit
}

static func ==(lhs: Self, rhs: Self) -&amp;gt; Bool {
    return lhs.pricePerUnit == rhs.pricePerUnit
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can&amp;rsquo;t just leave it at that, though, because of Per&amp;rsquo;s built-in unit conversion — you can input one product&amp;rsquo;s quantity in pounds and another product&amp;rsquo;s quantity in grams, and Per will figure out the best-value option automatically. This means that Per&amp;rsquo;s &lt;code&gt;Product&lt;/code&gt; model needs to understand how units compare; you can&amp;rsquo;t compare the price per unit between one thing sold by the kilogram, and something else sold by the quart.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Product&lt;/code&gt; model stores units as an optional &lt;code&gt;Unit&lt;/code&gt;, and we&amp;rsquo;re going to create the initializer such that it&amp;rsquo;ll set that property as either some flavour of &lt;code&gt;UnitMass&lt;/code&gt; (for items sold by weight) or &lt;code&gt;UnitVolume&lt;/code&gt; (for items sold by volume), or otherwise &lt;code&gt;nil&lt;/code&gt; (for dimensionless units). I started with an ugly nested-conditional mess for figuring out whether &lt;code&gt;lhs.units&lt;/code&gt; and &lt;code&gt;rhs.units&lt;/code&gt; can be compared. It works, but it feels like a code smell:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;static func &amp;lt;(lhs: Self, rhs: Self) -&amp;gt; Bool {
    if let lhsUnitType = lhs.units {
        // lhs.units is not nil
        if let rhsUnitType = rhs.units {
            // rhs.units is not nil
            if (type(of: lhsUnitType) == type(of: rhsUnitType)) {
                return lhs.pricePerUnit &amp;lt; rhs.pricePerUnit
            } else {
                return false
            }
        } else {
            // rhs.units is nil
            return false
        }
    } else {
        // lhs.units is nil
        if rhs.units != nil {
            // rhs.units is not nil
            return false
        } else {
            // rhs.units is nil
            return lhs.pricePerUnit &amp;lt; rhs.pricePerUnit
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can make this much, much cleaner:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;static func ==(lhs: Self, rhs: self) -&amp;gt; Bool {
    // If both lhs and rhs units nil, then evaluate the boolean expression:
    if (lhs.units == nil &amp;amp;&amp;amp; rhs.units == nil) { return lhs.pricePerUnit == rhs.pricePerUnit }

    // If they&#39;re not BOTH nil, but any ONE is nil, return false:
    guard let lhsUnitType = lhs.units else { return false }
    guard let rhsUnitType = rhs.units else { return false }

    // If neither is nil, but they&#39;re of the same type, evaluate the boolean expression:
    if (type(of: lhsUnitType) == type(of: rhsUnitType)) { return lhs.pricePerUnit == rhs.pricePerUnit }

    // If we get to this point, they&#39;re not of the same type, so return false:
    return false
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That feels &lt;em&gt;much&lt;/em&gt; cleaner. Tomorrow, let&amp;rsquo;s explore how that initializer reasons about unit types!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 2</title>
      <link>https://angelostavrow.com/post/per-diaries-day-2/</link>
      <pubDate>Sun, 02 Feb 2020 18:15:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-2/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;im-a-model-you-know-what-i-mean&#34;&gt;I&amp;rsquo;m a model, you know what I mean&lt;/h2&gt;
&lt;p&gt;View controllers are fun to work on and all, but at the end of the day, they&amp;rsquo;re only meant to mediate between the user and some data model. In Per, we&amp;rsquo;ve got two models that I can think of right now. Today, we focus on one.&lt;/p&gt;
&lt;h2 id=&#34;the-product&#34;&gt;The Product&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Start with a protocol&lt;/em&gt;, say Apple. The Product model in Per is fairly straightforward, but sure, let&amp;rsquo;s do the protocol-oriented programming thing. Here&amp;rsquo;s what our protocol looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;protocol Product: Comparable {
	var quantity: Double { get set }
	var units: Unit? { get set }
	var price: Double { get set }
	var pricePerUnit: Double { get }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Why is &lt;code&gt;units&lt;/code&gt; an optional? Because we only care if the units are of type &lt;code&gt;UnitMass&lt;/code&gt; or &lt;code&gt;UnitVolume&lt;/code&gt; right now — otherwise we treat the product as dimensionless, i.e., plain ol&amp;rsquo; units.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Product&lt;/code&gt; has to conform to &lt;code&gt;Comparable&lt;/code&gt; so that we can, uh, compare multiple &lt;code&gt;Product&lt;/code&gt;s — and here, we&amp;rsquo;re starting with a simplistic implementation in an extension:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extension Product {
    var pricePerUnit: Double {
        get {
            let formatter = NumberFormatter()
            formatter.numberStyle = .currency
            let formattedPricePerUnit = formatter.string(for: NSNumber(value: price / quantity))
            return Double(truncating: formatter.number(from: formattedPricePerUnit!)!)
        }
    }
    
    static func &amp;lt;(lhs: Self, rhs: Self) -&amp;gt; Bool {
        // Naïve implementation, doesn&#39;t account for unit type
        return lhs.pricePerUnit &amp;lt; rhs.pricePerUnit
    }
    
    static func ==(lhs: Self, rhs: Self) -&amp;gt; Bool {
        // Naïve implementation, doesn&#39;t account for unit type
        return lhs.pricePerUnit == rhs.pricePerUnit
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This doesn&amp;rsquo;t account for the fact that if a client tries to compare something of &lt;code&gt;UnitLength.meters&lt;/code&gt; against &lt;code&gt;UnitType.pounds&lt;/code&gt;, it should fail. Instead, I&amp;rsquo;m simply looking at comparing the price per unit, which is a computed property in the &lt;code&gt;Product&lt;/code&gt; extension. I don&amp;rsquo;t love the way I&amp;rsquo;m rounding the value of &lt;code&gt;pricePerUnit&lt;/code&gt; here using a &lt;code&gt;NumberFormatter&lt;/code&gt;, so if you have any suggestions, do let me know!&lt;/p&gt;
&lt;p&gt;Tomorrow, I&amp;rsquo;ll work on an initializer for the actual &lt;code&gt;struct&lt;/code&gt; that implements the protocol, and aim to better handle the unit comparison.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Per Rewrite Diary: Day 1</title>
      <link>https://angelostavrow.com/post/per-diaries-day-1/</link>
      <pubDate>Sat, 01 Feb 2020 15:30:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/per-diaries-day-1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series about rewriting my iOS app, &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;. Per is a price per unit comparison app with a bunch of neat convenience figures, but it hasn&amp;rsquo;t been updated in years, so I&amp;rsquo;m rewriting it from scratch to eliminate a bunch of technical debt. Just because it&amp;rsquo;s not an open-source app doesn&amp;rsquo;t mean I can&amp;rsquo;t share what I learn as I go!&lt;/p&gt;
&lt;p&gt;See the rest of the series &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tabula-rasa&#34;&gt;Tabula Rasa&lt;/h2&gt;
&lt;p&gt;Rewriting Per from the ground up is going to be a learning experience, and I&amp;rsquo;m going to take this opportunity to write about the process as I go. I&amp;rsquo;m aiming to make one (relatively) small change per day, with the goal of having a functional MVP by the end of February 2020 that&amp;rsquo;s not using any custom design work — i.e., using built-in animations, colour palettes, fonts, and icons.&lt;/p&gt;
&lt;p&gt;Working this way —without custom design work— means that I can focus on design patterns, unit testing, and so on, moving quickly without getting blocked on UI decisions. It also de-couples the development work (which I&amp;rsquo;m doing) from the design work (which someone else is doing), so that we can move through this iteratively, but without deep dependency on each other&amp;rsquo;s progress.&lt;/p&gt;
&lt;p&gt;I should pause here to define the functional MVP. By the end of the month, I want to replicate the functionality of Per in its current iteration, plus one more feature, which means it should:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide a quick, easy way to compare price per unit (existing feature)&lt;/li&gt;
&lt;li&gt;Handle unit conversion automatically (existing feature)&lt;/li&gt;
&lt;li&gt;Allow simple arithmetic when entering price or quantity (existing feature)&lt;/li&gt;
&lt;li&gt;Expand the number of compared products from two to &amp;ldquo;unlimited&amp;rdquo; (new feature)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, I started with a single-view iOS app, added the bundle identifier, and then started ripping out &lt;strong&gt;Main.storyboard&lt;/strong&gt; from everywhere. Thankfully, my podcast co-host Frank Courville posted a &lt;a href=&#34;https://ioscoachfrank.com/remove-main-storyboard.html&#34;&gt;great article&lt;/a&gt; on the topic last month to follow.&lt;/p&gt;
&lt;h2 id=&#34;view-controllers-all-the-way-down&#34;&gt;View controllers all the way down&lt;/h2&gt;
&lt;p&gt;I also started implementing a &amp;ldquo;layered view controller&amp;rdquo; concept presented in &lt;a href=&#34;https://ioscoachfrank.com/layered-view-controllers.html&#34;&gt;another article&lt;/a&gt; of Frank&amp;rsquo;s — this uses &lt;strong&gt;coordinator&lt;/strong&gt; view controllers, that manage &lt;strong&gt;container&lt;/strong&gt; view controllers or wrap &lt;strong&gt;context&lt;/strong&gt; view controllers that are composed of &lt;strong&gt;content&lt;/strong&gt; view controllers. Read Frank&amp;rsquo;s article, and be sure to download the sample app. You&amp;rsquo;ll need to sign up for his newsletter, but I&amp;rsquo;ve been subscribed for a couple of years now and it&amp;rsquo;s all been high quality articles on iOS development.&lt;/p&gt;
&lt;p&gt;Per isn&amp;rsquo;t an especially complex app, so this may seem like overkill. I&amp;rsquo;m going to be building this iteratively, though, and while this does mean I&amp;rsquo;ll be creating several view controllers, this method will keep things small and loosely coupled.&lt;/p&gt;
&lt;p&gt;Today was spent setting up this hierarchy.&lt;/p&gt;
&lt;p&gt;Specifically, I created a simple top-level Product List coordinator view controller that sets a &lt;code&gt;UINavigationController&lt;/code&gt; as its root view controller, which in turn embeds a Product List context view controller.&lt;/p&gt;
&lt;p&gt;That context view controller wrap a Product List &lt;em&gt;content&lt;/em&gt; view controller that implements &lt;code&gt;UITableViewController&lt;/code&gt;. Why a table view controller? That feels like the fastest way to add a list of several products for comparison. I didn&amp;rsquo;t yet set up any delegates or data sources for that table view, nore did I create a Product detail view controller or any way to navigate to it.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll kick off work on that tomorrow by creating some very basic models.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Someday/Maybe List is a Lie</title>
      <link>https://angelostavrow.com/post/someday-maybe-is-a-lie/</link>
      <pubDate>Fri, 31 Jan 2020 08:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/someday-maybe-is-a-lie/</guid>
      <description>&lt;p&gt;One of my goals for 2020 is to share more, and one of the ways I intend on doing this is to take photos more often and share them &lt;a href=&#34;https://flickr.com/people/astavrow&#34;&gt;on Flickr&lt;/a&gt;. There&amp;rsquo;s even a &lt;a href=&#34;https://micro.welltempered.net/2020/01/30/the-february-photoblogging.html&#34;&gt;daily-photo challenge on Micro.blog&lt;/a&gt; to help kickstart that challenge. And since I can just plug any RSS feed into Micro.blog to pull in content, and I can generate Flickr RSS feeds from a given &lt;code&gt;tag&lt;/code&gt;, we&amp;rsquo;re golden! Just add the Flickr feed to Micro.blog, post one photo to Flickr daily with the tag &lt;code&gt;photoblog&lt;/code&gt;, and it&amp;rsquo;ll get shared to Micro.blog (which then cross-posts to other platforms, like Twitter). Great!&lt;/p&gt;
&lt;p&gt;Except, right now, &lt;a href=&#34;https://status.flickr.net/incidents/l3tvnc72m18c&#34;&gt;Flickr search is broken&lt;/a&gt;, so getting a feed of my photos filtered by tag returns… nothing.&lt;/p&gt;
&lt;p&gt;But! I can create a &lt;a href=&#34;https://glitch.com&#34;&gt;Glitch&lt;/a&gt; app that uses the Flickr API to pull in my photos, filter them by tag, and generate an RSS feed of them. Yeah, that duplicates the functionality of Flickr&amp;rsquo;s own built-in feed services, but hey, they&amp;rsquo;re broken, and I can make this pretty easily, right? And once search is fixed, I can just turn off the app. &lt;em&gt;It&amp;rsquo;ll be a fun learning experience.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m in the middle of working on some other stuff right now. Those projects are far more important and/or time-sensitive, so I add this Flickr feed-generator app to my Someday/Maybe list in OmniFocus; it&amp;rsquo;s neither important nor time-sensitive. Someday/Maybe lists are a collection of &amp;ldquo;nice to haves&amp;rdquo; — a backlog of project that you maybe want to do, someday.&lt;/p&gt;
&lt;p&gt;A better turn of phrase is &lt;em&gt;the side-project graveyard&lt;/em&gt;, as we call these lists on &lt;a href=&#34;https://www.makebeforebreak.com&#34;&gt;the show&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;inflating-the-numbers&#34;&gt;Inflating the numbers&lt;/h2&gt;
&lt;p&gt;But the nature of this list, for me, is a little bit more insidious than that. As part of the weekly retrospective that I do, I go over my Someday/Maybe list, automatically bringing every one of those projects to the front of my attention. This routine signal boost makes sure these backlogged projects are kept on the radar.&lt;/p&gt;
&lt;p&gt;I have never actually promoted anything from my Someday/Maybe list to an actual project that I tackle.&lt;/p&gt;
&lt;p&gt;I have also almost never deleted an idea from my Someday/Maybe list, except during my annual purge.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;have&lt;/em&gt; demoted actual projects to my Someday/Maybe list.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been thinking about what this does to me. Here&amp;rsquo;s this list of projects that aren&amp;rsquo;t important or urgent enough to take on, but I&amp;rsquo;m reminded of them week after week. &lt;em&gt;Hey,&lt;/em&gt; my system says, &lt;em&gt;don&amp;rsquo;t forget about these things&lt;/em&gt;. And so, as I go through my week, my planning is distracted by these ideas. I could be more ruthless about deleting them from the list, but, the fact is: I&amp;rsquo;m a &lt;a href=&#34;https://www.makebeforebreak.com/20&#34;&gt;digital hoarder&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, today, I deleted the Someday/Maybe list in OmniFocus.&lt;/p&gt;
&lt;h2 id=&#34;organic-growth&#34;&gt;Organic Growth&lt;/h2&gt;
&lt;p&gt;For myself, it&amp;rsquo;s probably better to ignore a new idea. I&amp;rsquo;m too easily pulled off course by the promise of something new and shiny. Going forward, if I think of something interesting to make or do, I&amp;rsquo;m going to push it aside.&lt;/p&gt;
&lt;p&gt;If it eventually comes back, that&amp;rsquo;ll be interesting. But that&amp;rsquo;s not good enough — maybe I turn the idea over in my head a bit more, and write it down in my journal where I&amp;rsquo;ll only see it maybe another couple of times in the year, and then I&amp;rsquo;m going to push it away again.&lt;/p&gt;
&lt;p&gt;But if it comes back to me a third time? That&amp;rsquo;s probably a sign. That&amp;rsquo;s maybe where you decide to create a project for it, either to tackle right away or sometime in the future. It&amp;rsquo;s planned, and it&amp;rsquo;s considered.&lt;/p&gt;
&lt;p&gt;The ideas that pester you, that won&amp;rsquo;t leave you alone, those are probably the ones you want to pay attention to. And you can&amp;rsquo;t tell which ones they are, if you&amp;rsquo;re pestering &lt;em&gt;yourself&lt;/em&gt; with every idea you have.&lt;/p&gt;
&lt;p&gt;More TK.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;interesting-reads-this-week&#34;&gt;Interesting reads this week&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://noidea.dog/blog/tuning-the-distraction-machine&#34;&gt;Tuning the distraction machine — Tanya Reilly&lt;/a&gt;&lt;/strong&gt;: Our smartphones default to Do Not Disturb being off. Peel away the double negative and consider what this &lt;em&gt;actually&lt;/em&gt; means: our smartphones default to Disturb being &lt;em&gt;on&lt;/em&gt;. As I&amp;rsquo;ll ask anyone who&amp;rsquo;ll listen, what do you think that does to our psyche? (Yeah, I&amp;rsquo;m real popular at parties.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.robinrendle.com/notes/why-software-is-slow-and-shitty&#34;&gt;Why Software is Slow and Shitty — Robin Rendle&lt;/a&gt;&lt;/strong&gt;: &amp;ldquo;You don&amp;rsquo;t need a plan to make a beautiful thing&amp;rdquo; is something I need to remind myself of again, and again, and again.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- links --&gt;
</description>
    </item>
    
    <item>
      <title>Cheaper vs Money Saver</title>
      <link>https://angelostavrow.com/post/cheaper-vs-money-saver/</link>
      <pubDate>Fri, 24 Jan 2020 09:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/cheaper-vs-money-saver/</guid>
      <description>&lt;p&gt;From &lt;em&gt;Intelligencer&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you let products spoil, or you decide you don’t like them anymore halfway through the box, or if you forget what drawer your huge package of batteries is in, then you’re not getting as much value out of your bulk purchase as you had planned. Your effective investment return is likely to be negative; you would have been better off paying more per unit to buy less.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;— Source: &lt;a href=&#34;https://nymag.com/intelligencer/2020/01/buying-in-bulk-when-is-it-a-mistake.html&#34;&gt;Buying in Bulk: When Is It a Mistake?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s this philosophy of &amp;ldquo;cheaper isn&amp;rsquo;t necessarily saving you money&amp;rdquo; that drove the development of &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;Per&lt;/a&gt;, my little price-per-unit utility calculator. From the marketing copy:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just because you’re getting more for your money, doesn’t mean that it’s a good buy. Maybe you’re not sure you’ve got the space to store eighty rolls of toilet paper. Or that you can get through sixteen heads of lettuce before they spoil.&lt;/p&gt;
&lt;p&gt;Per tells you just how much more you’re getting for your money, so you can make those decisions confidently.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(I&amp;rsquo;m still planning updates for the app. Stay tuned for V2.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Optimism Needs Honesty</title>
      <link>https://angelostavrow.com/post/optimism-needs-honesty/</link>
      <pubDate>Fri, 17 Jan 2020 08:45:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/optimism-needs-honesty/</guid>
      <description>&lt;p&gt;Monday morning, I got up a little earlier than usual, and —despite being pretty tired— was looking forward to getting back to the gym. I&amp;rsquo;d taken a week off to get over a cold, and while I&amp;rsquo;d have to reduce the weight I was lifting to avoid soreness, it felt &lt;em&gt;really good&lt;/em&gt; to have recovered enough to get some exercise.&lt;/p&gt;
&lt;p&gt;In our apartment, everything was ready for my triumphant return, too: my gym clothes were neatly folded and ready to go, the coffee machine was ready to brew, and I had all the ingredients I needed for a quick pre-workout snack (9-grain toast with orange marmelade and peanut butter, if you must know).&lt;/p&gt;
&lt;p&gt;And yet&amp;hellip; I found myself having a very hard time getting out the door.&lt;/p&gt;
&lt;p&gt;Why? Because since Saturday night, we&amp;rsquo;d gotten a bunch of freezing rain followed by snow, and the thought of having to de-ice my car felt like a huge hassle that I didn&amp;rsquo;t want to deal with.&lt;/p&gt;
&lt;p&gt;Sorry, let me rephrase that: it was a huge hassle that I didn&amp;rsquo;t &lt;em&gt;have&lt;/em&gt; to deal with.&lt;/p&gt;
&lt;p&gt;In other words, I&amp;rsquo;m feeling lazy about going to the gym because I&amp;rsquo;m &lt;em&gt;allowed&lt;/em&gt; to be lazy about it. When you think about it, skipping the day&amp;rsquo;s workout didn&amp;rsquo;t have any &lt;em&gt;real&lt;/em&gt; consequence (unlike, say, skipping a day of going to work), but it also had no real, immediate &lt;em&gt;reward&lt;/em&gt;, either (unlike, say&amp;hellip; going to the guitar shop to buy a new guitar, I dunno).&lt;/p&gt;
&lt;p&gt;So there I was, yanking on door handles trying to get into my car, realizing that it&amp;rsquo;s surrounded by hardpack snow that&amp;rsquo;ll require going back up to my apartment to get a shovel, and watching the available time for a workout that morning dwindle.&lt;/p&gt;
&lt;p&gt;You can bet that if I had to get into that car to drive to a job, or to pick up a new &lt;a href=&#34;https://shop.fender.com/en/intl/electric-guitars/telecaster/american-performer-telecaster-hum/0115122341.html&#34;&gt;Telecaster&lt;/a&gt;, I&amp;rsquo;d have made it happen. But having neither the forcing function of work nor the reward of made-in-California twangy goodness, the motivation to get into that car and on my way to Do The Thing™ was approaching zero, and that I&amp;rsquo;d have to rely on good ol&amp;rsquo; discipline.&lt;/p&gt;
&lt;p&gt;And really, all I could really think to myself was: &lt;em&gt;Montreal winter: 1, Discipline: 0&lt;/em&gt;. Also, that my bed was probably still pretty warm.&lt;/p&gt;
&lt;p&gt;Well, it was worth a shot.&lt;/p&gt;
&lt;p&gt;The thing is, discipline isn&amp;rsquo;t the kind of thing that goes from zero to one easily. Discipline is built on routine. On habit. On showing up, day after day. And sure, I try to go to the gym fairly regularly, but after two and a half weeks of sleeping in because of holidays and then illness, my routine had been broken.&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;re trying to kick off a new habit, you can rely on your motivation to get started, but you&amp;rsquo;ll also want to stack the deck in your favour, too. Setting yourself up to develop discipline can be made easier by two things: minimizing the friction between where you are and where you want to be, and rewarding yourself for actually doing the thing you&amp;rsquo;re trying to make a habit of.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s hard to look at a protein shake as a reward for going to the gym. There&amp;rsquo;s pretty much nothing good about going to the gym, in my opinion, beyond &lt;em&gt;eventually&lt;/em&gt; witnessing some progress. So for now, I need to focus on minimizing friction. I &lt;em&gt;thought&lt;/em&gt; I did a pretty good job of making sure that I was ready to go, but really I failed to account for the biggest obstacle: fighting the elements.&lt;/p&gt;
&lt;p&gt;How could I have made that hurdle lower (i.e., set myself up for success)?&lt;/p&gt;
&lt;p&gt;I know that getting into the car afterwards dumping of freezing rain and snow is a lot harder than just dusting off some snow, so I could have instead taken public transit and/or walked. This multiplies my travel time by a factor of about four or five, and nearly doubles the amount of time I have to dedicate to my workout. That extra time commitment then eats into the other stuff I do in the morning, which is the opposite of a reward. Knowing myself, that isn&amp;rsquo;t going to happen.&lt;/p&gt;
&lt;p&gt;I could have instead gone out and cleared the ice and snow on Sunday afternoon, so that the car would be ready to go Monday morning. In fact, I was telling myself that I should exactly that, after a morning of chores. And if I needed to drive to work or go buy that Tele, you can be sure I would have found the energy to do that. But instead, I mostly convinced myself that it probably wasn&amp;rsquo;t too bad and I could leave it to the next day.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a word for this: procrastination. But that&amp;rsquo;s a topic for another day, because I think there&amp;rsquo;s a more subtle and interesting takeaway here.&lt;/p&gt;
&lt;p&gt;What fascinates me is how good and positive I felt about what Monday morning would look like, as Sunday evening crept towards bedtime. Somehow, I&amp;rsquo;d already done the calculus that I was going to have a tough time getting where I needed to go. And still, I was able to push the impending failure outside my door to the back of my mind, and instead point to all the things I&amp;rsquo;d done right in my immediate environment to slam dunk a home run.&lt;/p&gt;
&lt;p&gt;(Clearly, I&amp;rsquo;m not a sports person.)&lt;/p&gt;
&lt;p&gt;Yes, skipping the gym is trivial, but it points to something bigger: the ability to tell myself that everything&amp;rsquo;s great &lt;em&gt;and trick my mind and body into believing it&lt;/em&gt; when there&amp;rsquo;s obvious evidence to the contrary. This is powerful, and insidious, and probably invades other, more important things. I sometimes describe myself as a &amp;ldquo;cautious optimist&amp;rdquo; — but maybe I&amp;rsquo;m not as cautious as I think.&lt;/p&gt;
&lt;p&gt;This is probably also why reflection and introspection have made such a difference in my life. There are only so many times you can fool yourself when you&amp;rsquo;re faced with the same evidence week after week. That gut-check is something I&amp;rsquo;m doing more and more of in my weekly retrospectives as I focus on less and less, and while I still have a long way to go, being more honest with myself about the time, energy, and attention I have available is already paying off.&lt;/p&gt;
&lt;p&gt;More TK.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;interesting-reads-this-week&#34;&gt;Interesting reads this week&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m trying something new, where I&amp;rsquo;ll share two or three articles that I read this week (they may be relatively new, or really old — so long as I read them this week).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://wattenberger.com/blog/react-hooks&#34;&gt;Thinking in React Hooks — Amelia Wattenberger&lt;/a&gt;:&lt;/strong&gt; Not only is this a fantastic explainer of the mindset shift required to make the most of React Hooks, I really love the interactive presentation of the post&amp;rsquo;s code examples. This isn&amp;rsquo;t the kind of thing that can be done anywhere but on one&amp;rsquo;s own website. (H/T: &lt;a href=&#34;https://keith.is&#34;&gt;Keith Kurson&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://annehelen.substack.com/p/the-wages-of-productivity&#34;&gt;The Wages of Productivity — Anne Helen Petersen&lt;/a&gt;:&lt;/strong&gt; I first became aware of AHP from &lt;a href=&#34;https://hurryslowly.co/anne-helen/&#34;&gt;this interview&lt;/a&gt; on the Hurry Slowly podcast. The fetishization of productivity is invading our leisure in ways that not only exhaust us, but —more dangerously— fuel classism and further divide our society. (H/T: &lt;a href=&#34;https://hurryslowly.co/newsletter/&#34;&gt;Jocelyn K. Glei&amp;rsquo;s newsletter&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://brettterpstra.com/2019/02/04/brainstorming-how-i-start-a-project/&#34;&gt;Brainstorming: how I start a project — Brett Terpstra&lt;/a&gt;:&lt;/strong&gt; I&amp;rsquo;m fascinated by the &lt;em&gt;idea&lt;/em&gt; of mind-mapping (and have been purchasing MindNode&amp;rsquo;s upgrades for years now), but for some reason, it&amp;rsquo;s just not something that I jump to when I want to brainstorm on and/or flesh out a project. I think that&amp;rsquo;s because I&amp;rsquo;ve never been sure how to start, exactly, and this article (along with BT&amp;rsquo;s related mind-mapping posts) has given me some ideas.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;PS: No guitars were purchased in the writing of this post. Unfortunately.&lt;/p&gt;
&lt;!--links--&gt;
</description>
    </item>
    
    <item>
      <title>So Long, 2019</title>
      <link>https://angelostavrow.com/post/so-long-2019/</link>
      <pubDate>Sat, 04 Jan 2020 18:02:48 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/so-long-2019/</guid>
      <description>&lt;p&gt;Despite having fifty-two weekly retrospectives over four notebooks to look back on, I didn&amp;rsquo;t write up any kind of &amp;ldquo;2019 In Review&amp;rdquo; post here. I did spend the morning of New Years Eve writing up an annual retrospective, though, as discussed in &lt;a href=&#34;https://www.makebeforebreak.com/17&#34;&gt;episode 17 of Make Before Break&lt;/a&gt;; I just didn&amp;rsquo;t share any findings and insights.&lt;/p&gt;
&lt;iframe src=&#34;https://fireside.fm/player/v2/vR1QE4-8+b_Y6NK0Z?theme=dark&#34; width=&#34;740&#34; height=&#34;200&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;I&amp;rsquo;m not really sure why, but I just haven&amp;rsquo;t been sharing much lately, whether that be here or on the handful of social networks I haunt. Maybe I&amp;rsquo;ve been too involved in other parts of my life to do so; maybe I don&amp;rsquo;t have much that I think is of interest to other people. I&amp;rsquo;m definitely bad at self-promotion. I&amp;rsquo;ll try to share more in 2020.&lt;/p&gt;
&lt;p&gt;A few other notable things from last year:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My friend &lt;a href=&#34;https://ioscoachfrank.com&#34;&gt;Frank&lt;/a&gt; and I launched a &lt;a href=&#34;https://www.makebeforebreak.com&#34;&gt;podcast&lt;/a&gt;. We released 18 episodes and we crossed the 1,000-download mark on New Years Eve, which is cool given how little marketing we do.&lt;/li&gt;
&lt;li&gt;I settled into a new role working with the Solutions Engineering team at &lt;a href=&#34;https://glitch.com&#34;&gt;Glitch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I &lt;a href=&#34;https://angelostavrow.com/post/fretting/&#34;&gt;bought a guitar&lt;/a&gt; and got back into playing music. I&amp;rsquo;m not very good yet, and no, I don&amp;rsquo;t have a Soundcloud. I also brought home an old electric guitar and amplifier that I&amp;rsquo;ve had in storage forever, because that&amp;rsquo;s just &lt;em&gt;fun&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;I was &lt;a href=&#34;https://glitch.com/culture/function-episode-13/&#34;&gt;interviewed on the Function podcast&lt;/a&gt; about tech and self-care. I also wrote up some further thoughts on that &lt;a href=&#34;https://angelostavrow.com/post/function-guest-interview&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I took a road trip to Portland, ME — our first visit there. I hope to put up some photos on &lt;a href=&#34;https://www.flickr.com/photos/astavrow/&#34;&gt;Flickr&lt;/a&gt; soon.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s nice to be back to writing and sharing. More TK!&lt;/p&gt;
&lt;!--links--&gt;</description>
    </item>
    
    <item>
      <title>Function guest interview</title>
      <link>https://angelostavrow.com/post/function-guest-interview/</link>
      <pubDate>Thu, 03 Oct 2019 14:30:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/function-guest-interview/</guid>
      <description>&lt;p&gt;I was invited to chat with &lt;a href=&#34;https://anildash.com&#34;&gt;Anil Dash&lt;/a&gt; about tech and self-care on the &lt;a href=&#34;https://glitch.com/culture/function-episode-13/&#34;&gt;Function podcast&amp;rsquo;s season 2 kickoff&lt;/a&gt;. Function examines the intersection of tech and culture, and I&amp;rsquo;m grateful to have been invited to share my thoughts.&lt;/p&gt;
&lt;p&gt;If you listen to my own podcast, &lt;a href=&#34;https://makebeforebreak.com&#34;&gt;Make Before Break&lt;/a&gt;, then you already know that my stance on tech in general is one of cautious optimism. Sure, there are all kinds of very terrible things online, but even given that, I can&amp;rsquo;t be convinced that we&amp;rsquo;d be better off without the technological advance we&amp;rsquo;ve seen in our lifetimes.&lt;/p&gt;
&lt;h2 id=&#34;look-for-the-helpers&#34;&gt;Look for the helpers&lt;/h2&gt;
&lt;p&gt;If the web writ large is the modern &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Agora&#34;&gt;agora&lt;/a&gt;, then holy shit — it&amp;rsquo;s easier than ever to be agoraphobic (for me, at least). Enrage-to-engage platforms. Angry mobs and pitchforks. Vitriol and the worst kinds of warring tribalism.&lt;/p&gt;
&lt;p&gt;And yet, all over, you&amp;rsquo;ll find netizens (yep, I&amp;rsquo;m old) organizing themselves into smaller, vibrant, supportive, and wonderful communities. &lt;a href=&#34;https://glitch.com&#34;&gt;Glitch&lt;/a&gt; is one such community. &lt;a href=&#34;https://micro.blog&#34;&gt;Micro.blog&lt;/a&gt; is another. People who care deeply about creating healthy spaces for exploring, creating, and sharing.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re not lost yet.&lt;/p&gt;
&lt;div class=&#34;glitch-embed-wrap&#34; style=&#34;height: 1000px; width: 100%;&#34;&gt;
  &lt;iframe
    src=&#34;https://glitch.com/embed/#!/embed/thought-detox?path=README.md&amp;previewSize=100&#34;
    title=&#34;thought-detox on Glitch&#34;
    allow=&#34;geolocation; microphone; camera; midi; vr; encrypted-media&#34;
    style=&#34;height: 100%; width: 100%; border: 0;&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
&lt;p class=&#34;caption&#34;&gt;It&#39;s dangerous to go alone! Take this.&lt;/p class=&#34;caption&#34;&gt;
&lt;h2 id=&#34;do-not-disturb&#34;&gt;Do not disturb&lt;/h2&gt;
&lt;p&gt;Still, as I&amp;rsquo;ll tell anyone who&amp;rsquo;ll listen, it&amp;rsquo;s a special kind of hell we&amp;rsquo;ve created for ourselves where we carry a thing on our person at all times that defaults to&amp;hellip; disturb.&lt;/p&gt;
&lt;p&gt;We can do better. I believe that we can build a world that does not disturb, in every sense of the word. But it&amp;rsquo;s also not enough to point the finger at some gadget or platform and call our work done. Why does a notification trigger anxiety? Why are we addicted to our tech?&lt;/p&gt;
&lt;p&gt;That brings up another theme we explore a lot on Make Before Break: introspection.&lt;/p&gt;
&lt;p&gt;Habits aren&amp;rsquo;t easily formed (or broken, for that matter) without the introduction of manipulation techniques based on neuroscience. Being able outmaneuver your habits does require you to go deep on why X triggers Y &lt;em&gt;for you&lt;/em&gt;. If you notice yourself engaging in a behaviour you don&amp;rsquo;t understand, or don&amp;rsquo;t like — step back and interrogate it. What&amp;rsquo;s the situation? What&amp;rsquo;s the draw? What&amp;rsquo;s the reward? How are you feeling, &lt;em&gt;right now&lt;/em&gt;? How would you rather be feeling?&lt;/p&gt;
&lt;div class=&#34;glitch-embed-wrap&#34; style=&#34;height: 640px; width: 100%;&#34;&gt;
  &lt;iframe
    src=&#34;https://glitch.com/embed/#!/embed/five-whybot?path=README.md&amp;previewSize=100&#34;
    title=&#34;five-whybot on Glitch&#34;
    allow=&#34;geolocation; microphone; camera; midi; vr; encrypted-media&#34;
    style=&#34;height: 100%; width: 100%; border: 0;&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;&amp;lt;backstreet_boys&amp;gt;&lt;/code&gt;Tell me why&lt;code&gt;&amp;lt;/backstreetboys&amp;gt;&lt;/code&gt;&lt;/p class=&#34;caption&#34;&gt;
&lt;h2 id=&#34;tech-ing-fast-and-slow&#34;&gt;Tech-ing, fast and slow&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re on the brink of &lt;a href=&#34;https://www.sciencemag.org/news/2019/09/quantum-computer-bests-all-conventional-computers-first-claim-supremacy&#34;&gt;quantum computing&lt;/a&gt;, and have rockets that fly into space and then &lt;a href=&#34;https://www.youtube.com/watch?v=1sJlFzUQVmY&#34;&gt;land —on their feet— on robot boats&lt;/a&gt;. Technological progress is only going to accelerate. But, for my part, I&amp;rsquo;m always going to push for the artisanal approach to building things. Slowly. Thoughtfully. With a deep understanding of how your decisions affect your users, because you&amp;rsquo;re a part of their community, and they&amp;rsquo;re a part of yours.&lt;/p&gt;
&lt;p&gt;Simply: you&amp;rsquo;ve got to care.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Elsewhere on the web: Twilio guest posts</title>
      <link>https://angelostavrow.com/post/twilio-guest-posts/</link>
      <pubDate>Wed, 02 Oct 2019 12:08:20 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/twilio-guest-posts/</guid>
      <description>&lt;p&gt;A couple of months ago, &lt;a href=&#34;https://glitch.com&#34;&gt;Glitch&lt;/a&gt; CEO &lt;a href=&#34;https://anildash.com&#34;&gt;Anil Dash&lt;/a&gt; got to interview Mindy Kaling at Twilio&amp;rsquo;s &lt;a href=&#34;https://signal.twilio.com/2019/sf&#34;&gt;SIGNAL conference&lt;/a&gt;. We built an &lt;a href=&#34;https://glitch.com/~2019signal-qsformindy&#34;&gt;app&lt;/a&gt; that let people text in their questions for Mindy, and it added a lot of fun interactivity to their chat!&lt;/p&gt;
&lt;p&gt;I got to write about how we built that app for both Glitch&amp;rsquo;s &lt;a href=&#34;https://glitch.com/culture/crowdsourcing-questions-app-interviews-twilio-conference/&#34;&gt;Culture Zine&lt;/a&gt; and the &lt;a href=&#34;https://www.twilio.com/blog/crowdsource-questions-live-events&#34;&gt;Twilio blog&lt;/a&gt;. Special thanks to &lt;a href=&#34;https://twitter.com/margarita&#34;&gt;Margarita&lt;/a&gt; for her editing of my writing!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Indigo Update: Custom CSS</title>
      <link>https://angelostavrow.com/post/indigo-theme-updates/</link>
      <pubDate>Sat, 31 Aug 2019 19:45:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/indigo-theme-updates/</guid>
      <description>&lt;p&gt;This site runs a customized version of &lt;a href=&#34;https://github.com/AngeloStavrow/indigo&#34;&gt;Indigo&lt;/a&gt; — essentially, a different colour palette and some custom styling for the &lt;a href=&#34;https://angelostavrow.com/updates&#34;&gt;Updates&lt;/a&gt; page. Because of this, it&amp;rsquo;s always been a bit of a headache to update to the latest version of the theme. No more! I&amp;rsquo;m happy to announce that you can now easily import custom CSS into Indigo.&lt;/p&gt;
&lt;h2 id=&#34;the-old-and-busted&#34;&gt;The old and busted&lt;/h2&gt;
&lt;p&gt;When I created Indigo and applied it to this site, I went through the theme&amp;rsquo;s CSS file and, wherever I found a colour I wanted to replace, I replaced it.&lt;/p&gt;
&lt;p&gt;I later added some additional styling for the Updates page, which pulls in my latest posts on &lt;a href=&#34;https://micro.blog&#34;&gt;Micro.blog&lt;/a&gt;. Since that page is pulling in remote content, it&amp;rsquo;s marked up differently than things on this site.&lt;/p&gt;
&lt;h2 id=&#34;the-cost-of-maintenance&#34;&gt;The cost of maintenance&lt;/h2&gt;
&lt;p&gt;This meant that when I had to modify something in the theme, I&amp;rsquo;d have to first backup my modified CSS file, pull in changes to the them (which would clobber my changes to &lt;strong&gt;style.css&lt;/strong&gt;), and then re-apply the changes carefully if I&amp;rsquo;d done anything to modify that CSS file.&lt;/p&gt;
&lt;p&gt;Eventually I pulled the Updates page styling out of the main CSS file and put it in its own file, which I&amp;rsquo;d include inline in &lt;strong&gt;/content/update.md&lt;/strong&gt;. It was hacky, but least I didn&amp;rsquo;t need to keep re-adding that every time I updated the theme!&lt;/p&gt;
&lt;p&gt;Then I learned something interesting, which I kind of already knew. I&amp;rsquo;m probably oversimplifying here, but when Hugo builds your site, it will include whatever is in &lt;em&gt;your&lt;/em&gt; &lt;strong&gt;/static&lt;/strong&gt; folder and, if it has the same name, use that instead of what it finds in &lt;strong&gt;/themes/indigo/static&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So, to make like a bit easier, I copied the theme&amp;rsquo;s main CSS file into the &lt;strong&gt;/static/css&lt;/strong&gt; folder of this site. So long as I didn&amp;rsquo;t add any elements or classes to the DOM that required styling, I could update Indigo with impunity. But it still meant maintaining two mostly-identical files. Gross.&lt;/p&gt;
&lt;h2 id=&#34;the-new-hotness&#34;&gt;The new hotness&lt;/h2&gt;
&lt;p&gt;Admission: I haven&amp;rsquo;t been moving forward on bugfixes and feature requests for Indigo. The &lt;a href=&#34;https://github.com/gohugoio/hugoThemes/issues/678&#34;&gt;breaking changes&lt;/a&gt; introduced in Hugo 0.57 kicked my butt into gear and I&amp;rsquo;ve been tackling some of the ugly underpinnings of the site since then. And what better place to test these fixes than my own personal site, right?&lt;/p&gt;
&lt;p&gt;But that customization process, ugh.&lt;/p&gt;
&lt;p&gt;So, with &lt;a href=&#34;https://github.com/AngeloStavrow/indigo/blob/master/CHANGELOG.md#120&#34;&gt;v1.2.0&lt;/a&gt;, we now have the ability to easily &lt;a href=&#34;https://changemap.co/indigo-team/indigo-theme-for-hugo/task/3462-import-custom-css/&#34;&gt;import custom CSS&lt;/a&gt;. Add whatever customizations you&amp;rsquo;d like to &lt;strong&gt;/static/css/custom.css&lt;/strong&gt;, and Indigo will import them after importing its own stylesheet. Here&amp;rsquo;s &lt;a href=&#34;https://github.com/AngeloStavrow/angelostavrow.com/blob/master/static/css/custom.css&#34;&gt;mine&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;were-only-halfway-there&#34;&gt;We&amp;rsquo;re (only) halfway there&lt;/h2&gt;
&lt;p&gt;What you&amp;rsquo;ll notice in my &lt;strong&gt;custom.css&lt;/strong&gt; file is that I&amp;rsquo;ve created a bunch of variables for colour under &lt;code&gt;:root&lt;/code&gt;, and then essentially have a copy of whatever is dealing with colour in the theme&amp;rsquo;s CSS file copied over, using &lt;code&gt;var(--colour-whatever)&lt;/code&gt;, so that I only have to define that once.&lt;/p&gt;
&lt;p&gt;(I&amp;rsquo;ve also added the Updates page styling here too, so that it&amp;rsquo;s not injected inline and I don&amp;rsquo;t have to maintain a separate file. Yay!)&lt;/p&gt;
&lt;p&gt;However, CSS variables aren&amp;rsquo;t supported by IE11, so the colour changes don&amp;rsquo;t take:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/2019-08-31/edge-vs-ie.png&#34; alt=&#34;&amp;ldquo;This site on Edge (left) vs IE11 (right)&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(Edge on the left, IE11 on the right)&lt;/p&gt;
&lt;p&gt;This is definitely A Thing™ that I want to improve. Specifically, improving the theme&amp;rsquo;s CSS so that it&amp;rsquo;s more maintainable —I&amp;rsquo;m not a CSS guru by any stretch of the imagination, but even since releasing Indigo I see a lot of opportunity for cleanup here— but also creating a build process (via &lt;a href=&#34;https://gohugo.io/hugo-pipes/&#34;&gt;Hugo Pipes&lt;/a&gt;, probably?) to add better backward compatibility for things like CSS properties and, for example, responsive images.&lt;/p&gt;
&lt;p&gt;In the meanwhile, this site now runs off of the &lt;code&gt;development&lt;/code&gt; branch of the Indigo theme, so let me know if things look broken when you view it!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Improved Hugo theme workflows coming</title>
      <link>https://angelostavrow.com/post/new-indigo-workflows/</link>
      <pubDate>Thu, 22 Aug 2019 10:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/new-indigo-workflows/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been over 10 months since I &lt;a href=&#34;https://angelostavrow.com/post/introducing-indigo/&#34;&gt;released&lt;/a&gt; my theme for Hugo, called &lt;a href=&#34;https://github.com/AngeloStavrow/indigo&#34;&gt;Indigo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some changes have been made since launch, but it always seems to take so much longer to build out new features or fix bugs than I&amp;rsquo;d like, and a recent &lt;a href=&#34;https://github.com/gohugoio/hugoThemes/issues/678&#34;&gt;breaking change&lt;/a&gt; in Hugo 0.57 (temporarily rolled back in 0.57.2) that I have to &lt;a href=&#34;https://github.com/AngeloStavrow/indigo/issues/52&#34;&gt;fix&lt;/a&gt; really drove that point home.&lt;/p&gt;
&lt;p&gt;Part of the long delay between updates comes from the fact that Indigo is a project that I don&amp;rsquo;t work on daily (or even weekly), but also because I don&amp;rsquo;t have a great workflow for a lot of the stuff that needs to happen in the development process.&lt;/p&gt;
&lt;p&gt;Currently, here&amp;rsquo;s my development process for making a change to Indigo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the issue and implement the changes&lt;/li&gt;
&lt;li&gt;Test the changes on a local version of the Indigo &lt;a href=&#34;https://github.com/gohugoio/hugoBasicExample&#34;&gt;example site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Test the changes in a local version of the Hugo themes gallery&lt;/li&gt;
&lt;li&gt;Update the CHANGELOG and README docs as necessary&lt;/li&gt;
&lt;li&gt;Open and merge the PR&lt;/li&gt;
&lt;li&gt;Communicate the changes somehow&lt;/li&gt;
&lt;li&gt;Update my own personal site (which involves pulling apart the CSS for the customizations I&amp;rsquo;ve made)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&amp;rsquo;s all very manual and tedious work. It also doesn&amp;rsquo;t help that I&amp;rsquo;ve made the process of opening GitHub issues and PRs more onerous than they need to be for a project of this (small) scale.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m thinking about how to fix this. Here&amp;rsquo;s the plan, as it stands right now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create and publish a demo site based on Hugo&amp;rsquo;s example site. This will be rebuilt with each release of Hugo to check for problems. This takes care of points 2 and 3 above, as it&amp;rsquo;s sufficient for the theme to work with Hugo&amp;rsquo;s example site.&lt;/li&gt;
&lt;li&gt;This demo site will also serve as a place for theme updates, as individual posts. I mean, it&amp;rsquo;s a blog — can&amp;rsquo;t think of a better way to publish updates than, y&amp;rsquo;know, a blog! That takes care of point 6 above.&lt;/li&gt;
&lt;li&gt;To make it easier for everyone to share feedback on the theme and keep up to date what&amp;rsquo;s being worked on, I&amp;rsquo;ve created a &lt;a href=&#34;https://changemap.co/indigo-team/indigo-theme-for-hugo/&#34;&gt;changemap&lt;/a&gt;. I&amp;rsquo;m also going to relax the Issue and Pull Request templates shortly.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve opened an issue to pull &lt;a href=&#34;https://github.com/AngeloStavrow/indigo/issues/48&#34;&gt;custom theme styling&lt;/a&gt; out of the main CSS file, so that it&amp;rsquo;s easier for folks to customize their sites — including myself. That&amp;rsquo;ll take care of point 7 above.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m looking forward to this stuff because it&amp;rsquo;ll mean I can build greater velocity to push out fixes and features, and I&amp;rsquo;ll update here as these things get done. In the meanwhile, I aim to push out a fix for the breaking change ASAP.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting help with code</title>
      <link>https://angelostavrow.com/post/getting-help-with-code/</link>
      <pubDate>Sat, 13 Jul 2019 09:30:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/getting-help-with-code/</guid>
      <description>&lt;p&gt;Debugging code can be either &lt;em&gt;very rewarding&lt;/em&gt; or &lt;em&gt;extremely frustrating&lt;/em&gt;. If you&amp;rsquo;re feeling frustrated, here are a couple of tips that will make it easier for others to help you.&lt;/p&gt;
&lt;h2 id=&#34;bring-a-minimal-reproducible-example&#34;&gt;Bring a minimal, reproducible example&lt;/h2&gt;
&lt;p&gt;Create and share a sample project with as little code as possible to show what you&amp;rsquo;re trying to do and how it&amp;rsquo;s failing. This &lt;a href=&#34;https://stackoverflow.com/help/minimal-reproducible-example&#34;&gt;Stack Overflow help article&lt;/a&gt; goes into a lot of detail on this! You can put this in a &lt;a href=&#34;https://github.com/&#34;&gt;public GitHub repository&lt;/a&gt; for helpers to look at. For web development, I&amp;rsquo;ll create and share a &lt;a href=&#34;https://glitch.com/&#34;&gt;Glitch&lt;/a&gt; project (naturally). &lt;a href=&#34;https://developer.apple.com/swift-playgrounds/&#34;&gt;Swift playgrounds&lt;/a&gt; can be a really great option for iOS/macOS development questions.&lt;/p&gt;
&lt;p&gt;I do this even when I&amp;rsquo;m trying to debug my own code, to prove that the problem is what I think it is, and not a weird side effect from other code in the project. Sometimes, this step alone is enough to help you figure out what the issue was.&lt;/p&gt;
&lt;h2 id=&#34;make-your-question-as-specific-as-possible&#34;&gt;Make your question as specific as possible&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;re probably frustrated and tired and just want to get the code working as quickly as possible. It&amp;rsquo;s worth it to take the time and put as much detail as possible into your question.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What kind of project are you working on? Be specific: you might be writing JavaScript, but you might run into very different problems depending on whether it&amp;rsquo;s part of a Node app, a React app, or plain ol&amp;rsquo; vanilla JavaScript in a static HTML page.&lt;/li&gt;
&lt;li&gt;Are you getting following a tutorial? Share the link. Maybe things have changed since the tutorial was written.&lt;/li&gt;
&lt;li&gt;Get back to the point where your project last worked, and explain step-by-step what you did from that point. Just like in a good bug report, describe &lt;em&gt;what you expected&lt;/em&gt; as well as &lt;em&gt;what is actually happening&lt;/em&gt;. Remember to share the error messages you see!&lt;/li&gt;
&lt;li&gt;Provide details on what you tried to fix the issue. Links to tutorials or Stack Overflow answers that you tried can be helpful too.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This probably sounds like a lot of work, but there&amp;rsquo;s value to it. First, writing this stuff out is a kind of &lt;a href=&#34;https://en.wikipedia.org/wiki/Rubber_duck_debugging&#34;&gt;rubber duck debugging&lt;/a&gt;, letting you step outside of the editor and into a conversation about what&amp;rsquo;s going wrong. Sometimes, taking the time to do this will help you figure out the problem yourself. That&amp;rsquo;s because you&amp;rsquo;re awesome!&lt;/p&gt;
&lt;p&gt;And if it doesn&amp;rsquo;t, you&amp;rsquo;re still awesome! But the level of challenge you&amp;rsquo;re facing is probably a little more advanced the skills you&amp;rsquo;ve built up so far. You&amp;rsquo;ll get there, and asking for help is a great way to do that.&lt;/p&gt;
&lt;p&gt;The details you&amp;rsquo;re providing by following the tips above is information that your helpers will probably ask you for anyhow, so by putting in that work you skip right to the good part: learning from others.&lt;/p&gt;
&lt;h2 id=&#34;make-room-for-answers&#34;&gt;Make room for answers&lt;/h2&gt;
&lt;p&gt;Sucessfully debugging a problem is as much about finding peace as it is investigation. As soon as I catch myself obsessing on why a particular line of code that &lt;em&gt;should be working&lt;/em&gt; is not doing what I expect, I minimize the code edito and leave the room.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll go for a short walk, or do some dishes, and let my mind wander. Sometimes that alone helps me figure out the problem!&lt;/p&gt;
&lt;p&gt;But even if it doesn&amp;rsquo;t, it changes where my head is at. I go from a place where I&amp;rsquo;m trying to &lt;em&gt;bend a thing to my will&lt;/em&gt; to a place where I&amp;rsquo;m &lt;em&gt;ready to receive new ideas&lt;/em&gt;. I start writing down the points listed above. I create a sample project.&lt;/p&gt;
&lt;p&gt;And then I can ask my questions from a position of patience and openness, because I&amp;rsquo;ve gotten rid of the frustration that&amp;rsquo;s blocking me.&lt;/p&gt;
&lt;p&gt;What tips do you have for getting help with code?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Thoughts on the podcast experiment</title>
      <link>https://angelostavrow.com/post/mbb-season-1-retro/</link>
      <pubDate>Mon, 29 Apr 2019 08:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/mbb-season-1-retro/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a week since &lt;a href=&#34;https://ioscoachfrank.com/&#34;&gt;Frank&lt;/a&gt; and I wrapped up and released the final episode for &lt;a href=&#34;https://www.makebeforebreak.com/&#34;&gt;Make Before Break&lt;/a&gt;&amp;lsquo;s first season. Here are a few things we learned about making a podcast.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There&amp;rsquo;s an enoromous amount of behind-the-scenes work. A lot of it has to do with planning, and editing the audio is pretty time consuming. We learned as we went, and things got much easier in the second half of the season as we settled into a groove. All things considered, every hour of published audio probably required about two hours of work between the two of us.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Talking isn&amp;rsquo;t easy. It helps to prepare talking points, and it was also really helpful to take 5-10 minutes to run through them together before hitting the record button. Even then, being able to put together cohesive thoughts and having a naturally-flowing conversation requires active listening and being able to think on your feet. This also got better for me with practice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Great-sounding voice recording isn&amp;rsquo;t easy. The audio quality in a lot of episodes definitely isn&amp;rsquo;t professional-level, but it&amp;rsquo;s not too bad. We need to work on this a bit more. I don&amp;rsquo;t think either of us intend on building out a recording studio with sound-deadening panels or whatever, but good microphone technique goes a long way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A weekly-release schedule is tough for a side project like this. We agreed that a less-frequent release schedule will let us put together show with compelling content and better production without worrying about &lt;a href=&#34;https://hotpodnews.com/burned-out/&#34;&gt;burnout&lt;/a&gt;. We&amp;rsquo;re not yet sure what that release schedule will be, but we&amp;rsquo;ll try to keep it consistent. For now, we&amp;rsquo;re going to enjoy our break.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A few more tidbits, since we&amp;rsquo;re on the subject:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first episode was published on February 18&lt;sup&gt;th&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;To date, there have been 206 downloads of 10 episodes.&lt;/li&gt;
&lt;li&gt;The average episode length is 49 minutes, with the shortest (ep6) at 41 minutes and the longest (ep3) at 64 minutes.&lt;/li&gt;
&lt;li&gt;Canadians accounted for about 54% of downloads, with 41% going to U.S. listeners and Germany in a distant 3rd with 4%.&lt;/li&gt;
&lt;li&gt;Nearly a third of listeners use Apple Podcasts, with Overcast in second place at 15.5%.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;re excited to get started on season 2 in a few weeks. If you have any questions or comments for us, feel free to send an &lt;a href=&#34;https://www.makebeforebreak.com/contact/&#34;&gt;email&lt;/a&gt; or a &lt;a href=&#34;https://twitter.com/MakeBeforeBreak/&#34;&gt;tweet&lt;/a&gt;. Thanks for listening!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pseudo-chat components in Glitch</title>
      <link>https://angelostavrow.com/post/pseudo-chat-components-in-glitch/</link>
      <pubDate>Thu, 28 Mar 2019 15:15:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/pseudo-chat-components-in-glitch/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ashfurrow.com/blog/&#34;&gt;Ash Furrow’s blog&lt;/a&gt; is always a great read, and &lt;a href=&#34;https://ashfurrow.com/blog/learning-from-other-programming-communities/&#34;&gt;Monday&amp;rsquo;s thoughts&lt;/a&gt; on learning from other developer communities was no exception.&lt;/p&gt;
&lt;p&gt;That post came from &lt;a href=&#34;https://twitter.com/ashfurrow/status/1108692951348191232&#34;&gt;conversations on Twitter&lt;/a&gt;, which is a thing I see a lot on &lt;a href=&#34;https://micro.blog&#34;&gt;Micro.blog&lt;/a&gt;: rather than some long string of short updates, people will go off and write up their thoughts in a long(er)-form post, and share it with conversation participants.&lt;/p&gt;
&lt;p&gt;I’m big on syndicating out from your own little corner of the web, but Ash’s post reminded me of another thing that’s just &lt;em&gt;really really cool&lt;/em&gt; about hosting your own content: the brilliant pseudo-chat in the middle of the post that adds interactivity to the post.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I got to spend some time in jQuery building this interactive chat component for the blog post: &lt;a href=&#34;https://t.co/QMTqVdE7ZA&#34;&gt;pic.twitter.com/QMTqVdE7ZA&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ash Furrow believes in you (@ashfurrow) &lt;a href=&#34;https://twitter.com/ashfurrow/status/1110171153203646465?ref_src=twsrc%5Etfw&#34;&gt;March 25, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;While it’s not some AI-powered chatbot, a scripted exchange like this still breathes life into an otherwise static page. It fulfills part of the promise of the web: going beyond text and image and experimenting with entirely new ways to engage with your audience.&lt;/p&gt;
&lt;p&gt;Of course, we’re not all able to whip up something like this for our own blog posts and websites, which can put this kind of stuff out of reach of many bloggers.&lt;/p&gt;
&lt;p&gt;For those authors, I created a Glitch app that recreates the experience for you to embed in your site, like so:&lt;/p&gt;
&lt;div class=&#34;glitch-embed-wrap&#34; style=&#34;height: 557px; width: 100%;&#34;&gt;
  &lt;iframe
    allow=&#34;geolocation; microphone; camera; midi; vr; encrypted-media&#34;
    src=&#34;https://glitch.com/embed/#!/embed/embedded-chat?path=README.md&amp;previewSize=100&#34;
    alt=&#34;embedded-chat on Glitch&#34;
    style=&#34;height: 100%; width: 100%; border: 0;&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;The content in the chat above is directly from Ash’s post, but you can &lt;a href=&#34;https://glitch.com/edit/#!/remix/embedded-chat&#34;&gt;remix the app&lt;/a&gt; and create your own conversation script by modifying &lt;code&gt;chatScript&lt;/code&gt; in &lt;strong&gt;script.js&lt;/strong&gt;, then embed it in your own website (or wherever). To remix it, just click on the button below:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://glitch.com/edit/#!/remix/embedded-chat&#34;&gt;&lt;img src=&#34;https://cdn.glitch.com/2703baf2-b643-4da7-ab91-7ee2a2d00b5b%2Fremix-button.svg&#34; alt=&#34;Remix on Glitch&#34; style=&#34;height: 40px; width: 163px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m also starting to curate a collection of Glitch apps like this, that act like a drop-in solution for augmenting blog posts in fun and useful ways. It’s a collection of just this one project at the time of writing, but you can find it &lt;a href=&#34;https://glitch.com/@AngeloStavrow/augmented-blogality&#34;&gt;here&lt;/a&gt; — and if you have any suggestions, let me know!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Add notifications to your app/website in two easy steps</title>
      <link>https://angelostavrow.com/post/notifications-in-two-easy-steps/</link>
      <pubDate>Wed, 13 Mar 2019 11:45:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/notifications-in-two-easy-steps/</guid>
      <description>&lt;p&gt;If you’ve been looking for the best way to add notifications to your app or website, just follow these two simple steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don’t&lt;/li&gt;
&lt;li&gt;No really, don’t&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Couldn’t be easier.&lt;/p&gt;
&lt;p&gt;This article is the first in my new series on &lt;a href=&#34;https://angelostavrow.com/tags/lesstech&#34;&gt;better living through less technology&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Remote Work: Year Two</title>
      <link>https://angelostavrow.com/post/remote-work-year-two/</link>
      <pubDate>Wed, 06 Mar 2019 08:30:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/remote-work-year-two/</guid>
      <description>&lt;p&gt;Today marks the second anniversary of my gig at &lt;a href=&#34;https://glitch.com&#34;&gt;Glitch&lt;/a&gt; (formerly Fog Creek Software). Last year, &lt;a href=&#34;https://angelostavrow.com/post/remote-work-year-one/&#34;&gt;I wrote a retrospective&lt;/a&gt; on what the first year of working remotely was like; I thought it’d be fun to see how that’s evolved.&lt;/p&gt;
&lt;h2 id=&#34;whats-scary-about-working-remotely&#34;&gt;What’s scary about working remotely?&lt;/h2&gt;
&lt;p&gt;Last year, I said that there wasn’t very much that I found to be scary about working remotely. That’s still true! I do still find that I can go days without leaving the house for social interaction or physical activity, but I have been better about that too. I tend to work on personal projects from coffee shops every so often; this year, I’ve been toying with the idea of using a co-working space once in a while to get away from my home office, too. That will probably only happen once the weather improves.&lt;/p&gt;
&lt;h2 id=&#34;whats-good-about-working-remotely&#34;&gt;What’s good about working remotely?&lt;/h2&gt;
&lt;p&gt;Last year, I talked about the ability to focus and the commute (or lack thereof). That’s still very true, and now that I’m in a more flexible role, I am (as I mentioned above) kind of liking the idea of working from wherever, whenever. I’ve been identifying peak hours for my own productivity, and while I still need to have a pretty good 9-to-5 overlap, it’s really nice to be able to step away to handle personal affairs and catch up later in the day.&lt;/p&gt;
&lt;h2 id=&#34;lets-talk-about-career-development&#34;&gt;Let’s talk about career development.&lt;/h2&gt;
&lt;p&gt;I still haven’t taken advantage of things like conference budgets, so that’s not great. There’s been a lot of change at Glitch over the last few months, so things like the mentorship program have been put on hold for a bit. I miss that, but I’ve been doing a lot of courses (mostly from &lt;a href=&#34;https://wesbos.com/courses&#34;&gt;Wes Bos&lt;/a&gt;) to level-up my web development game.&lt;/p&gt;
&lt;h3 id=&#34;how-do-you-learn-from-your-colleagues-remotely&#34;&gt;How do you learn from your colleagues remotely?&lt;/h3&gt;
&lt;p&gt;We’ve got &lt;code&gt;#learning&lt;/code&gt; and &lt;code&gt;#codereview&lt;/code&gt; channels in Slack for posting things you’re learning and requesting feedback on your code, respectively, and these are pretty great; we also have a standing daily hour-long video hangout where you can jump in to work on projects with others. It sometimes happens that I’m in there alone, though.&lt;/p&gt;
&lt;h2 id=&#34;how-do-you-stay-plugged-into-spontaneous-conversations-around-the-office&#34;&gt;How do you stay plugged into spontaneous conversations around the office?&lt;/h2&gt;
&lt;p&gt;Slack. To quote Anne Helen Petersen’s comment the &lt;a href=&#34;https://hurryslowly.co/anne-helen/&#34;&gt;&lt;em&gt;Hurry Slowly&lt;/em&gt; podcast&lt;/a&gt;, it’s like LARPing your workday. There’s also a policy of posting notes whenever two or more people have a meeting; these are available for anyone in the company to read, so if there’s a spontaneous conversation of some consequence to the product or business, you can learn more.&lt;/p&gt;
&lt;h3 id=&#34;how-do-you-have-idlewatercooler-discussions&#34;&gt;How do you have idle/watercooler discussions?&lt;/h3&gt;
&lt;p&gt;There’s no change in this from last year, though we didn’t continue with &lt;a href=&#34;https://donut.ai&#34;&gt;Donut&lt;/a&gt; after all; it was great for pairing a small group of people, but it was hard to get one person to take charge and schedule something.&lt;/p&gt;
&lt;h2 id=&#34;what-happens-if-you-spend-a-week-stuck-on-a-problem&#34;&gt;What happens if you spend a week stuck on a problem?&lt;/h2&gt;
&lt;p&gt;Things are a little different with my new gig as a solutions engineer as there isn’t exactly somewhere to escalate, but talking about your blockers in a 1:1 or in weekly team check-ins usually gets things moving in the right direction. These days, “getting stuck” can go one of two ways: being stuck technically (not being sure how to implement a feature or solve a bug), or being stuck in a conversation (not being sure how to answer a partner’s question, for example).&lt;/p&gt;
&lt;p&gt;And of course, there’s always the &lt;code&gt;#ask&lt;/code&gt; channel (or team-specific channels) in Slack to ask questions. That’s really the most important thing: instead of getting frustrated by spinning your wheels when trying to solve a problem, ask questions and seek advice. It helps that I get to work with phenomenally talented people, too.&lt;/p&gt;
&lt;h2 id=&#34;whats-the-setup-like-for-meetings-with-people-in-the-office-and-does-it-work-well&#34;&gt;What’s the setup like for meetings with people in the office, and does it work well?&lt;/h2&gt;
&lt;p&gt;There’s no change here over last year. I really like that even with a good chunk of the Glitch team working at HQ in NYC, meetings are still conducted with each person at their computer. It’s never a conference room full of people and a couple of lonely remote folks, which is great.&lt;/p&gt;
&lt;h2 id=&#34;how-do-you-stay-productive-and-also-separate-worklife-at-home&#34;&gt;How do you stay productive and also separate work/life at home?&lt;/h2&gt;
&lt;p&gt;Staying productive hasn’t changed, though I tend to spend more time thinking in my day job than I used to. I also tend to spend a bit more time in my home office these days, to either &lt;a href=&#34;https://www.makebeforebreak.com&#34;&gt;work on the podcast&lt;/a&gt; or &lt;a href=&#34;https://angelostavrow.com/post/fretting/&#34;&gt;practice guitar&lt;/a&gt;, but I still try to define pretty rigid start and end times to my day. I’d be lying if I said I didn’t pop into Slack every so often outside of my normal working hours, but usually that’s to check out what’s happening in &lt;code&gt;#food&lt;/code&gt;, &lt;code&gt;#pets&lt;/code&gt;, &lt;code&gt;#fitness&lt;/code&gt;, or &lt;code&gt;#offtopic&lt;/code&gt;. If I have an idea for work, I tend to dump it into OmniFocus for consideration at the start of the next workday. You can’t help when you’ll have an idea, but you &lt;em&gt;can&lt;/em&gt; protect the time you’ve defined for your life outside of work.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Face for Radio</title>
      <link>https://angelostavrow.com/post/a-face-for-radio/</link>
      <pubDate>Mon, 18 Feb 2019 14:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/a-face-for-radio/</guid>
      <description>&lt;p&gt;&lt;em&gt;…and a voice for silent film.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Several months ago, &lt;a href=&#34;https://ioscoachfrank.com&#34;&gt;Frank Courville&lt;/a&gt; asked me if I wanted to do a podcast. We&amp;rsquo;d talk about productivity, he said, through the lens of Apple-based developers. I figured I&amp;rsquo;d like hearing the sound of my own voice, so I agreed to try a ten-episode season and see how it goes.&lt;/p&gt;
&lt;p&gt;(I do not like hearing the sound of my own voice. Turns out.™️)&lt;/p&gt;
&lt;p&gt;Four months later, we released episode 1 of &lt;a href=&#34;https://www.makebeforebreak.com&#34;&gt;Make Before Break&lt;/a&gt;. Readers may recognize the name as that of my old blog; it made sense to repurpose it, because we&amp;rsquo;re cheap and unimaginative.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s our first attempt at this whole podcasting thing, and I was battling a bit of a sinus thing during the recording of this episode. We talk about friction — what it is, how to recognize it, and when it might be a good thing.&lt;/p&gt;
&lt;p&gt;I hope you like it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Allegory of the Kitchen</title>
      <link>https://angelostavrow.com/post/the-allegory-of-the-kitchen/</link>
      <pubDate>Mon, 11 Feb 2019 06:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/the-allegory-of-the-kitchen/</guid>
      <description>&lt;p&gt;I love cooking, and get myself little gadgets and tools for the kitchen more often than I should, because having the right tool for the job makes things so much more pleasant and makes me more effective.&lt;/p&gt;
&lt;p&gt;Really, it’s not so much the cooking I love; it’s really all about hosting little dinner parties, and making something special to bring over to friends&amp;rsquo; places when we get together.&lt;/p&gt;
&lt;p&gt;Now, there&amp;rsquo;s one tool I don&amp;rsquo;t have, because the kitchen doesn&amp;rsquo;t have a spot for it: a dishwasher. Because I really don&amp;rsquo;t like doing dishes* they often pile up, filling the sink and taking over a bunch of the surrounding counter space.&lt;/p&gt;
&lt;p&gt;Trying to host a successful dinner party or make a cake to bring to a birthday get-together when I&amp;rsquo;m surrounded by a pile of dirty dishes is… well, pretty frustrating. So, I instead spend an hour washing the dishes, cutting deeply into the time I have to do the thing that I really want to do — and that people are expecting me to do.&lt;/p&gt;
&lt;p&gt;This means I have to half-ass my cake. I&amp;rsquo;m disappointed in myself, and while friends won&amp;rsquo;t outright say so, I&amp;rsquo;m sure they didn&amp;rsquo;t love it either.&lt;/p&gt;
&lt;p&gt;Probably I just need a better cake pan, right?&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;*&lt;/strong&gt; &lt;em&gt;I actually like doing the dishes, because I can stare out the window and think on things while I wash them. But that’s not the moral of the story here.&lt;/em&gt;&lt;/p&gt;
&lt;br&gt;</description>
    </item>
    
    <item>
      <title>Fretting</title>
      <link>https://angelostavrow.com/post/fretting/</link>
      <pubDate>Mon, 04 Feb 2019 07:30:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/fretting/</guid>
      <description>&lt;p&gt;After several months of planning and budgeting, I brought home an acoustic guitar on Friday.&lt;/p&gt;
&lt;p&gt;I grew up playing music, having asked my parents for piano lessons at the age of 6. After studying piano and music theory for a dozen years or so, I started getting pretty interested in guitar —probably due to the fact that I was listening to so much metal at the time— and started plinking away at an old acoustic guitar that my dad had lying around.&lt;/p&gt;
&lt;p&gt;I taught myself some chords and songs, and even got decent enough to jam with some friends. And then, one day, I just&amp;hellip; stopped.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know why. It&amp;rsquo;s been over a decade since I seriously touched an instrument, but I still consider myself a musician at heart.&lt;/p&gt;
&lt;p&gt;So, I decided to bring music back into my life. I did the homework, and ordered a &lt;a href=&#34;https://www.taylorguitars.com/guitars/acoustic/big-baby-taylor-bbt&#34;&gt;Taylor &amp;ldquo;Big Baby&amp;rdquo; acoustic guitar&lt;/a&gt; at my local music store. I also signed up for &lt;a href=&#34;https://www.guitareo.com/acoustic-guitar-made-easy&#34;&gt;an online class at Guitareo&lt;/a&gt; to help me unlearn whatever bad habits I might have picked up while teaching myself. While we&amp;rsquo;re only at strumming practice, it&amp;rsquo;s been really helpful so far!&lt;/p&gt;
&lt;p&gt;Why did I choose guitar over my first instrument, the piano? There are a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Practically speaking, it&amp;rsquo;s a lot easier to find room for an acoustic guitar than a piano in a two-bedroom apartment.&lt;/li&gt;
&lt;li&gt;Financially, it&amp;rsquo;s also significantly more affordable. You can get &lt;a href=&#34;https://www.guitarcenter.com/Yamaha/FG800-Folk-Acoustic-Guitar.gc&#34;&gt;a great starter acoustic guitar&lt;/a&gt; for about $250.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s a lot easier to bring your acoustic guitar to a friend&amp;rsquo;s place or the park than it is to bring a piano (but I guess &lt;a href=&#34;http://www.rolandus.com/go/keytar/&#34;&gt;there are some options&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;After having surgery to reattach a severed tendon in my pinky about a year and a half ago, my left hand is lacking in strength and dexterity — something that a guitar will develop more effectively than a piano.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That said, I would love to bring a piano back into my life at some point.&lt;/p&gt;
&lt;p&gt;Here are three things I learned since picking up the guitar:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It&amp;rsquo;s so much easier to find decent &lt;a href=&#34;https://en.wikipedia.org/wiki/Tablature&#34;&gt;tablature&lt;/a&gt; online than I expected. Back when I was learning in high school (pre-internet), you either had to buy it in-store or in a guitar magazine, or figure a song out by ear.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t forget to budget for accessories. While I&amp;rsquo;m trying to avoid going overboard with gear purchases (yeah, I&amp;rsquo;m one of &lt;em&gt;those&lt;/em&gt; people when it comes to hobbies), I did still pick up a &lt;a href=&#34;http://herculesstands.com/international/products/fretted-and-bowed-instrument/guitar/single-stands/gs412b/&#34;&gt;guitar stand&lt;/a&gt;, a &lt;a href=&#34;https://www.g7th.com/performance-2-capo&#34;&gt;capo&lt;/a&gt;, a spare set of strings, a &lt;a href=&#34;http://www.daddario.com/pwProductDetail.Page?ActiveID=4115&amp;amp;productid=551&amp;amp;productname=Pro_Winder_Guitar&#34;&gt;re-stringing tool&lt;/a&gt;, and a &lt;a href=&#34;http://www.daddario.com/pwProductDetail.Page?ActiveID=4115&amp;amp;productid=522&amp;amp;productname=Acoustic_Guitar_Humidifiers&amp;amp;sid=fda1d7c1-2a1d-4e2e-aba1-93e28b0688eb&#34;&gt;guitar humidifier&lt;/a&gt;. Oh, and some picks.&lt;/li&gt;
&lt;li&gt;Developing callouses on your fretting hand&amp;rsquo;s fingertips &lt;em&gt;sucks&lt;/em&gt;. I&amp;rsquo;ve been trying to play for 30-60 minutes a day since bringing home the guitar, and while my fingers are getting there, it&amp;rsquo;s going to be tender for a few more days. Just gotta push through and keep practicing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Years later, I&amp;rsquo;m surprised that I&amp;rsquo;m still able to play little licks from old favourites. Getting back into it hasn&amp;rsquo;t been nearly as hard as I thought, which is really encouraging. My fingers still fumble going through chord changes, but I think that practicing daily will get me there.&lt;/p&gt;
&lt;p&gt;More tk. Until then, rock on. \m/&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recommended Reading</title>
      <link>https://angelostavrow.com/post/recommended-reading/</link>
      <pubDate>Sat, 19 Jan 2019 10:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/recommended-reading/</guid>
      <description>&lt;p&gt;I spend a lot of time reading, and I&amp;rsquo;ve been thinking about periodically writing up a list of articles that I&amp;rsquo;ve recently enjoyed.&lt;/p&gt;
&lt;p&gt;While I&amp;rsquo;m big on RSS (&lt;a href=&#34;https://feedbin.com&#34;&gt;Feedbin&lt;/a&gt; is my RSS service of choice), I do &lt;a href=&#34;https://feedbin.com/blog/2016/02/03/subscribe-to-email-newsletters-in-feedbin/&#34;&gt;also use it to subscribe to a few weekly newsletters&lt;/a&gt; — here are my current favourites.&lt;/p&gt;
&lt;h3 id=&#34;jocelyn-k-glei-rarrhttpsjkgleicom&#34;&gt;&lt;a href=&#34;https://jkglei.com&#34;&gt;Jocelyn K. Glei →&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Host of the &lt;a href=&#34;https://hurryslowly.co&#34;&gt;Hurry Slowly podcast&lt;/a&gt;, this newsletter collects articles on finding time for creativity and meaningful work. I love both the podcast and newsletter so much that signing up for &lt;a href=&#34;https://reset-course.com&#34;&gt;the Reset Course&lt;/a&gt; was a no-brainer for me.&lt;/p&gt;
&lt;h3 id=&#34;dense-discovery-rarrhttpswwwdensediscoverycom&#34;&gt;&lt;a href=&#34;https://www.densediscovery.com/&#34;&gt;Dense Discovery →&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Published by Kai Brach, this newsletter collects articles &amp;ldquo;at the intersection of tech, design, and culture.&amp;rdquo; There&amp;rsquo;s always a lot of great stuff here, including articles to read, tools to try, or designs to inspire.&lt;/p&gt;
&lt;h3 id=&#34;rad-reads-rarrhttpsradreadsco&#34;&gt;&lt;a href=&#34;https://radreads.co/&#34;&gt;Rad Reads →&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Khe Hy writes about living (and working) deliberately (&amp;ldquo;with intention&amp;rdquo;), and curates a newletter that aims to help you be more creative, empathetic, and resilient.&lt;/p&gt;
&lt;h3 id=&#34;flashing-palely-in-the-margins-rarrhttpsbuttondownemailvasta&#34;&gt;&lt;a href=&#34;https://buttondown.email/vasta&#34;&gt;Flashing Palely in the Margins →&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.inthemargins.ca/&#34;&gt;Sameer Vasta&lt;/a&gt;&amp;lsquo;s newsletter is one of my newest discoveries, but it&amp;rsquo;s rapidly become one of my favourites. A wonderful collection of interesting reads, thoughtful commentary, and a little poetry, this gem always makes me sit back and think.&lt;/p&gt;
&lt;p&gt;More, as always, tk.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Culling</title>
      <link>https://angelostavrow.com/post/culling/</link>
      <pubDate>Thu, 10 Jan 2019 05:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/culling/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://angelostavrow.com/post/hello-2019/&#34;&gt;Last week I wrote&lt;/a&gt; about defining my goals a bit more carefully, making sure that projects I undertake fit &lt;em&gt;who I want to be&lt;/em&gt; and &lt;em&gt;how I feel&lt;/em&gt;, set in the context of &lt;em&gt;what I’m capable of&lt;/em&gt;. Part of that meant making some hard decisions about which projects I&amp;rsquo;ll put in my backlog, and which projects I&amp;rsquo;ll drop altogether. The work I&amp;rsquo;d started on a &lt;a href=&#34;https://angelostavrow.com/post/app-store-reviews-in-manuscript/&#34;&gt;Manuscript integration&lt;/a&gt; is one of the latter.&lt;/p&gt;
&lt;p&gt;Working on &lt;a href=&#34;https://angelostavrow.com/post/introducing-indigo/&#34;&gt;Indigo&lt;/a&gt; reminded me that taking on a project is more than just hitting ⌘+N, writing the code, and putting it out into the world; in fact, the development part of the project lifecycle might not even be the bulk of of the work. The bigger chunk of the work comes from maintaining it indefinetly; do you want to continue improving that project for the rest of your life?&lt;/p&gt;
&lt;p&gt;(No, I probably won&amp;rsquo;t work on any given project for the rest of my life, but I still think it&amp;rsquo;s worth framing it that way, because it forces me to place a very high value on my time.)&lt;/p&gt;
&lt;p&gt;Indigo is something that I&amp;rsquo;ll continue working on, as it powers my personal site. &lt;a href=&#34;https://droppedbits.com/per&#34;&gt;Per&lt;/a&gt; is something that I use often, so I&amp;rsquo;ll continue maintaining it (despite my lack of frequency in updating the app).&lt;/p&gt;
&lt;p&gt;The reality is, however, that I probably won&amp;rsquo;t get much use out of a Manuscript integration that pulls in reviews from the App Store, because there&amp;rsquo;s just no volume there for my own apps. That means if and when it breaks, I won&amp;rsquo;t notice until users start having a bad experience. That&amp;rsquo;s… &lt;em&gt;not great&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, the project is being archived. If you&amp;rsquo;re a Manuscript user and you&amp;rsquo;re interested in the idea, let me know and I&amp;rsquo;m happy to walk you through what I&amp;rsquo;ve got so far.&lt;/p&gt;
&lt;p&gt;More tk.&lt;/p&gt;
&lt;!-- Links --&gt;</description>
    </item>
    
    <item>
      <title>Hello, 2019</title>
      <link>https://angelostavrow.com/post/hello-2019/</link>
      <pubDate>Tue, 01 Jan 2019 10:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/hello-2019/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m being a bit more careful about defining goals this year. Certainly, there are some things that I&amp;rsquo;m aiming to do, or that I need to do, but these things have to be balanced against the universe not especially giving a damn about my wants and needs — and I need to be okay with that. But more importantly, I&amp;rsquo;m working harder on timeboxing my projects in OmniFocus, for a few reasons.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve realized is that I’m happiest when I’m living a considered life. An examined life, in a sense, but without getting too mired in the details. I set &lt;a href=&#34;https://angelostavrow.com/post/annual-review-2018&#34;&gt;a bunch of goals that I couldn&amp;rsquo;t (or didn&amp;rsquo;t really want to) meet last year&lt;/a&gt;, and I want to avoid that this year; I’ve learned the hard lesson that numbers measured and checkboxes ticked are worthless if they ignore the needs of &lt;em&gt;who I want to be&lt;/em&gt; and &lt;em&gt;how I feel&lt;/em&gt;, set in the context of &lt;em&gt;what I&amp;rsquo;m capable of&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So I&amp;rsquo;ve spent a bit of time thinking about this. Who am I? What is my True North? Knowing these things, how do I make sure my bearing is correctly set to get there?&lt;/p&gt;
&lt;p&gt;I learned some important things over the last year. I&amp;rsquo;m someone who needs focus time, and who needs to create things. I&amp;rsquo;m someone that needs real-life social interaction. I need a solid seven hours of sleep, and I also need quiet time to be alone with my thoughts. Despite not having touched an instrument in over a decade, I still consider myself a musician. So I&amp;rsquo;ve been working towards goals that meet these needs. Why then, are these projects mostly still sitting on the backburner?&lt;/p&gt;
&lt;p&gt;I think it&amp;rsquo;s because of pattern of &amp;ldquo;overs&amp;rdquo;. Overenthusiasm leads to overcommitment leads to overwhelm, and so I need some way to rein in that enthusiasm; I need to be more deliberate about how I treat my waking hours. Maybe it isn&amp;rsquo;t a coincidence that a calendar resembles a chessboard; to carry the metaphor a little further, the way I&amp;rsquo;ve been using my time feels more like I&amp;rsquo;ve just been pushing pawns around willy-nilly, rather than playing strategic moves that get me to a win.&lt;/p&gt;
&lt;p&gt;So, yeah. Being more deliberate with what I do means thinking more strategically about what I &lt;em&gt;can&lt;/em&gt; do. I&amp;rsquo;ve come to realize that my actions broadly fall in one of two categories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The administrivia of everyday life:&lt;/strong&gt; This includes the various one-off and/or recurring tasks that I can&amp;rsquo;t forget, like checking the fire extinguisher, doing dishes and laundry, and other things you&amp;rsquo;d find on single-action lists, as well as the meta-type projects that keep things on track, like doing a retrospective and planning session every week. I also include tracking lists like things to read, things to shop for, and so on in this category.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Goal-focused projects:&lt;/strong&gt; These are the bigger projects focused on a very specific outcome. Until now, these are things that I&amp;rsquo;ve been throwing into OmniFocus willy-nilly with aspirational intent, and that&amp;rsquo;s not been working for me. One major thing I&amp;rsquo;m addressing this year is setting a timeframe for projects. Not a due date, per se, but rather defining when I want to work on things. To that end, I&amp;rsquo;ve created a nested folder structure in OmniFocus into which I&amp;rsquo;ll arrange my projects:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;📂 Administrivia
  📂 Meta/Maintenance
  📂 Single-Action Lists
  📂 Tracking Lists
📂 Projects
  📂 Someday/Maybe
  📂 Do this year
    📂 Do in H1
      📂 Do in Q1
        📂 Do in January
        📂 Do in February
        📂 Do in March
      📂 Do in Q2
        📂 Do in April
        📂 Do in May
        📂 Do in June
    📂 Do in H2
      📂 Do in Q3
        📂 Do in July
        📂 Do in August
        📂 Do in September
      📂 Do in Q4
        📂 Do in October
        📂 Do in November
        📂 Do in December
  📂 Do next year
  📂 Do in 3-5 years
  📂 Do in 5+ years
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This makes more sense to me over trying to define stuff as &lt;em&gt;Personal&lt;/em&gt;, &lt;em&gt;Business&lt;/em&gt;, &lt;em&gt;Hobbies&lt;/em&gt;, &amp;amp;cet. — after all, if it affects my life, it&amp;rsquo;s personal. Rather, this gives me a better visual representation of how much I&amp;rsquo;m packing into any given period of time. It&amp;rsquo;s fine to punt from one period to another, but the key is to recognize that I only have so much time available to do things; unless &amp;ldquo;the move makes sense on the chessboard,&amp;rdquo; if you will, it remains an idea in my &lt;em&gt;Someday/Maybe&lt;/em&gt; list, which can act as kind of a project backlog.&lt;/p&gt;
&lt;p&gt;Projects will be added to the appropriate folder depending on how long I expect it will take to do it; in other words, if I think I can get a project done in a month, I&amp;rsquo;ll add it to a month folder (e.g., &lt;em&gt;Do in February&lt;/em&gt;). If it&amp;rsquo;ll take three months or less, I&amp;rsquo;ll add it to the appropriate quarter (e.g., &lt;em&gt;Do in Q2&lt;/em&gt;). Six months or less, and the project goes in the appropriate half (e.g., &lt;em&gt;Do in H2&lt;/em&gt;). And anything that I expect will take the entire year will go in &lt;em&gt;Do this year&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This also gives me a better way to track progress against short-term (current/next year), medium-term (3-5 years), and long-term (5+ years) goals. So, if we have a goal of, say, visiting Japan in 2021, I&amp;rsquo;ll add that project to the &lt;em&gt;Do in 3-5 years&lt;/em&gt; folder, and as time moves forward I can see how I&amp;rsquo;m progressing during my weekly reviews; eventually this project will be moved to the &lt;em&gt;Do next year&lt;/em&gt; folder, and then somewhere in &lt;em&gt;Do this year&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll revisit how this is going for me every quarter, what changes I may have made, and what I&amp;rsquo;ve noticed, but I&amp;rsquo;m already feeling happy with how many stale projects have been dumping back into my &lt;em&gt;Someday/Maybe&lt;/em&gt; list, how many were dropped, and the outline of the year that&amp;rsquo;s beginning to unfold before my eyes.&lt;/p&gt;
&lt;p&gt;More tk.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Annual Review 2018</title>
      <link>https://angelostavrow.com/post/annual-review-2018/</link>
      <pubDate>Fri, 28 Dec 2018 10:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/annual-review-2018/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re coming to the end of the year, a time when I can’t help but look back at how the year went and reflect on my wins, losses, and lessons learned.&lt;/p&gt;
&lt;p&gt;I set some &lt;a href=&#34;https://angelostavrow.com/post/twelve-for-2018/&#34;&gt;goals for 2018&lt;/a&gt; at the beginning of the year; I’m somehow not surprised that I failed to meet most of them.&lt;/p&gt;
&lt;h2 id=&#34;what-went-well&#34;&gt;What went well?&lt;/h2&gt;
&lt;p&gt;I did more writing than last year, and I did manage to rework my personal site. I even shipped a new open-source project as part of that effort, my &lt;a href=&#34;https://angelostavrow.com/post/introducing-indigo/&#34;&gt;first from-scratch Hugo theme&lt;/a&gt;. That was a lot of fun!&lt;/p&gt;
&lt;p&gt;I shifted the bulk of the work I do, too, from a support-focused role to a more dev-focused role. That&amp;rsquo;s worked out better than I could have hoped.&lt;/p&gt;
&lt;h2 id=&#34;what-could-have-gone-better&#34;&gt;What could have gone better?&lt;/h2&gt;
&lt;p&gt;A good chunk of the year was spent feeling anxious about what&amp;rsquo;s next. This stole a lot of energy that I would have liked to have used for building things, learning new things, and coming back to old hobbies.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also been suffering from tendon pain in both my right foot and left hand for well over a year now, which seemed to get especially bad as I was working towards my physical goals.&lt;/p&gt;
&lt;h2 id=&#34;what-have-i-learned&#34;&gt;What have I learned?&lt;/h2&gt;
&lt;p&gt;I learned quite a few things this year.&lt;/p&gt;
&lt;p&gt;The first is that, well, it&amp;rsquo;s pretty important to reflect on how you&amp;rsquo;re doing. It&amp;rsquo;s hard to make progress if you&amp;rsquo;re not taking a look at your attempts to evaluate what worked and what didn&amp;rsquo;t. Retrospectives like this help you course-correct to maintain some kind of forward progress in your projects.&lt;/p&gt;
&lt;p&gt;The second thing is that it&amp;rsquo;s really hard to make progress on a goal if you don&amp;rsquo;t understand how it aligns with your own personal identity. Jocelyn K. Glei discussed the idea of &amp;ldquo;tender discipline&amp;rdquo; in a &lt;a href=&#34;https://hurryslowly.co/203-jocelyn-k-glei/&#34;&gt;recent episode of her &lt;em&gt;Hurry Slowly&lt;/em&gt; podcast&lt;/a&gt;, and the question that titled the show really spoke to me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Who are you without the doing?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Similarly, James Clear&amp;rsquo;s book &lt;a href=&#34;https://jamesclear.com/atomic-habits&#34;&gt;&lt;em&gt;Atomic Habits&lt;/em&gt;&lt;/a&gt; introduced the idea of building habits around your identity; once you understand who you want to be, you can better create habits that reinforce that when the going gets tough and your motivation is drained.&lt;/p&gt;
&lt;p&gt;That, then, is what I&amp;rsquo;ve been thinking about a lot lately. Who am I without the doing? What is my identity? Given that, where does it make sense to focus my time and attention?&lt;/p&gt;
&lt;p&gt;These are the things I&amp;rsquo;m thinking about these days, and that&amp;rsquo;s what I want to take with me into the new year. I have some ideas that aren&amp;rsquo;t yet fully-baked, but we&amp;rsquo;re going to get there. And it doesn&amp;rsquo;t have to all be in place for January 1&lt;sup&gt;st&lt;/sup&gt;, but it does have to &lt;em&gt;fit&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Next Chapter 🎏</title>
      <link>https://angelostavrow.com/post/the-next-chapter/</link>
      <pubDate>Thu, 01 Nov 2018 08:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/the-next-chapter/</guid>
      <description>&lt;p&gt;Yesterday marked the end of my time working on &lt;a href=&#34;https://manuscript.com&#34;&gt;Manuscript&lt;/a&gt;, as the transition of the product over to its new owner is complete. With that, I&amp;rsquo;d been looking for a new contract, and today I&amp;rsquo;m happy to announce that I&amp;rsquo;ll be joining the team at &lt;a href=&#34;https://glitch.com/about/&#34;&gt;Glitch&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&#34;glitch&#34;&gt;Glitch?&lt;/h2&gt;
&lt;p&gt;Glitch is the friendly community where you&amp;rsquo;ll build the app of your dreams. Born at Fog Creek Software, the company has gone all-in on making Glitch the most creative and supportive community on the web — and &lt;a href=&#34;https://medium.com/glitch/fog-creek-is-now-glitch-5a57dab604e3&#34;&gt;changed its name&lt;/a&gt; to reflect this focus.&lt;/p&gt;
&lt;p&gt;While the role is still evolving, my mandate at Glitch as Customer Success Engineer will be to enhance the customer/developer experience for partners and &lt;a href=&#34;https://glitch.com/teams/&#34;&gt;Teams&lt;/a&gt; customers, scoping out projects and building apps to educate and inspire. I&amp;rsquo;m really excited about this!&lt;/p&gt;
&lt;h2 id=&#34;parting-is-sweet-sorrow&#34;&gt;Parting is sweet sorrow&lt;/h2&gt;
&lt;p&gt;For all my excitement, yesterday felt bittersweet. The Manuscript team that I&amp;rsquo;d been working with for the last year and a half is an amazing group of brilliant, thoughtful people, and I&amp;rsquo;m really going to miss them. In the Fog Creek tradition, I know they&amp;rsquo;re going to do amazing things, and I count them not only as incredible teammates, but good friends. Best of luck to you all!&lt;/p&gt;
&lt;h2 id=&#34;things-ive-learned&#34;&gt;Things I&amp;rsquo;ve learned&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve realized that as much as I need to build things, I also really enjoy working in a customer-facing role. A lot of my work with the Manuscript team was focused on the support side, which was great! I love helping people figure out how to do their best work.&lt;/p&gt;
&lt;p&gt;But the tasks I really enjoyed —and want to get better at— were the professional services I got to work on. These were varied, from scripting against the API to help customers migrate account data or integrate their own systems, to working with JavaScript customizations to adapt Manuscript&amp;rsquo;s UI to a customer&amp;rsquo;s needs, to adding features to the codebase — and all were a great learning experience.&lt;/p&gt;
&lt;p&gt;And sure, part of that learning was about writing cleaner and high-performance code, but it was also about understanding how to scope out work based on a customer&amp;rsquo;s needs, managing projects, and promoting effective and empathetic communication between all stakeholders.&lt;/p&gt;
&lt;p&gt;This new position is going to take what I&amp;rsquo;ve learned to the next level, which is awesome!&lt;/p&gt;
&lt;h2 id=&#34;what-i-want-for-glitch&#34;&gt;What I want for Glitch&lt;/h2&gt;
&lt;p&gt;Glitch is growing (over 1 million projects have been created, a number that still blows my mind), and I&amp;rsquo;m really excited to see what happens next. I have a lot of big dreams for the platform (which may or may not be shared by the team as a whole, and in no way reflect their current plans); here are a few things I&amp;rsquo;d personally love to see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/glitch/remix-in-spaaaace-434c21847a81&#34;&gt;&amp;ldquo;Remix me on Glitch&amp;rdquo;&lt;/a&gt; becomes the new &amp;ldquo;Fork me on GitHub&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://glitch-embed.glitch.me&#34;&gt;Glitch embeds&lt;/a&gt; become a de facto standard for live, running code in API documentation&lt;/li&gt;
&lt;li&gt;Glitch becomes the go-to in classrooms and hackathons alike&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;rsquo;s a lot of work to do, and I&amp;rsquo;m looking forward to rolling up my shirtsleeves and helping make Glitch &lt;em&gt;the&lt;/em&gt; fun and safe place to create and learn on the web.&lt;/p&gt;
&lt;p&gt;(But first, a few days off to recharge and reset!)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Stylin&#39; Sidebar.js in Glitch</title>
      <link>https://angelostavrow.com/post/styling-microblog-updates/</link>
      <pubDate>Sun, 28 Oct 2018 15:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/styling-microblog-updates/</guid>
      <description>&lt;p&gt;My main social network these days is &lt;a href=&#34;https://micro.blog/&#34;&gt;Micro.blog&lt;/a&gt;, where I post short updates, thoughts, and images, then syndicate those posts out to the big social media silos. I have a hosted blog on the Micro.blog service for this, but because I want this site to be the canonical source for &lt;em&gt;all things Angelo&lt;/em&gt;, I wanted to pull in that content here.&lt;/p&gt;
&lt;p&gt;If, like me, you use a &lt;a href=&#34;https://gohugo.io&#34;&gt;static site generator&lt;/a&gt; to build this site, you have to dynamically build a page on load with the latest updates. To do so, you can &lt;a href=&#34;http://help.micro.blog/2016/sidebar-js/&#34;&gt;call some JavaScript from Micro.blog&lt;/a&gt;, which is exactly what I do on my &lt;a href=&#34;https://angelostavrow.com/updates/&#34;&gt;updates&lt;/a&gt; page. That’ll dump a bunch of unstyled content into your site, so I had to add some custom CSS to have it fit in with the rest of the site’s theme.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://micro.blog/crossingthethreshold/956021&#34;&gt;I was asked for a tutorial on doing this&lt;/a&gt;, so I built out a quick little playground in Glitch with some comments in the &lt;code&gt;style.css&lt;/code&gt; file to show how I’ve done this.&lt;/p&gt;
&lt;div class=&#34;glitch-embed-wrap&#34; style=&#34;height: 420px; width: 100%;&#34;&gt;
  &lt;iframe src=&#34;https://glitch.com/embed/#!/embed/microblog-sidebarjs-css?path=README.md&#34; alt=&#34;microblog-sidebarjs-css on glitch&#34; style=&#34;height: 100%; width: 100%; border: 0;&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;If you want your own copy of the playground, hit the Remix button and have a look at the README and CSS files for some guidance!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Thoughts On Indigo, Two Weeks Later</title>
      <link>https://angelostavrow.com/post/os-project-thoughts/</link>
      <pubDate>Sun, 21 Oct 2018 11:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/os-project-thoughts/</guid>
      <description>&lt;p&gt;While v1.0 of my first Hugo theme, Indigo, was &lt;a href=&#34;https://angelostavrow.com/post/introducing-indigo/&#34;&gt;released two weeks ago&lt;/a&gt;, it was only added to the &lt;a href=&#34;https://themes.gohugo.io/indigo/&#34;&gt;Hugo themes gallery&lt;/a&gt; (and &lt;a href=&#34;https://twitter.com/GoHugoIO/status/1051911902966763521&#34;&gt;tweeted about&lt;/a&gt; from the Hugo account) five days ago. Since then, I&amp;rsquo;ve learned a couple of things that I thought I&amp;rsquo;d share.&lt;/p&gt;
&lt;h2 id=&#34;test-test-test&#34;&gt;Test, Test, Test&lt;/h2&gt;
&lt;p&gt;This is kinda obvious, but Indigo shipped with a shockingly silly bug. My assumption was that the Hugo site would always be setup at the site root, rather than in a subdirectory. The result of this is that some assets are referenced from the site root too; for example, if your site is at &lt;code&gt;example.com/blog&lt;/code&gt; the request will 404 on page load, meaning that the resource can&amp;rsquo;t be found — the HTML will be set up to load the fonts from &lt;code&gt;example.com/fonts&lt;/code&gt;, but they&amp;rsquo;ll &lt;em&gt;actually&lt;/em&gt; live at &lt;code&gt;example.com/blog/fonts&lt;/code&gt; and therefore won&amp;rsquo;t load properly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson learned #1:&lt;/strong&gt; Well, you know what they say about assumptions. I built the theme for my own use, and then didn&amp;rsquo;t test it against other scenarios. This is such an egregious mistake when building stuff for people that I feel really silly having made it.&lt;/p&gt;
&lt;p&gt;Worse, the auto-generated demo site in the theme gallery also runs from a subdirectory, so naturally all those wonderful fonts are nowhere to be found.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson learned #2:&lt;/strong&gt; you can (and should) actually build the theme gallery and see how your theme will work &lt;em&gt;before&lt;/em&gt; you submit it. I&amp;rsquo;m adding that step to my testing workflow for future work on the theme.&lt;/p&gt;
&lt;h2 id=&#34;open-source-is-about-clear-communication&#34;&gt;Open source is about clear communication&lt;/h2&gt;
&lt;p&gt;Within a day or two of being added to the gallery, I had contributions! &lt;a href=&#34;https://github.com/sauerj&#34;&gt;Jens Sauer&lt;/a&gt; opened a reported a few issues (including the one I referenced above) and opened a couple of pull requests.&lt;/p&gt;
&lt;p&gt;This was super cool! Nothing I&amp;rsquo;ve released before really attracted the attention of others, so I was excited. It also made me realize that there&amp;rsquo;s a lot of value in being very clear about contributions, using issue and PR templates in GitHub, and generally making the process as friction-free and easy for people to help improve your project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson learned #3:&lt;/strong&gt; While there is &lt;a href=&#34;https://github.com/AngeloStavrow/indigo/blob/master/CONTRIBUTING.md&#34;&gt;a &lt;code&gt;CONTRIBUTING&lt;/code&gt; document&lt;/a&gt; in the repository, I feel that it&amp;rsquo;s not as well fleshed-out as it could be—probably because I wasn&amp;rsquo;t really expecting anyone to actually, you know, &lt;em&gt;contribute&lt;/em&gt;. I&amp;rsquo;ve &lt;a href=&#34;https://github.com/AngeloStavrow/indigo/issues/28&#34;&gt;opened an issue&lt;/a&gt; to fix that.&lt;/p&gt;
&lt;h2 id=&#34;its-still-scary&#34;&gt;It&amp;rsquo;s still scary&lt;/h2&gt;
&lt;p&gt;This isn&amp;rsquo;t the first thing I&amp;rsquo;ve made and released to the public, open-source or not, and it&amp;rsquo;s far from being the most complex. It&amp;rsquo;s just a fun side little project, built mostly in HTML and CSS.&lt;/p&gt;
&lt;p&gt;And yet — it was scary.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not sure it ever stops being scary. Maybe it just gets a bit easier to intercept the fear and react a little more appropriately. So.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson learned #4:&lt;/strong&gt; I&amp;rsquo;m not really sure. Don&amp;rsquo;t be afraid of the fear, I guess.&lt;/p&gt;
&lt;!-- Link references --&gt;</description>
    </item>
    
    <item>
      <title>Introducing Indigo</title>
      <link>https://angelostavrow.com/post/introducing-indigo/</link>
      <pubDate>Sat, 06 Oct 2018 11:44:57 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/introducing-indigo/</guid>
      <description>&lt;p&gt;Indigo is a lightweight theme for &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; with &lt;a href=&#34;https://indieweb.org/&#34;&gt;IndieWeb&lt;/a&gt; features baked in. It&amp;rsquo;s great for longer-form blogging, placing its focus on distraction-free reading and beautiful typefaces.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been working on this theme since August, when I relaunched this site as a blog using a pre-release version of the theme. I&amp;rsquo;m happy to say that it&amp;rsquo;s finally &lt;a href=&#34;https://github.com/AngeloStavrow/indigo&#34;&gt;ready for public release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/2018-10-06/tn.png&#34; alt=&#34;&amp;ldquo;Screenshot of indigo theme&amp;rdquo;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(My own site runs a custom fork of Indigo—mostly custom CSS—but I&amp;rsquo;ve yet to update it with all the goodies from the official version. Cobbler&amp;rsquo;s kids, and all that.)&lt;/p&gt;
&lt;h2 id=&#34;indieweb-features&#34;&gt;IndieWeb features&lt;/h2&gt;
&lt;p&gt;A key feature of this theme is its support for IndieWeb features, including microformats and web sign-in.&lt;/p&gt;
&lt;h3 id=&#34;web-sign-in&#34;&gt;Web sign-in&lt;/h3&gt;
&lt;p&gt;Indigo handles web sign-in by setting the &lt;code&gt;authorization_endpoint&lt;/code&gt; to &lt;a href=&#34;https://indieauth.com&#34;&gt;IndieAuth.com&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IndieAuth.com is part of the &lt;a href=&#34;https://indieweb.org/why&#34;&gt;IndieWeb movement&lt;/a&gt; to take back control of your online identity. Instead of logging in to websites as &amp;ldquo;you on Twitter&amp;rdquo; or &amp;ldquo;you on Facebook&amp;rdquo;, &lt;strong&gt;you should be able to log in as just &amp;ldquo;you&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This allows you to sign in to certain services simply by providing your site&amp;rsquo;s domain name.&lt;/p&gt;
&lt;h3 id=&#34;microformats&#34;&gt;microformats&lt;/h3&gt;
&lt;p&gt;Indigo marks up content with appropriate &lt;a href=&#34;http://microformats.org&#34;&gt;microformats&lt;/a&gt;, which provides semantic definitions of your content to other software. Posts are marked up with &lt;code&gt;h-entry&lt;/code&gt; classes, like &lt;code&gt;p-name&lt;/code&gt;, &lt;code&gt;p-author&lt;/code&gt;, and &lt;code&gt;e-content&lt;/code&gt;, while the author bio is marked up with &lt;code&gt;h-card&lt;/code&gt; classes, including &lt;code&gt;u-photo&lt;/code&gt;, &lt;code&gt;u-url&lt;/code&gt;, &lt;code&gt;p-locality&lt;/code&gt;/&lt;code&gt;p-country-name&lt;/code&gt;, and &lt;code&gt;p-note&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;open-typefaces&#34;&gt;Open typefaces&lt;/h2&gt;
&lt;p&gt;Indigo uses a combination of three beautiful typefaces to render your words.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bboxtype.com/typefaces/FiraSans/#!layout=specimen&#34;&gt;Fira Sans&lt;/a&gt; for heading text&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://practicaltypography.com/charter.html&#34;&gt;Charter&lt;/a&gt; for body text&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira Code&lt;/a&gt; for monospaced text&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Licenses are included in the theme’s &lt;code&gt;static/fonts&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;Have a look at a couple of paragraphs of placeholder text using the wonderfully readable Charter:&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer eleifend nulla ac elit venenatis posuere. Sed id aliquam arcu, et malesuada lectus. &lt;strong&gt;Donec et dignissim massa. Pellentesque in laoreet nibh. Pellentesque sagittis, libero quis vestibulum aliquam, ante risus imperdiet magna, at ornare dolor libero quis nunc.&lt;/strong&gt; Donec quis tempus purus. Cras ornare magna ac facilisis tristique. Nulla aliquet purus quis massa rutrum interdum ac at magna. Cras fermentum magna id orci viverra facilisis. Ut vitae lobortis nisl.&lt;/p&gt;
&lt;p&gt;Sed interdum tincidunt venenatis. Sed hendrerit dictum nisi, at dignissim orci consectetur quis. Aenean sed nisl et nisl placerat euismod. Proin hendrerit nulla at rhoncus molestie. Cras eu gravida erat, vestibulum ornare diam. &lt;em&gt;Praesent nunc arcu, ultrices et risus sed, dictum mattis dui. Maecenas vitae nisl at massa porta pellentesque&lt;/em&gt;. Donec eget urna eget nisl imperdiet scelerisque eget a mauris. Nam fringilla sem id vehicula rhoncus. Curabitur tincidunt massa mauris, facilisis placerat odio eleifend sit amet. Etiam nec vehicula sapien, at dignissim risus. Sed elit erat, lacinia eu vulputate at, semper eu nulla. Quisque a urna sed nulla viverra egestas nec quis nunc. Curabitur iaculis elit in orci sollicitudin suscipit.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;And code snippets look great with Fira Code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;article&amp;gt;
    &amp;lt;header&amp;gt;
    {{ if .Title }}
    &amp;lt;h2 class=&amp;quot;list-title&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
    {{ end }}
    &amp;lt;p class=&amp;quot;list-post-date&amp;quot;&amp;gt;
        &amp;lt;time datetime=&amp;quot;{{ .Date.Format &amp;quot;2006-01-02T15:04:05Z07:00&amp;quot; | safeHTML }}&amp;quot;&amp;gt;
        {{ .PublishDate.Format &amp;quot;2 January, 2006 at 15:04 MST&amp;quot; }}
        &amp;lt;/time&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;div&amp;gt;
    {{ .Summary | plainify | safeHTML }}
    &amp;lt;/div&amp;gt;
    {{ if .Truncated }}
    &amp;lt;p&amp;gt;&amp;lt;a class=&amp;quot;read-more&amp;quot; href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;Read more &amp;amp;rarr;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
    {{ end }}
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;contributions-welcome&#34;&gt;Contributions welcome&lt;/h2&gt;
&lt;p&gt;Indigo is distributed under the &lt;a href=&#34;https://github.com/AngeloStavrow/indigo/blob/master/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;, so feel free to fork the repository and make it your own! If you&amp;rsquo;ve got ideas on how to improve the theme, let me know by &lt;a href=&#34;https://github.com/AngeloStavrow/indigo/issues&#34;&gt;opening an issue in GitHub&lt;/a&gt; — but please be sure to review the documentation on &lt;a href=&#34;https://github.com/AngeloStavrow/indigo/blob/master/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zeus</title>
      <link>https://angelostavrow.com/post/zeus/</link>
      <pubDate>Tue, 25 Sep 2018 14:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/zeus/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/2018-09-25/zeus.jpg&#34; alt=&#34;&amp;ldquo;Zeus under the covers&amp;rdquo;&#34;&gt;&lt;/p&gt;
&lt;p&gt;We lost our little buddy one year ago today.&lt;/p&gt;
&lt;p&gt;He was the sweetest animal I&amp;rsquo;ve ever known. The thing I remember most about him: you barely had to say two words to him, and he&amp;rsquo;d start purring loudly, probably followed by him flopping onto his back for fluffy belly rubs.&lt;/p&gt;
&lt;p&gt;He was deeply loved for all of his fifteen years. I was around for eight of them, and they were wonderful. His patience and good nature made him a great first pet for me, and the love he had for us was pretty undeniable.&lt;/p&gt;
&lt;p&gt;One event in particular stands out in my memories: my wife smashed her knee into a wall, yelping in pain. Zeus came tearing into the room to check on her, gingerly trying to take her leg in his teeth to carry her away from danger, as a cat would do with a kitten.&lt;/p&gt;
&lt;p&gt;In his later years, Zeus began to suffer from hyperthyroidism and feline chronic renal failure. This was a long battle of frustration, going back and forth to the vet, taking blood tests to check levels, and adjusting medication to try to keep everything in check. We had to keep blankets on the couch to protect against the daily emesis; and let me tell you, giving a cat pills a couple of times a day isn&amp;rsquo;t much fun. But it bought us several years with him, and it was all worth it.&lt;/p&gt;
&lt;p&gt;Our home hasn&amp;rsquo;t quite been the same since he left us. I don&amp;rsquo;t know if we&amp;rsquo;re quite ready yet to bring another animal into our lives, but I can&amp;rsquo;t deny that there&amp;rsquo;s a cat-shaped hole in my heart today.&lt;/p&gt;
&lt;p&gt;I miss you, pokie. 🕯️&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Feedback Loops</title>
      <link>https://angelostavrow.com/post/feedback-loops/</link>
      <pubDate>Tue, 18 Sep 2018 09:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/feedback-loops/</guid>
      <description>&lt;p&gt;A feedback loop is system where the output is &lt;em&gt;fed back&lt;/em&gt; into the system as an input. They exist everywhere in nature, and they typically come in two flavours: positive feedback loops, which move things away from a state of equilibrium, and negative feedback loops, which work to preserve balance.&lt;/p&gt;
&lt;p&gt;Positive feedback loops amplify a reaction. It&amp;rsquo;s apple-picking season in the northeast &lt;a href=&#34;http://www.cheminst.ca/magazine/columns/apples-ethylene-gas-can-be-rotten-core&#34;&gt;because of positive feedback loops&lt;/a&gt;. When an apple ripens, it emits ethylene gas. When an unripened apple is exposed to ethylene, it starts to ripen, and so &lt;em&gt;it&lt;/em&gt; starts to emit ethylene, which makes other nearby apples start to ripen, and so on.&lt;/p&gt;
&lt;p&gt;Negative feedback acts to minimize the effect of some stimulus. Your body &lt;a href=&#34;https://www.scientificamerican.com/article/what-is-homeostasis/&#34;&gt;reacts to changes in ambient conditions&lt;/a&gt; to maintain a remarkably stable 37°C body temperature: when you&amp;rsquo;re warm, you sweat, and the evaporation of sweat on your skin cools you down; if you&amp;rsquo;re cold, you shiver, and this rapid expansion and contraction of the muscles warms you up.&lt;/p&gt;
&lt;p&gt;Such feedback loops also affect your outlook and your behaviour. We&amp;rsquo;re more likely to go on a shopping spree if we&amp;rsquo;ve &lt;a href=&#34;https://www.psychologytoday.com/ca/blog/pressure-proof/201701/how-the-what-the-hell-effect-impacts-your-willpower&#34;&gt;already overspent&lt;/a&gt; on our budget. We&amp;rsquo;re less likely to succeed at a goal simply by being &lt;a href=&#34;https://youarenotsosmart.com/2009/11/11/learned-helplessness/&#34;&gt;told often enough&lt;/a&gt; that we&amp;rsquo;re going to fail. Witnessing a &lt;a href=&#34;https://www.prnewswire.com/news-releases/kindnessorgoxford-university-studies-find-performing-acts-of-kindness-boosts-wellness-and-positive-social-emotions-300553155.html&#34;&gt;random act of kindness&lt;/a&gt; encourages others to be thoughtful.&lt;/p&gt;
&lt;p&gt;So maybe we can apply the principle of positive and negative feedback to feedback loops themselves.&lt;/p&gt;
&lt;p&gt;Can we identify other positive and negative feedback loops in our lives?&lt;/p&gt;
&lt;p&gt;Do we understand why they have a given effect on us?&lt;/p&gt;
&lt;p&gt;Can we use feedback loops selectively, to amplify the behaviours you want to cultivate, and control those you want to quash?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On risk</title>
      <link>https://angelostavrow.com/post/on-risk/</link>
      <pubDate>Sat, 15 Sep 2018 11:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-risk/</guid>
      <description>&lt;p&gt;Standing still is generally a safe bet. We don&amp;rsquo;t have to expend any energy, and we don&amp;rsquo;t have to concern ourselves much with the possible outcomes. We just stand there, and watch the world go by.&lt;/p&gt;
&lt;p&gt;Making progress is a little different. Making progress is risky.&lt;/p&gt;
&lt;p&gt;I was inspired by an &lt;a href=&#34;https://hurryslowly.co/004-kim-chambers/&#34;&gt;interview with marathon swimmer Kim Chambers on the Hurry Slowly podcast&lt;/a&gt; that made me think about why we don&amp;rsquo;t do things that seem risky, and why others don&amp;rsquo;t seem to struggle with it.&lt;/p&gt;
&lt;h2 id=&#34;fortune-favours-the-prepared&#34;&gt;Fortune favours the prepared&lt;/h2&gt;
&lt;p&gt;Right now, I&amp;rsquo;m working on adding a feature to FogBugz/Manuscript. When you&amp;rsquo;re working with a codebase this old, there&amp;rsquo;s naturally going to be some measure of risk involved. There are a lot of moving parts involved, some of which may not be especially well documented, spread out over hundreds of thousands of lines of code in several projects.&lt;/p&gt;
&lt;p&gt;So, as thoughtful developers, we work to minimize the risk involved by working with a process.&lt;/p&gt;
&lt;p&gt;The first step in a project like this is to clearly state the goal. That&amp;rsquo;s usually not especially hard: &amp;ldquo;add custom logging level&amp;rdquo; might be the goal.&lt;/p&gt;
&lt;p&gt;Next, &lt;a href=&#34;https://www.joelonsoftware.com/2000/10/03/painless-functional-specifications-part-2-whats-a-spec/&#34;&gt;we write a spec&lt;/a&gt;. Specs flesh out the project with more detail. If the goal is your destination, then the spec is route you map out to get you there. This isn&amp;rsquo;t a step to be taken lightly; you need to understand the requirements, the current implementation, the perils and pitfalls, and the non-goals. The more work you put into plotting the route, the less uncertainty you face when you start your trip.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are we doing right now? How do we do it?&lt;/li&gt;
&lt;li&gt;What do we want to add? Why?&lt;/li&gt;
&lt;li&gt;What do we want to avoid adding? Why?&lt;/li&gt;
&lt;li&gt;Where do we make these these changes?&lt;/li&gt;
&lt;li&gt;How do we make sure we don&amp;rsquo;t break things?&lt;/li&gt;
&lt;li&gt;Do we understand where the path gets tricky or dangerous?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have a destination and a route, you can start moving ahead.&lt;/p&gt;
&lt;h2 id=&#34;course-corrections&#34;&gt;Course corrections&lt;/h2&gt;
&lt;p&gt;Now, when we&amp;rsquo;re taking a road trip in an old car, we &lt;em&gt;could&lt;/em&gt; just jump in and go, but that&amp;rsquo;s ill advised. We probably want to check our tires and fuel, at a minimum. Did we bring enough music or podcasts to listen to? What about snacks? Okay, let&amp;rsquo;s take stock of that before we go.&lt;/p&gt;
&lt;p&gt;Okay, cool. Floor it. Full speed ahead, right?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nope.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We checked the weather forecast before we left, right? Not just at our destination, but at reasonable points along the way? Should we be concerned about that intermittent oil-pressure warning? That could be a faulty sensor, but maybe we should check the levels every so often.&lt;/p&gt;
&lt;p&gt;Making forward progress isn&amp;rsquo;t always about momentum. It&amp;rsquo;s also about preparation, planning, and checking in to see where we&amp;rsquo;re at.&lt;/p&gt;
&lt;p&gt;So when we&amp;rsquo;re working on this feature, we make a few little changes, one at a time, and examine what happens. Do our tests still pass? Are the results expected?&lt;/p&gt;
&lt;p&gt;Okay, we&amp;rsquo;re getting familiar with how this all works. Maybe we take a crack at a slightly bigger task. We write a big, messy function and a handful of new tests as an experiment — no big deal, because we&amp;rsquo;re committing your changes and can roll back to a known-good state, right?&lt;/p&gt;
&lt;p&gt;Build and test. The compiler yells at us. Okay, okay, let&amp;rsquo;s step through this in the debugger to see what&amp;rsquo;s happening. Okay, that property is undefined when we reference it. Why? Where does that happen? Got it. Let&amp;rsquo;s fix that.&lt;/p&gt;
&lt;p&gt;And so it continues. And we make progress, refactoring the messiness, getting changes reviewed by the team, and moving on to the next step. Maybe we need to update that spec. Maybe not.&lt;/p&gt;
&lt;p&gt;And eventually, we reach that goal. The feature is code complete. It&amp;rsquo;s in integration, tests are passing, and our hard work will be successfully deployed to production.&lt;/p&gt;
&lt;h2 id=&#34;stacking-the-deck&#34;&gt;Stacking the deck&lt;/h2&gt;
&lt;p&gt;Of course, this isn&amp;rsquo;t just a story about how to safely add a feature to legacy code. This is true of any goal that you might be having trouble with. Risk —whether perceived or real— is an impedement to progress, but much of it can be overcome, and setting yourself up for success is about how you chip away at that risk.&lt;/p&gt;
&lt;p&gt;Making forward progress towards a goal isn&amp;rsquo;t guaranteed by rushing headlong at a problem with boundless enthusiam and a devil-may-care attitude. It&amp;rsquo;s about the cycle of &lt;a href=&#34;https://en.wikipedia.org/wiki/PDCA&#34;&gt;planning, doing, checking, and adjusting&lt;/a&gt;. It&amp;rsquo;s about exploring the boundaries of what we know, and testing what we &lt;em&gt;think&lt;/em&gt; we know, slowly but surely casting the light of understanding into the dark corners of our ignorance.&lt;/p&gt;
&lt;p&gt;And the more we do it, the better we get at understanding how artificial the limits we place on ourselves really are.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Every Day Carry</title>
      <link>https://angelostavrow.com/post/every-day-carry/</link>
      <pubDate>Sun, 02 Sep 2018 07:18:47 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/every-day-carry/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/2018-09-02/rhodia.jpeg&#34; alt=&#34;&amp;ldquo;Rhodia A7 notebook with Fisher Bullet space pen&amp;rdquo;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since mid-February, a notebook has become a big part of my productivity system. There&amp;rsquo;s something about putting pen to paper that&amp;rsquo;s inherently more satisfying to me than poking at keys to make characters appear on a screen. Over six months later, I&amp;rsquo;m still writing in it daily.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t carry my notebook with me everywhere, though. I carry very little with me, in fact: my phone, wallet, and my keys (and really, only the keys that I need). There&amp;rsquo;s something about the encumbrance of carrying a lot of stuff that irritates me.&lt;/p&gt;
&lt;p&gt;On Friday, however, I picked up a &lt;a href=&#34;https://rhodiapads.com/collections_classic_stapled_A7.php&#34;&gt;Rhodia A7 notebook&lt;/a&gt; for a couple of bucks. It&amp;rsquo;s quite small and, paired with a &lt;a href=&#34;https://www.spacepen.com/400BCL-matteblackbulletspacepenwithclip.aspx&#34;&gt;Fisher Bullet space pen&lt;/a&gt;, adds very little bulk to my pockets. The first thing I did was completely deface the first page with random lines and scrawl a note to myself on a moving train:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There — now you can use this notebook.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve carried it with me for only one full day and I&amp;rsquo;ve already filled a couple of pages with some notes based on a phrase I heard.&lt;/p&gt;
&lt;p&gt;Now, I could have just as easily captured that phrase in my phone. I&amp;rsquo;m not sure that the rest of my thoughts on the idea, however, would have flowed as easily. I find that there&amp;rsquo;s something inherently more frictionless with putting ideas into a scrappy little book; it&amp;rsquo;s a very free-form medium, devoid of any requirements for line spacing or margins.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know if transcribing notes to my main notebook will get annoying. Or if that&amp;rsquo;s even necessary, really. And despite the small size, it &lt;em&gt;is&lt;/em&gt; one more physical thing (well, two, if you count the pen) that I have to carry around, and I do notice it.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not sure if this new habit will take, but so far it&amp;rsquo;s off to a good start.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Glitch Project Name Lottery</title>
      <link>https://angelostavrow.com/post/glitch-project-name-lottery/</link>
      <pubDate>Tue, 21 Aug 2018 05:45:07 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/glitch-project-name-lottery/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://glitch.com&#34;&gt;Glitch&lt;/a&gt; creates randomized project names when you remix a project, and they look something like &lt;code&gt;adjective-noun.glitch.me&lt;/code&gt;. You can always rename these later, but oftentimes they’re just too amusing to bother (I’m looking at you, &lt;code&gt;victorious-beer&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;So, what if you decided that you were going to remix the node starter app, and then had to spend a couple of hours building an app based purely on the random name you were assigned?&lt;/p&gt;
&lt;p&gt;Well, you’d end up with something like &lt;a href=&#34;https://glitch.com/~therapeutic-caribou&#34;&gt;Therapeutic Caribou&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’d been poking at &lt;a href=&#34;https://textblob.readthedocs.io/en/dev/&#34;&gt;TextBlob&lt;/a&gt; in Python over the weekend. Why not find an npm module that handles sentiment analysis to create a little app that takes in what you’re saying and replies based on how positive or negative the sentiment is. I’m using the &lt;a href=&#34;http://winkjs.org/wink-sentiment/&#34;&gt;wink-sentiment&lt;/a&gt; module to do this in analyzer.js, but it should be fairly easy to swap out any other analysis module in the &lt;code&gt;rankSentiment()&lt;/code&gt;  function.&lt;/p&gt;
&lt;p&gt;And while we’re at it, why not make it so that you’re just talking to the web app, rather than typing? I’ve been working through Wes Bos’ &lt;a href=&#34;https://javascript30.com&#34;&gt;JavaScript30&lt;/a&gt; course and, as luck would have it, just went through the native &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition&#34;&gt;SpeechRecognizer&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;Given that this is something that I threw together in a couple of hours, it’s very far from complete — our therapeutic caribou is a pretty lousy conversationalist, there are a couple of bugs around SpeechRecognizer events, and the design is… well, pretty unpleasant. Additionally, I’ve only tested this in Chrome, so I have no idea if it works as expected in other browsers.&lt;/p&gt;
&lt;p&gt;With all that said, it was still a lot of fun to throw something together that let me play with a bit of both client- and server-side JavaScript, some neat native technologies like SpeechRecognizer, and some interesting concepts like sentiment analysis.&lt;/p&gt;
&lt;p&gt;If you try playing the Glitch Project Name Lottery, let me know what you come up with!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>And we&#39;re back</title>
      <link>https://angelostavrow.com/post/and-were-back/</link>
      <pubDate>Sun, 12 Aug 2018 15:30:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/and-were-back/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been almost four months since I last wrote something. I&amp;rsquo;ve been pretty busy over the last little while completely overhauling this site, and there are a few changes that I&amp;rsquo;d like to point out.&lt;/p&gt;
&lt;p&gt;From here on out, this will be the home of my personal blog. All article from &lt;a href=&#34;http://makebeforebreak.com/&#34;&gt;Make Before Break&lt;/a&gt; have been imported here; any new long-form writing will be posted to this site, and here only.&lt;/p&gt;
&lt;p&gt;Short updates will continue to be posted to my &lt;a href=&#34;https://angelo.micro.blog/&#34;&gt;microblog&lt;/a&gt;, which is syndicated to &lt;a href=&#34;https://twitter.com/AngeloStavrow&#34;&gt;my Twitter account&lt;/a&gt;. I generally reply to anyone who &lt;code&gt;@&lt;/code&gt;-mentions me on either service, but I tend to spend more time in my RSS reader than my Twitter timeline.&lt;/p&gt;
&lt;p&gt;This site runs a custom-built &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; theme I built. I based this theme on some &lt;a href=&#34;../../philosophy.txt&#34;&gt;beliefs&lt;/a&gt; about what a website should be like in 2018. The work here isn&amp;rsquo;t quite done yet, so please let me know if you see anything amiss. You can find out more about this on &lt;a href=&#34;../../about&#34;&gt;the about page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it for now!&lt;/p&gt;
&lt;!--references--&gt;</description>
    </item>
    
    <item>
      <title>Messy Journeys and Scruffy Role Models</title>
      <link>https://angelostavrow.com/post/messy-journeys-and-scruffy-role-models/</link>
      <pubDate>Wed, 18 Apr 2018 08:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/messy-journeys-and-scruffy-role-models/</guid>
      <description>&lt;p&gt;Tell me if any of this sounds familiar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why am I having such a hard time with this? What&amp;rsquo;s wrong with me?&lt;/li&gt;
&lt;li&gt;Maybe I’m not smart enough to do this.&lt;/li&gt;
&lt;li&gt;People hired me to do this work, but I&amp;rsquo;m never going to figure this out. I&amp;rsquo;m a fraud.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are at least a couple of common threads with these statements, but I think the most interesting one is that each of these statements is an implicit comparison that I&amp;rsquo;m making between myself and someone that&amp;rsquo;s, y&amp;rsquo;know, good at what they do.&lt;/p&gt;
&lt;p&gt;And when you&amp;rsquo;re trying something new, it can be really hard to remember that you&amp;rsquo;re &lt;em&gt;trying something new&lt;/em&gt;. We approach new things with expectations, adn we typically want to feel smart, we want to believe that we&amp;rsquo;re good at stuff. Eventually, though, Reality pops in for a visit to remind us that we haven&amp;rsquo;t done this before.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Sorry to rain on your parade there, but this&amp;hellip; this isn&amp;rsquo;t going to be a cakewalk for you. Here, have a brick wall!&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And when you run face-first into a brick wall you feel, well, not very smart. Someone else would have noticed that wall. I don&amp;rsquo;t know what I&amp;rsquo;m doing.&lt;/p&gt;
&lt;p&gt;Desirae Odjick wrote a great article at Half Banked on &lt;a href=&#34;https://www.halfbanked.com/learning-about-money/&#34;&gt;learning about money&lt;/a&gt; that I think touches a bit on this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“What makes you feel confident with money?”&lt;/p&gt;
&lt;p&gt;There’s a lot I could say about it, including that building knowledge over time has been helpful, as has seeking out both expert opinions and people “in real life” who are willing to be open with me about it.&lt;/p&gt;
&lt;p&gt;But I did that over ten years, at different paces based on where I was in my life. “Start ten years ago,” isn’t exactly the most actionable advice out there, ya know?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I&amp;rsquo;m tackling something new, it often feels like I have &lt;em&gt;so much&lt;/em&gt; catching up to do. And, sure, if the best time to start was ten years ago, &lt;a href=&#34;https://www.psychologytoday.com/us/blog/joy-and-pain/201504/the-best-time-plant-tree-was-20-years-ago-no-matter&#34;&gt;the second best time to start is right now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But here&amp;rsquo;s the thing with comparing yourself to a ten-year veteran in the field, or comparing your first app to stuff that&amp;rsquo;s won Apple Design Awards or whatever.&lt;/p&gt;
&lt;p&gt;They’re not real.&lt;/p&gt;
&lt;p&gt;Not &lt;em&gt;really&lt;/em&gt;, anyways — at least not outside of the reality you create for them in your head.&lt;/p&gt;
&lt;p&gt;Building up the confidence to &lt;em&gt;just get started&lt;/em&gt; on something new is hard, and it&amp;rsquo;s &lt;em&gt;especially&lt;/em&gt; hard when you&amp;rsquo;re comparing yourself to other folks that have years of experience doing what you&amp;rsquo;re struggling to learn.&lt;/p&gt;
&lt;p&gt;And so in your augmented reality that you create for these experts and the fruits of their labour, you can&amp;rsquo;t see the ten years of hard work. The string of failures. The moments of self-doubt and being on the precipice of giving up.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why, when it comes to learning, &lt;a href=&#34;https://medium.com/glitch/celebrating-the-creative-process-warts-and-all-342336679d19&#34;&gt;it&amp;rsquo;s nice to see a map of the whole confused, messy journey&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The slick, polished look of the app and its refactored, tidied-up codebase doesn’t tell the real story about how it was created. It skips the hours spent digging into that elusive bug, the time stuck while crafting a particularly tricky piece of logic, and the endless UI tweaks to get it looking just right.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You company&amp;rsquo;s engineering journal on all the cool things that went into your 1.0? That&amp;rsquo;s awesome. Your slick and polished app? Amazing. Your talk on best practices for using, I dunno, whatever JavaScript framework is cool these days? Inspirational.&lt;/p&gt;
&lt;p&gt;But when I sit down to try my hand at creating something, it&amp;rsquo;s comforting to have seen that great things aren’t just &lt;em&gt;born that way&lt;/em&gt;. Seeing the gaffes and the dead-end experiments that didn&amp;rsquo;t make it into the final artifact is reassuring: when they happen to you, they feel less like failures, less like monumental wastes of time, and more like a part of the learning process.&lt;/p&gt;
&lt;p&gt;And therein lies the rub, the disconnect: we talk up the value of learning from others&amp;rsquo; mistakes, and then put in all kinds of effort to scrub clean that which we put out into the world.&lt;/p&gt;
&lt;p&gt;Maybe that&amp;rsquo;s doing us all a disservice. Maybe that&amp;rsquo;s to be expected in an age where we focus on social &lt;em&gt;media&lt;/em&gt; over &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Social_learning_theory&#34;&gt;social &lt;em&gt;learning&lt;/em&gt;&lt;/a&gt;, but maybe we can do better —and &lt;em&gt;get&lt;/em&gt; better— by being a little bit less perfect.&lt;/p&gt;
&lt;!-- Reference links --&gt;
</description>
    </item>
    
    <item>
      <title>App Store Reviews in Manuscript</title>
      <link>https://angelostavrow.com/post/app-store-reviews-in-manuscript/</link>
      <pubDate>Tue, 13 Mar 2018 04:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/app-store-reviews-in-manuscript/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve got some iOS apps as side projects (they&amp;rsquo;re in dire need of updates, but that&amp;rsquo;s neither here nor there). To keep things organized, I use a &lt;a href=&#34;https://manuscript.com&#34;&gt;Manuscript&lt;/a&gt; (&lt;em&gt;née&lt;/em&gt; FogBugz) account that I opened six years ago for planning work and, more relevant to this post, to capture (almost) all customer feedback. There&amp;rsquo;s a custom mailbox set up with an email address in my business domain, to which customers can send questions and comments about the apps.
These emails generate cases that I use for correspondence, and I can then open feature requests, bug reports, and known issues as linked cases in the relevant project.&lt;/p&gt;
&lt;p&gt;I say &amp;ldquo;almost&amp;rdquo; all customer feedback, though, because not everything gets captured in Manuscript.&lt;/p&gt;
&lt;p&gt;What’s missing? You don&amp;rsquo;t get notification emails from Apple for new App Store reviews, so I can&amp;rsquo;t pipe these into Manuscript. Wouldn&amp;rsquo;t that be nice? Instead, you have to check for new reviews manually, across App Stores in all countries where your app is sold, or rely on yet another service. I don&amp;rsquo;t know about you, but I&amp;rsquo;ve got enough inboxes to deal with.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&#34;https://medium.com/make-better-software/how-to-get-started-making-manuscript-integrations-6da236b68f98&#34;&gt;Manuscript integrations&lt;/a&gt;, powered by &lt;a href=&#34;https://glitch.com&#34;&gt;Glitch&lt;/a&gt;. At their core, integrations let you create microservices in Glitch that communicate between Manuscript and some external service.&lt;/p&gt;
&lt;p&gt;And thus came the idea for this project: since every app on the App Store (and Mac App Store) has an RSS feed of its reviews, I could create an integration that checks your app’s feed and, if there’s something new, pull it into a new case in Manuscript.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll be working on this in &lt;a href=&#34;https://glitch.com/~app-store-reviews-in-manuscript&#34;&gt;Glitch&lt;/a&gt;, and tracking it in &lt;a href=&#34;https://github.com/AngeloStavrow/app-store-reviews-in-manuscript&#34;&gt;GitHub&lt;/a&gt;. As of the time of this writing, the Glitch project is just a remix of the &lt;a href=&#34;https://glitch.com/edit/#!/hello-manuscript&#34;&gt;sample Manuscript integration&lt;/a&gt;, but the work has been planned out; I’ve set a release date of March 25&lt;sup&gt;th&lt;/sup&gt; for v1.0 of the integration, giving me two weeks to build and test the thing. While I’m not especially concerned about the ship date slipping, not having any ship date &lt;em&gt;at all&lt;/em&gt; usually means that a project doesn’t get any priority on my calendar.&lt;/p&gt;
&lt;p&gt;Last week was all about defining the project itself and the work to be undertaken, and this week is about getting started on the actual code. If you&amp;rsquo;re interested, you can read over the draft &lt;a href=&#34;https://github.com/AngeloStavrow/app-store-reviews-in-manuscript/wiki/functional-spec&#34;&gt;functional spec&lt;/a&gt; and &lt;a href=&#34;https://github.com/AngeloStavrow/app-store-reviews-in-manuscript/wiki/technical-spec&#34;&gt;technical spec&lt;/a&gt;. It&amp;rsquo;s open sourced under the MIT license. I’ll be working on this in the open, which I have feelings about (read: &lt;em&gt;anxiety and trepidation&lt;/em&gt;), and I’ve also set up a development journal in &lt;a href=&#34;http://dayoneapp.com&#34;&gt;Day One&lt;/a&gt;, where I add short weekly retrospectives on wins and losses for the week.&lt;/p&gt;
&lt;p&gt;More to come as I make progress against the milestone!&lt;/p&gt;
&lt;!-- Links --&gt;
</description>
    </item>
    
    <item>
      <title>Remote Work: Year One</title>
      <link>https://angelostavrow.com/post/remote-work-year-one/</link>
      <pubDate>Tue, 06 Mar 2018 05:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/remote-work-year-one/</guid>
      <description>&lt;p&gt;A couple of weeks ago, Julia Evans &lt;a href=&#34;https://jvns.ca/blog/2018/02/18/working-remotely--4-years-in/&#34;&gt;wrote a retrospective&lt;/a&gt; on what it’s been like working remotely that resonated with me, given that today is my one-year anniversary since taking a remote position. Since this is my first fully-remote job, taking some time to reflect on how things have gone seems like a good idea.&lt;/p&gt;
&lt;p&gt;Julia answered some great questions about working remotely, so I’ll do the same here.&lt;/p&gt;
&lt;h2 id=&#34;whats-scary-about-working-remote&#34;&gt;What’s scary about working remote?&lt;/h2&gt;
&lt;p&gt;Honestly, not very much, though that certainly depends on who you&amp;rsquo;re working for and your own comfort levels with all kinds of things. I&amp;rsquo;d worked from home a fair bit prior to going fully remote, so I knew I wouldn&amp;rsquo;t have issues with productivity. I thought there might be difficulty in bonding with colleagues, or missing out on the hallway and/or watercooler talk, but that hasn&amp;rsquo;t been a thing (more on that later).&lt;/p&gt;
&lt;p&gt;If there&amp;rsquo;s a downside, it&amp;rsquo;s that it&amp;rsquo;s really easy (for me, anyway) to slip into a place where I don&amp;rsquo;t leave the house and don&amp;rsquo;t get in any social interaction or physical activity. I have to force myself to be deliberate about those things now.&lt;/p&gt;
&lt;h2 id=&#34;whats-good-about-working-remote&#34;&gt;What’s good about working remote?&lt;/h2&gt;
&lt;p&gt;The number one benefit of working remotely is having the ability to focus. Oh, wow, is it ever awesome to be able to set yourself up with the perfect work environment, and know that you (for the most part) don&amp;rsquo;t have to worry about being an hour deep into researching or working on something only to get tapped on the shoulder or interrupted by noisy coworkers. We&amp;rsquo;ve reconfigured our second bedroom to be my private office.&lt;/p&gt;
&lt;p&gt;The commute isn&amp;rsquo;t bad, either. During my engineering degree, I had to turn down an internship at the Canadian Space Agency because I just couldn&amp;rsquo;t afford to buy a car to commute back and forth (or move closer to their location, either). That sucked, and it made me realize just how messed up it is that working &lt;em&gt;can cost you money&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;lets-talk-about-career-development&#34;&gt;Let’s talk about career development.&lt;/h2&gt;
&lt;p&gt;This is a bit hard to address, as I&amp;rsquo;ve spent most of my first year just trying to learn the ropes and become a productive member of the team. I haven&amp;rsquo;t taken advantage of things like our conference and education budget, so I&amp;rsquo;m aiming to be better at this in year two.&lt;/p&gt;
&lt;h3 id=&#34;how-do-you-learn-from-your-colleagues-remotely&#34;&gt;How do you learn from your colleagues remotely?&lt;/h3&gt;
&lt;p&gt;I mean, picking someone&amp;rsquo;s brain is never more than a Slack conversation away, but we recently trialed a new mentorship program. I got to learn a lot about working on web applications/in JavaScript under the tutelage of a really smart and experienced developer.&lt;/p&gt;
&lt;p&gt;We also use &lt;a href=&#34;https://manuscript.com&#34;&gt;Manuscript&lt;/a&gt; as a store of knowledge, so learning from colleagues is never more than a few searches away — detailed notes in cases can serve up a whole lot of learnin&amp;rsquo;.&lt;/p&gt;
&lt;h2 id=&#34;how-do-you-stay-plugged-into-spontaneous-conversations-around-the-office&#34;&gt;How do you stay plugged into spontaneous conversations around the office?&lt;/h2&gt;
&lt;p&gt;With something like two-thirds of the company remote, most conversations happen in Slack. Tuning in to the right channels (and getting your notifications right so that you&amp;rsquo;re not interrupted when you&amp;rsquo;re heads down) makes it easy enough to understand what&amp;rsquo;s going on, but it did take a while to get that right.&lt;/p&gt;
&lt;h2 id=&#34;how-do-you-have-idlewatercooler-discussions&#34;&gt;How do you have idle/watercooler discussions?&lt;/h2&gt;
&lt;p&gt;One of our developers created a &lt;a href=&#34;https://github.com/STRd6/coffee-time&#34;&gt;&amp;ldquo;coffee time&amp;rdquo;&lt;/a&gt; app that connects you with another colleague every Saturday via email, just so that you can catch up with them over a warm beverage. We also have a Friday Zoom meetup where we wind down ahead of the weekend. We&amp;rsquo;re trialing &lt;a href=&#34;https://donut.ai&#34;&gt;Donut&lt;/a&gt; for more of a group coffee-time thing, and that&amp;rsquo;s been fun.&lt;/p&gt;
&lt;p&gt;These meetups are always optional, so if you&amp;rsquo;ve got a heavy week, no one will make you feel bad about skipping them.&lt;/p&gt;
&lt;h2 id=&#34;what-happens-if-you-spend-a-week-stuck-on-a-problem&#34;&gt;What happens if you spend a week stuck on a problem?&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s rare that this will happen. We&amp;rsquo;ve got proceses in place for escalating issues that we&amp;rsquo;re especially stuck on that ropes in members of the development team, but before it even gets to that, we usually invoke one of our team values: &lt;em&gt;support engineers help one another&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;whats-the-setup-like-for-meetings-with-people-in-the-office-does-it-work-well&#34;&gt;What’s the setup like for meetings with people in the office, does it work well?&lt;/h2&gt;
&lt;p&gt;My first-day experience while being onboarded Fog Creek&amp;rsquo;s headquarters in NYC was a monthly Town Hall meeting. I remember feeling that it was pretty odd that everyone in the office was sitting at their own desk, in front of their own computer, headsets on, and interacting in the meeting via group videoconferencing. On the other hand, this makes it pretty inclusive for us remote folks — there&amp;rsquo;s not much in the way of sideband conversations going on when you&amp;rsquo;re all on your own webcam. So that&amp;rsquo;s pretty cool, and in practice it works well.&lt;/p&gt;
&lt;h2 id=&#34;how-do-you-stay-productive-and-also-separate-worklife-at-home&#34;&gt;How do you stay productive and also separate work/life at home?&lt;/h2&gt;
&lt;p&gt;Productivity gets easier when you&amp;rsquo;re not exhausted by commuting, and you&amp;rsquo;ve got a dedicated area that&amp;rsquo;s set up to meet your own ideals for a productive workspace. Like Julia, I&amp;rsquo;ve found it more distracting working out of an office than working from home. I do keep a pretty clear start and end to my workday, though, and generally only set foot in the home office to do work.&lt;/p&gt;
&lt;!-- link references --&gt;
</description>
    </item>
    
    <item>
      <title>The Junk Drawer</title>
      <link>https://angelostavrow.com/post/the-junk-drawer/</link>
      <pubDate>Tue, 27 Feb 2018 08:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/the-junk-drawer/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve slowly been moving over to &lt;a href=&#34;https://culturedcode.com/things/&#34;&gt;Things 3&lt;/a&gt; for task management, but more than that, I&amp;rsquo;ve been re-thinking just how my system needs to be fleshed out so that it works best for me.&lt;/p&gt;
&lt;p&gt;As part of that move, I&amp;rsquo;ve been re-evaluating the way I think about capture. Typically, you&amp;rsquo;ve got an inbox, where you log all the incoming stuff in your life, and which you process periodically. That&amp;rsquo;s fine for the usual do-delegate-delete-defer type &lt;em&gt;tasks&lt;/em&gt;, but if I want to use Things (or whatever task management system) to capture &lt;em&gt;everything&lt;/em&gt;, I&amp;rsquo;ve found that I need a place for things that live somewhere between the inbox and a project.&lt;/p&gt;
&lt;p&gt;Which brings me to BINQ.&lt;/p&gt;
&lt;p&gt;BINQ is a concept I heard Merlin Mann talk about on the &lt;a href=&#34;http://5by5.tv/b2w/&#34;&gt;Back To Work podcast&lt;/a&gt;, and is an acronym for &lt;strong&gt;B&lt;/strong&gt;rainstorming, &lt;strong&gt;I&lt;/strong&gt;deas, &lt;strong&gt;N&lt;/strong&gt;otes, &lt;strong&gt;Q&lt;/strong&gt;uestions (or something like that).&lt;/p&gt;
&lt;p&gt;Essentially, BINQ is a junk drawer for your thoughts. It&amp;rsquo;s a holding pen for half-baked, hare-brained ideas that need to time to fully form. Tasks in the BINQ project don&amp;rsquo;t quite yet deserve to become a project, but they really need to get out of the inbox.&lt;/p&gt;
&lt;p&gt;Some folks use the concept of “Someday” for these things, but in practice I’ve found that “someday” makes more sense as a temporal definition (kind of like a “pending” or &amp;ldquo;waiting&amp;rdquo; context, but important enough to be a first-class entity in the task manager). This is how Things treats “someday”: you set this as part of the &lt;em&gt;when&lt;/em&gt; for a task, not the &lt;em&gt;where&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;My BINQ project lives outside of any so-called &amp;ldquo;Areas&amp;rdquo; in things — in fact, it&amp;rsquo;s the only project that isn&amp;rsquo;t part of some area of my life. A few times a week, I&amp;rsquo;ll check in and add some notes to a task that lives in there, or maybe delete something because it doesn&amp;rsquo;t make any sense to pursue further for whatever reason. Ideas for posts go into BINQ too, before a draft gets written.&lt;/p&gt;
&lt;p&gt;This is a good place for checklists within tasks, too. As you start to flesh out some of these ideas, it&amp;rsquo;s handy to add checklist items to them. It then becomes pretty trivial to bring these out of BINQ quarantine and into your life using Things&amp;rsquo; convert-to-project feature.&lt;/p&gt;
&lt;p&gt;For now, I&amp;rsquo;ve set up four headings for each of the letters in the acronym (Brainstorming, Ideas, Notes, and Questions), but I don’t love the idea of having to decide what heading a task would fall under—it injects friction into what should be a easy process. Trying to enforce too much organization on a junk drawer just means that your &lt;em&gt;real&lt;/em&gt; junk drawer lives somewhere else.&lt;/p&gt;
&lt;p&gt;Too much of the pseudo-productivity silliness tries to package your life up into neat little packages, which is fine for remembering to take out the garbage, or for organizing your kitchen renovations. But sometimes, for the messy, ethereal things that come into your life, a good ol&amp;rsquo; messy junk drawer is the right place for them to live.&lt;/p&gt;
&lt;!-- Reference links --&gt;
</description>
    </item>
    
    <item>
      <title>Spinning Plates</title>
      <link>https://angelostavrow.com/post/spinning-plates/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/spinning-plates/</guid>
      <description>&lt;p&gt;I mentioned &lt;a href=&#34;http://angelo.micro.blog/2018/01/27/its-nearly-the.html&#34;&gt;the other day&lt;/a&gt; that I&amp;rsquo;m feeling a little bit discouraged with how January was going. While I started the year &lt;a href=&#34;https://angelostavrow.com/post/twelve-for-2018/&#34;&gt;looking forward to taking on a list of goals&lt;/a&gt;, here we are, almost halfway into February, and I&amp;rsquo;m not really feeling like I&amp;rsquo;ve made real progress against any of them.&lt;/p&gt;
&lt;p&gt;I took some time to think about why this is the case, and a couple of things stand out.&lt;/p&gt;
&lt;p&gt;First, the reality is that January&amp;rsquo;s been a bit of a short month. I spent a good portion of it feeling under the weather, and there’s been a lot going on, so I really didn&amp;rsquo;t have much time and energy to put into anything beyond work.&lt;/p&gt;
&lt;p&gt;The bigger issue, however, is that I&amp;rsquo;ve not felt quite sure where to focus my efforts. I&amp;rsquo;ve &lt;em&gt;started&lt;/em&gt; on several projects, but there are only so many things that I can move forward at once, because it requires a lot of context-switching and results in a level of progress that&amp;rsquo;s nowhere near what focused attention would generate.&lt;/p&gt;
&lt;p&gt;That’s in contrast to how I wrote my first iOS app. By working a little bit of overtime during the week, I was able to take Friday afternoons off over the summer, and I dedicated that time to learning and building &lt;a href=&#34;https://droppedbits.com/honeyjar/&#34;&gt;HoneyJar&lt;/a&gt;. That&amp;rsquo;s all I did with those afternoons, too — get home, launch Xcode, and work on the app, without distraction. In the sum total of maybe five or six full workdays, I learned enough about Objective-C, Xcode, iOS, CocoaPods, and iTunes Connect to ship my first app.&lt;/p&gt;
&lt;p&gt;Maybe because I&amp;rsquo;m looking forward to diving into a bunch of these projects, I haven&amp;rsquo;t really been great about getting into that focused state of flow — my attention is pulled in several different directions. So, of course, as I try to move things forward, I&amp;rsquo;m only able to make very small pushes in the general direction of progress.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As it turns out, if you give somebody two things to work on, you should be grateful if they “starve” one task and only work on one, because they’re going to get more stuff done and finish the average task sooner. In fact, the real lesson from all this is that you should never let people work on more than one thing at once.&lt;/p&gt;
&lt;p&gt;→ Joel On Software, &lt;a href=&#34;https://www.joelonsoftware.com/2001/02/12/human-task-switches-considered-harmful/&#34;&gt;&amp;ldquo;Human Task Switches Considered Harmful&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s like those circus acts where someone’s running from pole to pole, trying to keep the plates atop them spinning fast enough to maintain their balance, and that person unable to ever really focus on one thing because they’re too busy keeping things going in circles. I&amp;rsquo;m fighting the urge to tackle &lt;em&gt;all&lt;/em&gt; of my projects at the same time, but apparently not well enough. So it&amp;rsquo;s time to define what specific projects to work on, and when they&amp;rsquo;re done, move on to the next. It’s a little bit hard for me to starve one project to feed another, but it’s something I can learn to be okay with.&lt;/p&gt;
&lt;p&gt;And it&amp;rsquo;s still possible to work on a couple of (carefully-chosen) goals in parallel, so long as there’s a limited overlap of domain. Maybe I only want to take on one &lt;em&gt;code&lt;/em&gt; project at a time, but that doesn&amp;rsquo;t mean I can&amp;rsquo;t tackle a fitness project simultaneously — these are mutually exclusive in terms of their demands on my time and focus, and are probably even symbiotic (healthy mind in a healthy body, and all that jazz).&lt;/p&gt;
&lt;p&gt;More (but only a little bit more) to come.&lt;/p&gt;
&lt;!-- Reference Links --&gt;
</description>
    </item>
    
    <item>
      <title>Twelve for 2018</title>
      <link>https://angelostavrow.com/post/twelve-for-2018/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/twelve-for-2018/</guid>
      <description>&lt;p&gt;Okay, so I&amp;rsquo;m a bit late to the party, but: rather than try to create a bunch of resolutions, I’ve decided that I’d prefer to take on twelve projects this year. Why twelve? Well, largely because it breaks down to one project per month (not that I intend these to be month-long projects, it just works out that way).&lt;/p&gt;
&lt;p&gt;In no particular order of importance, they are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Learn a new language:&lt;/strong&gt; My wife and I have been talking about doing this together. We don&amp;rsquo;t expect to develop fluency in a language by year end, but at the very least some conversational level where, if we were in some country, we&amp;rsquo;d be able to chat with local folks in their own language. Right now, we&amp;rsquo;re trying to decide on the language.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ship Per 2.0:&lt;/strong&gt; The last update to Per was in September of 2015. The app generally works fine, and we use it all the time when out shopping for groceries, but I have ideas for features (and am aware that the UI could &lt;em&gt;really&lt;/em&gt; use an overhaul).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run five kilometres:&lt;/strong&gt; In a row. In one session. I&amp;rsquo;ve never been an active person, and that&amp;rsquo;s going to bite me in my later years. So I&amp;rsquo;m going to tackle a couch-to-5k program and aim to be able to run a solid 5km by year end.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read one book a month:&lt;/strong&gt; I really stink at getting through my reading list. I aim to read one book a month to try to ramp that back up (and take advantage of the cool &lt;a href=&#34;http://www.manton.org/2018/01/books-on-micro-blog.html&#34;&gt;&lt;em&gt;Books on Micro.blog&lt;/em&gt; collection&lt;/a&gt; implementation to discuss them). &lt;a href=&#34;https://micro.blog/discover/books&#34;&gt;📚&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build one Manuscript integration:&lt;/strong&gt; Basing myself on &lt;a href=&#34;https://medium.com/make-better-software/how-to-get-started-making-manuscript-integrations-6da236b68f98&#34;&gt;this article&lt;/a&gt;, I&amp;rsquo;m going to build a (relatively simple) &lt;a href=&#34;https://manuscript.com&#34;&gt;Manuscript&lt;/a&gt; integration that pulls App Store reviews into Manuscript.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build a micro.blog sample app in Glitch:&lt;/strong&gt; I think that there&amp;rsquo;s a lot of value in micro.blog, but right now the barrier to entry (compared to signing up for a free Twitter account) is high enough that it won&amp;rsquo;t appeal beyond the folks who already blog (or who are able to pay US$5 per month for a hosted microblog) — a diminishingly small portion of the potential member base. Creating a free, remixable sample app in &lt;a href=&#34;https://glitch.com&#34;&gt;Glitch&lt;/a&gt; might help with accessibility.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pay off my credit card debt:&lt;/strong&gt; I used to be really bad with my spending. I&amp;rsquo;m significantly better now, but I&amp;rsquo;ve got some lingering credit-card debt that really needs to go.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;De-clutter my belongings:&lt;/strong&gt; I have a lot of stuff. A good chunk of that stuff is stuff that I don&amp;rsquo;t need and never use. It&amp;rsquo;s time to let go of a lot of that.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write more often:&lt;/strong&gt; I mean, I can&amp;rsquo;t really do much worse than my one-post-per-year low from last year. Technically, this is my second post for 2018, so I&amp;rsquo;m already winning this one. I aim to write about my progress on this list of projects over the course of the year, so at least I already have some topics lined up.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rework my personal website and blogs:&lt;/strong&gt; My stuff is scattered across this blog, the (new) &lt;a href=&#34;https://angelo.micro.blog&#34;&gt;microblog&lt;/a&gt;, my mostly-ignored &lt;a href=&#34;http://breakbeforemake.com&#34;&gt;Tumblr&lt;/a&gt;, and my personal site. Time to think about how to bring all that together.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Back-squat 225 lbs:&lt;/strong&gt; Similar to the 5K goal, I aim to focus on some strength training at the gym. I&amp;rsquo;d started on a &lt;a href=&#34;https://stronglifts.com/5x5/&#34;&gt;5×5 lifting program&lt;/a&gt; last year and, despite some fits and starts, went from squatting just the bar to 155lbs in six months — a 240% improvement. Those are the easy percents, though, and I&amp;rsquo;m hoping to be able to get up to two plates by the end of the year, despite starting from (nearly) scratch after a 6-month hiatus.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start playing piano again:&lt;/strong&gt; I haven&amp;rsquo;t seriously played piano in over 20 years. I&amp;rsquo;ve set up a keyboard in my home office to inspire me to do that again, but I&amp;rsquo;ve yet to actually start tickling the ivories, as they say. But, I mean, I did make this &lt;a href=&#34;https://noiseless-airmail.glitch.me&#34;&gt;web-audio synthesizer in Glitch&lt;/a&gt; to learn some JavaScript, so that kinda counts. Right?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, here&amp;rsquo;s to 2018. I hope you make great progress on your projects and goals this year, too.&lt;/p&gt;
&lt;!-- Reference links --&gt;
</description>
    </item>
    
    <item>
      <title>Hello, 2018</title>
      <link>https://angelostavrow.com/post/hello-2018/</link>
      <pubDate>Mon, 01 Jan 2018 12:00:00 -0500</pubDate>
      
      <guid>https://angelostavrow.com/post/hello-2018/</guid>
      <description>&lt;p&gt;The last thing I wrote here was a &lt;a href=&#34;https://angelostavrow.com/post/2016-in-review&#34;&gt;retrospective on 2016&lt;/a&gt;, written one year and one day ago.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s… quite a while ago. You&amp;rsquo;d think I&amp;rsquo;d have written more, given how much happened this year. Off the top of my head:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I changed jobs, and am now working with the thoughtful geniuses at &lt;a href=&#34;https://fogcreek.com&#34;&gt;Fog Creek&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I got pretty serious about personal fitness, making great progress, right up until…&lt;/li&gt;
&lt;li&gt;…I severed a tendon in my left pinky, which left me in a splint for most of the summer after &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3293389/&#34;&gt;surgery to reattach it&lt;/a&gt; (occupational and physical therapy are still ongoing, six months later)&lt;/li&gt;
&lt;li&gt;we lost our wonderful fluffy companion of 15 years&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aside from the fitness bit, none of these were events that I expected or planned for. One thing I didn&amp;rsquo;t expect, however, is how much all of this upheaval would leave me wanting to withdraw from, well, everything. I guess it&amp;rsquo;s easiest to drop the stuff that doesn&amp;rsquo;t pay the rent, and once you start doing that, you risk kicking off a downward spiral — one that catches you by surprise one day, when you wake up and realize you&amp;rsquo;re fed up of not feeling like you&amp;rsquo;re doing anything that you used to enjoy anymore.&lt;/p&gt;
&lt;p&gt;So, I&amp;rsquo;m going to work on getting back into a rhythm of Getting Things Done. I&amp;rsquo;m starting by setting aside protected time this week to read, to think, and to make some progress on projects (first up: I&amp;rsquo;d &lt;em&gt;really&lt;/em&gt; like to update &lt;a href=&#34;https://itunes.apple.com/ca/app/per-shop-smart-save-money/id922693504?mt=8&amp;amp;uo=4&#34;&gt;Per&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;More tk.&lt;/p&gt;
&lt;!-- Links to references --&gt;
</description>
    </item>
    
    <item>
      <title>Twenty-sixteen, reviewed</title>
      <link>https://angelostavrow.com/post/2016-in-review/</link>
      <pubDate>Sat, 31 Dec 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/2016-in-review/</guid>
      <description>&lt;p&gt;At the beginning of the year, I &lt;a href=&#34;https://angelostavrow.com/post/on-fresh-starts/&#34;&gt;wrote down some goals&lt;/a&gt; for 2016. The year has come and gone, so it&amp;rsquo;s not a bad idea to have a bit of a look at how things went.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;review&#34;&gt;Review&lt;/h2&gt;
&lt;h3 id=&#34;1-post-something-here-every-friday&#34;&gt;1. Post something here every Friday&lt;/h3&gt;
&lt;p&gt;I did pretty well at this for a while, up until late August. But as the year wore on it felt more and more that I was writing just for the sake of checking off a repeating to-do item, rather than writing a goal in and of itself.&lt;/p&gt;
&lt;p&gt;Not only did I feel that in the quality of what I was writing, I think this started injecting stress into my life. That, of course, is bad.&lt;/p&gt;
&lt;p&gt;I also found that trying to get some words up on screen every week took time away from working on some of the projects (writing or otherwise) that I really wanted to work on.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to continue with a less-frequent schedule, putting up a minimum of one article a month. I&amp;rsquo;m also going to try posting to &lt;a href=&#34;http://breakbeforemake.com&#34;&gt;Break Before Make&lt;/a&gt; more often—it&amp;rsquo;s been sorely neglected.&lt;/p&gt;
&lt;h3 id=&#34;2-post-to-a-journal-at-least-once-every-day&#34;&gt;2. Post to a journal at least once every day&lt;/h3&gt;
&lt;p&gt;I discussed this &lt;a href=&#34;https://angelostavrow.com/post/a-six-month-update/&#34;&gt;six months ago&lt;/a&gt;. Maybe I&amp;rsquo;ll try a written journal, just because I like working on my penmanship, but honestly, it felt like something taken on because someone said it was a good idea, rather than because I found that it worked for me.&lt;/p&gt;
&lt;h3 id=&#34;3-make-real-progress-towards-my-mac-app&#34;&gt;3. Make real progress towards my Mac app&lt;/h3&gt;
&lt;p&gt;Right.&lt;/p&gt;
&lt;p&gt;I founded a company five years ago with the intention of releasing this.&lt;/p&gt;
&lt;p&gt;While I&amp;rsquo;ve made no real inroads in the actual &lt;em&gt;coding&lt;/em&gt;, I have made a pretty important decision regarding the focus of the app. I think this pivot will help more people, so I&amp;rsquo;ve fleshed out a bit of a roadmap for it.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m making 2017 the year it finally sees the light of day.&lt;/p&gt;
&lt;h3 id=&#34;4-contribute-to-open-source-projects&#34;&gt;4. Contribute to open-source projects&lt;/h3&gt;
&lt;p&gt;Not much here. I did &lt;a href=&#34;https://github.com/sxg/ForecastIO/pull/24&#34;&gt;help update a library for Swift 3&lt;/a&gt; but that wasn&amp;rsquo;t really much of a contribution, I don&amp;rsquo;t think—it was mainly more of a &amp;ldquo;fix what the Xcode migration assistant broke&amp;rdquo; kind of fix.&lt;/p&gt;
&lt;p&gt;I also &lt;a href=&#34;https://angelostavrow.com/tags/tghr/&#34;&gt;open-sourced my first iOS app&lt;/a&gt;, but haven&amp;rsquo;t really done much with that, either. It&amp;rsquo;s still more-or-less in burning-dumpster-fire state, which is to say, it &lt;em&gt;really&lt;/em&gt; looks like a first iOS app.&lt;/p&gt;
&lt;h3 id=&#34;5-get-in-better-shape&#34;&gt;5. Get in better shape&lt;/h3&gt;
&lt;p&gt;I did pretty well at running at least a couple of times a week between end of March and mid-October. Once the snow—or worse, freezing rain—started coming down, however, that trend kind of tapered off.&lt;/p&gt;
&lt;p&gt;I miss it, so I&amp;rsquo;ve registered at a gym with an indoor track and a pool.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;onwards-and-upwards&#34;&gt;Onwards and upwards&lt;/h2&gt;
&lt;p&gt;Any day is a good day to make changes, because we live &lt;a href=&#34;https://angelostavrow.com/post/flux/&#34;&gt;in a state of flux&lt;/a&gt;. So, despite missing marks and/or changing course over the last year, I&amp;rsquo;m still going to set some goals for the next year:&lt;/p&gt;
&lt;h3 id=&#34;goal-_health_&#34;&gt;Goal: &lt;em&gt;Health&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;As I said, I&amp;rsquo;m registering at a gym down the street from where I live, where I can do both strength and cardiovascular training. I&amp;rsquo;m not getting any younger, and holy crap am I feeling it.&lt;/p&gt;
&lt;p&gt;Typically, when I start getting more physically active, everything else falls into place: sleeping longer, eating better, making better decisions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Citius&lt;/em&gt;, &lt;em&gt;Altius&lt;/em&gt;, &lt;em&gt;Fortius&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;goal-_wealth_&#34;&gt;Goal: &lt;em&gt;Wealth&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;My &lt;a href=&#34;http://appstore.com/droppedbits?at=11ln59&amp;amp;ct=mbb&#34;&gt;iOS apps&lt;/a&gt;, despite their neglected state, are about helping people make smarter decisions about their money. My Mac app has the same goal, albeit a bit more involved.&lt;/p&gt;
&lt;p&gt;By the way: as they haven&amp;rsquo;t been updated in a while, I&amp;rsquo;ve made the iOS apps free. Give them a try.&lt;/p&gt;
&lt;h3 id=&#34;goal-_self-mastery_&#34;&gt;Goal: &lt;em&gt;Self-mastery&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;In a good chunk of my writing, I tend to explore themes related to &lt;em&gt;getting better&lt;/em&gt;. Generally, if I&amp;rsquo;m writing about it, it&amp;rsquo;s because it&amp;rsquo;s something that I struggle with, or that I&amp;rsquo;m trying to improve.&lt;/p&gt;
&lt;p&gt;Rather than forcing that with weekly posts, I intend on posting longer-form, better-cited articles, at least once a month.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Here&amp;rsquo;s to the next 365 days. I truly hope they&amp;rsquo;re full of love, laughter, and health for you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>One decision</title>
      <link>https://angelostavrow.com/post/one-decision/</link>
      <pubDate>Mon, 26 Dec 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/one-decision/</guid>
      <description>&lt;p&gt;As I write this, I&amp;rsquo;m sitting at a Starbucks in a mall, two days before Christmas. I&amp;rsquo;m sipping a large black coffee distractedly, watching folks noodle on by, caught up in whatever last few errands they may need to run before hosting or visiting friends and family for the holidays.&lt;/p&gt;
&lt;p&gt;The mall&amp;rsquo;s background music is calm, barely-audible, and shoppers don&amp;rsquo;t seem particularly stressed out, or rushed, or frustrated.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s possible that I&amp;rsquo;m projecting my mood on this scene, too. I don&amp;rsquo;t know.&lt;/p&gt;
&lt;p&gt;This has been, for me, one of the least-stressful run-ups to the holidays ever. Part of that comes from the fact that our trips to see family are nicely spaced out this year, and part of it comes from the fact that I&amp;rsquo;ve been preparing for this since Christmas of last year.&lt;/p&gt;
&lt;p&gt;Our flat has been perfumed with the scent of Fraser fir for weeks.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve purchased all of my gifts, which I&amp;rsquo;ll be wrapping this evening.&lt;/p&gt;
&lt;p&gt;My Christmas budget still has plenty of padding for any unexpected, last-minute purchases.&lt;/p&gt;
&lt;p&gt;Nice.&lt;/p&gt;
&lt;p&gt;Knowing all your affairs are in order casts a lovely, warm glow on what can otherwise become a very hectic and chaotic time of year. Yeah, we missed the deadline for sending out Christmas cards—something we keep saying we want to do, but aren&amp;rsquo;t great about getting done—but otherwise, everything&amp;rsquo;s done.&lt;/p&gt;
&lt;p&gt;Everything&amp;rsquo;s done because I made one decision during the holidays last year: make Christmas this year better.&lt;/p&gt;
&lt;h2 id=&#34;wishful-thinking-considered-harmful&#34;&gt;Wishful thinking considered harmful&lt;/h2&gt;
&lt;p&gt;I used to feel that, hey, whatever, the Universe no doubt unfolds as it&amp;rsquo;s supposed to, and hopefully that means tomorrow will work out better than today did. I mean, I understood that my actions played &lt;em&gt;some&lt;/em&gt; role in how that would play out, but, that said, there was always this feeling that things would work themselves out, because, well, &lt;em&gt;they&amp;rsquo;d always somehow worked themselves out&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;That is, until they didn&amp;rsquo;t.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Wishful thinking isn&amp;rsquo;t just optimism. It&amp;rsquo;s closing your eyes and hoping something works when you have no reasonable basis for thinking it will. Wishful thinking at the beginning of a project leads to big blowups at the end of a project. It undermines meaningful planning and may be at the root of more software problems than all other causes combined.&lt;/p&gt;
&lt;p&gt;— &lt;cite&gt;Steve McConnell&lt;/cite&gt;, &lt;a href=&#34;http://www.stevemcconnell.com/rdenum.htm&#34;&gt;&amp;ldquo;Classic Mistakes Enumerated&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mr McConnell wrote this with software development projects in mind, but it&amp;rsquo;s pretty broadly applicable to almost anything. Like post-secondary education. I did extremely well with little effort in high school, so I just expected that to continue through college.&lt;/p&gt;
&lt;p&gt;That didn&amp;rsquo;t happen.&lt;/p&gt;
&lt;p&gt;Instead, I got pretty well acquainted with a concept called &amp;ldquo;Academic Probation&amp;rdquo;, a set of policies and procedures designed around the concept of &lt;em&gt;Getting Your Shit Together&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Instead of actually recognizing that each week was going worse than the last, and taking some kind of corrective action, I kept shrugging it off and convincing myself that it&amp;rsquo;d all work out. I figured I&amp;rsquo;d ace the final, or do great on the term project, or whatever. Procrastination, anxiety, burnout, whatever the reason, I didn&amp;rsquo;t do anything to stop the downward spiral—I just fantasized about having degrees conferred and being offered great jobs.&lt;/p&gt;
&lt;p&gt;I think life-improvement gurus call this technique &amp;ldquo;goal visualization&amp;rdquo;, but it turns out that it&amp;rsquo;s not super effective without effort.&lt;/p&gt;
&lt;h2 id=&#34;judge-jury-and-executor&#34;&gt;Judge, jury, and executor&lt;/h2&gt;
&lt;p&gt;Making a decision means consciously choosing what takes priority in your life, and this also means choosing what &lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; take priority in your life. This has, historically, been the hard part for me; your time-management system can&amp;rsquo;t manage to tack an extra couple of hours onto your day, so if you decide that project A lives, then you&amp;rsquo;re by necessity deciding that projects B, C, and maybe even D must &lt;em&gt;die&lt;/em&gt;. If you decide that you need to buy a new car, you&amp;rsquo;re by necessity deciding that you &lt;em&gt;don&amp;rsquo;t get to retire&lt;/em&gt; for at least another year or two.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s only when I realized this that I started becoming the (relatively-more-) effective and productive person I am today.&lt;/p&gt;
&lt;p&gt;Much like the &lt;a href=&#34;http://www.theatlantic.com/business/archive/2015/05/an-economist-reads-marie-kondo/392921/&#34;&gt;KonMari method of tidying&lt;/a&gt;, you need a very specific mindset when you&amp;rsquo;re going through your tasks, or your budget, or your goals, or whatever. Except the decision to keep or drop a thing isn&amp;rsquo;t going to be based on whether it brings you joy; it&amp;rsquo;s going to be based on the fact that it requires sacrificing something. Something that you once sacrificed another thing for.&lt;/p&gt;
&lt;p&gt;Which, in turn, you sacrificed something else for.&lt;/p&gt;
&lt;p&gt;And so on.&lt;/p&gt;
&lt;h2 id=&#34;looking-out-the-top-of-the-windshield&#34;&gt;Looking out the top of the windshield&lt;/h2&gt;
&lt;p&gt;Generally, as people, we&amp;rsquo;re not particularly good at forethought. Mired in the day-to-day, we neglect the future until it becomes a mistake-ridden past.&lt;/p&gt;
&lt;p&gt;Luckily, fixing this isn&amp;rsquo;t especially hard—it just takes a certain amount of mindfulness.&lt;/p&gt;
&lt;p&gt;When I was learning how to drive, one of the best pieces of advice that I got was to pick a point about three-quarters up the windshield in front of me, and try to look above that point at least as often as I look below it. The point of this exercise was to train yourself to look as far down the road as possible, as often as possible, without ignoring what&amp;rsquo;s going on right in front of you. In doing so, you see hazards and congestions and what-have-you long before they became an unavoidable problem. You can then make small, gentle course corrections right away, smoothly merging into another lane to avoid a pothole two blocks away.&lt;/p&gt;
&lt;p&gt;Man, I wish I&amp;rsquo;d been able to grok the life lesson in that right away.&lt;/p&gt;
&lt;p&gt;Long-term goals influence short-term goals. The farther out you plan, the easier it is to make decisions in the near-term about what gets to stay in your life, and what has to go.&lt;/p&gt;
&lt;p&gt;In the end, you&amp;rsquo;re really only answering a single question: does this make [tomorrow / next week / next month / next year] better?&lt;/p&gt;
&lt;p&gt;All the to-do lists and GTD methodologies in the world aren&amp;rsquo;t going to help you, until you can make that one decision.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/one-decision/ofqe-cards.png&#34; alt=&#34;&amp;ldquo;Omnifocus Quick-Entry window&amp;rdquo;&#34;&gt;&lt;/p&gt;
&lt;p&gt;And yeah, we&amp;rsquo;ll be sending out Christmas cards next year.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On criticism</title>
      <link>https://angelostavrow.com/post/on-criticism/</link>
      <pubDate>Fri, 07 Oct 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-criticism/</guid>
      <description>&lt;p&gt;I see a lot of digital ink spilled on how some particular thing is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;broken&lt;/li&gt;
&lt;li&gt;taking a quality nose-dive&lt;/li&gt;
&lt;li&gt;stupid&lt;/li&gt;
&lt;li&gt;irrelevant&lt;/li&gt;
&lt;li&gt;&amp;amp;cet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And it&amp;rsquo;s good to be critical. With a bit of healthy skepticism, we avoid the reality-distortion fields that turn rational-minded folks into zealots. Nothing is so perfect that it can&amp;rsquo;t be improved, and I get that this is the place that a lot of these &lt;em&gt;thinkpieces&lt;/em&gt; come from.&lt;/p&gt;
&lt;p&gt;But the thing is, communication should serve some purpose. It doesn&amp;rsquo;t necessarily have to be some call to action, but it &lt;em&gt;should&lt;/em&gt;, at the very least, let the audience answer one simple question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What am I to do with this information?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, if you&amp;rsquo;re telling me how crappy something is, what&amp;rsquo;s the point? Are you proposing some solution?&lt;/p&gt;
&lt;p&gt;Or are you just complaining?&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s okay if you are. We&amp;rsquo;re human and we have &lt;em&gt;feelings&lt;/em&gt; about things. Talking about those feelings can help you find common ground with others who feel ways about stuff.&lt;/p&gt;
&lt;p&gt;But let&amp;rsquo;s abstain from calling it criticism. Constructive criticism moves a thing forward; it offers the receiver something to work with. This is key: it generates goodwill, and it helps make things better.&lt;/p&gt;
&lt;p&gt;And—given that the world is made up of things—constructive criticism makes the world a slightly better place, by extension.&lt;/p&gt;
&lt;p&gt;Which is nice.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts on Per</title>
      <link>https://angelostavrow.com/post/per-schedule/</link>
      <pubDate>Mon, 26 Sep 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/per-schedule/</guid>
      <description>&lt;p&gt;I haven&amp;rsquo;t posted here in a little while, thus &lt;a href=&#34;https://angelostavrow.com/post/on-streaks/&#34;&gt;breaking the streak&lt;/a&gt; that I was intending to maintain. I don&amp;rsquo;t feel too bad about this, because I&amp;rsquo;ve been working on other stuff in the meanwhile, but it&amp;rsquo;s nice to be writing again.&lt;/p&gt;
&lt;p&gt;Specifically, in light of the coming &lt;a href=&#34;https://developer.apple.com/support/app-store-improvements/&#34;&gt;App Store purge&lt;/a&gt;, I&amp;rsquo;ve been working on a big update to &lt;a href=&#34;http://droppedbits.com/per&#34;&gt;Per&lt;/a&gt;. While I&amp;rsquo;m not especially concerned that Per, in its current form, is at risk of being culled, it &lt;em&gt;has&lt;/em&gt; been a long time since it was updated.&lt;/p&gt;
&lt;p&gt;So.&lt;/p&gt;
&lt;p&gt;For one, I&amp;rsquo;m dropping support for anything prior to iOS 10. Per has a pretty tiny user base—maybe a couple hundred downloads—and I don&amp;rsquo;t see much in the way of daily active users&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; rel=&#34;footnote&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but for such a tiny user base, I can&amp;rsquo;t justify putting effort into supporting iOS 8 and 9.&lt;/p&gt;
&lt;p&gt;Second on the list is a pretty hefty redesign. I fully admit that Per is… kinda homely-looking. There are some interactions that I&amp;rsquo;m planning on (and have started experimenting with) for 2.0, and while it&amp;rsquo;s slow going, I like what I see so far.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m also thinking about taking advantage of some new input methods, but I don&amp;rsquo;t know yet how well that will work. I don&amp;rsquo;t want to tip my hand just yet because those may not be technically feasible, but it&amp;rsquo;s got me pretty interested in seeing what can be done&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; rel=&#34;footnote&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Third on the list is the business model for Per.&lt;/p&gt;
&lt;p&gt;Per brings in pretty much zero revenue. Most of the downloads came from a period of time when I made my apps free for a week, whereas the normally-paid (at USD$1.99) version has seen only a handful of downloads at most.&lt;/p&gt;
&lt;p&gt;Note that I haven&amp;rsquo;t marketed Per at all, save for a couple of tweets and blog posts, so this isn&amp;rsquo;t unexpected. But I think it&amp;rsquo;s time to change that.&lt;/p&gt;
&lt;p&gt;Given the way the App Store economy works, it&amp;rsquo;s pretty clear that charging up-front is a barrier to getting your app downloaded. This is no secret, so some business model that includes free downloads makes sense.&lt;/p&gt;
&lt;p&gt;One option is to make Per free, with an in-app purchase (IAP) to unlock advanced features, like the unit conversion and  in-field math operations it already features, and the new input methods mentioned. This means zero revenue unless people want these features. How desirable are they in a relatively simple utility app like Per?&lt;/p&gt;
&lt;p&gt;Another option is to make Per free, but ad-supported. Thing is, I personally don&amp;rsquo;t like the aesthetic that ads introduce in an app&amp;rsquo;s interface and experience, and I know I&amp;rsquo;m not the only one. So there would definitely have to be an IAP to remove ads. I have a couple of ideas on where and when I&amp;rsquo;d show an ad, so they wouldn&amp;rsquo;t be &lt;em&gt;too&lt;/em&gt; annoying.&lt;/p&gt;
&lt;p&gt;Both cases mean that current paying users would experience either reduced functionality, or an ad-filled experience. That sucks, so yet &lt;em&gt;another&lt;/em&gt; option would be to create a new SKU. Folks that have the original version of Per get a fully-featured and ad-free upgrade, and new users could opt to pay for this version outright, whereas the other version of the app would implement one of the above options, but would list for free.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s a fair bit of extra administrative work for me, and confusing for both old and new users, so I don&amp;rsquo;t think I&amp;rsquo;ll do that.&lt;/p&gt;
&lt;p&gt;I could also leave Per as-is and create a new SKU for Per 2. No further updates for the old app, but then that also probably means it&amp;rsquo;ll eventually be culled from the App Store anyhow.&lt;/p&gt;
&lt;p&gt;Given that something like 3 users have actually &lt;em&gt;paid&lt;/em&gt; for Per (thanks!), I think that I&amp;rsquo;ll skip the two-SKU options altogether, because they&amp;rsquo;re administrative headaches. This means that Per 2 will be a free upgrade, but will either be removing some features or including ads (sorry!).&lt;/p&gt;
&lt;p&gt;Maybe there&amp;rsquo;s a way to check whether a user paid for an app or not, I&amp;rsquo;m not sure. &lt;a href=&#34;mailto:contact@angelostavrow.com&#34;&gt;Let me know&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;As I mentioned, I know that Per is really just a simple utility app, but it&amp;rsquo;s something that my wife and I use pretty much every time we shop for groceries. It&amp;rsquo;s certainly &lt;em&gt;useful&lt;/em&gt;, but I also want it to be &lt;em&gt;great&lt;/em&gt;. That not only means redesigns and refactoring, but it also means getting it in the hands of as many people as possible.&lt;/p&gt;
&lt;p&gt;More tk.&lt;/p&gt;
&lt;hr&gt;
&lt;div class=&#34;footnotes&#34;&gt;
  &lt;ol&gt;
  	&lt;li class=&#34;footnote&#34; id=&#34;fn:1&#34;&gt;
  		&lt;p&gt;I know that this could be because most people disable sharing this data when they set up their phone.&lt;a href=&#34;#fnref:1&#34; title=&#34;return to article&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li class=&#34;footnote&#34; id=&#34;fn:2&#34;&gt;
  		&lt;p&gt;Seems to me that, for some developers, adding a new feature to an older app has less to do with a revenue bump than it does the excitement of tackling a new problem. That&#39;s how I feel, anyhow.&lt;a href=&#34;#fnref:2&#34; title=&#34;return to article&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>iPhone Unplugged</title>
      <link>https://angelostavrow.com/post/iphone-unplugged/</link>
      <pubDate>Tue, 06 Sep 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/iphone-unplugged/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s widely expected that the next iPhone will be announced tomorrow during the scheduled Apple Event. For months now, the rumour mill has been telling us that the most controversial change Apply is making to its flagship product is the removal of the headphone jack.&lt;/p&gt;
&lt;p&gt;At this point, it seems like a certainty. The headphone jack in its current form has existed for decades, but Apple is notorious for advancing physical I/O past its status quo: witness the current MacBook with its single USB-C port, and recall the Lightning and 30-pin connectors on iOS devices, the adoption of Thunderbolt on current Macs, the even introduction of USB on the original iMac.&lt;/p&gt;
&lt;p&gt;Every time Apple introduces a new port standard, or drops an old one, the ecosystem adapts. Because iPhones didn&amp;rsquo;t use micro-USB connections, pundits complained that it&amp;rsquo;d be nigh-impossible to charge and sync your phone if the included cable got lost or damaged. Fast forward only a few years after the introduction of the iPhone, and 30-pin cables can be found nearly anywhere that has even the most modest of electronics departments.&lt;/p&gt;
&lt;p&gt;But the headphone port has always been around. There&amp;rsquo;s some expectation of Lightning-connected earbuds, which poses a charge-while-listening dilemma, and there will almost certainly be Lightning-to-3.5mm adapters—if not from Apple, then definitely from third parties. But adapters add bulk and are easily lost. Which leads to the next option: Bluetooth.&lt;/p&gt;
&lt;p&gt;Wireless options have been available for a long time, but they&amp;rsquo;ve never really been particularly well-received: they&amp;rsquo;re expensive, the sound quality isn&amp;rsquo;t great, &amp;amp;cet. The real problem, as I see it, is that a wireless device is an active device by necessity. It has to power its own wireless radios, and in this case also power the audio drivers. That means batteries. That means battery life (hours of use per charge), and battery lifespan (number of charges per battery).&lt;/p&gt;
&lt;p&gt;What all this means for iPhone 7 users is not forgetting to charge things, but also not charging things too often. It means not losing adapters. It means having to plan ahead to ensure you don&amp;rsquo;t need to charge your phone while listening to music. It means that there&amp;rsquo;s now an additional bit of cognitive load on you, which is never good.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This&lt;/em&gt; is my main problem with some of these changes. I want new technologies to &lt;em&gt;relieve me&lt;/em&gt; of stuff to think about, not &lt;em&gt;add&lt;/em&gt; more busywork and more administrative B.S. to keep on top of.&lt;/p&gt;
&lt;p&gt;I know this is a barely a blip in the grand scheme of things—heck, it&amp;rsquo;s only a headphone port—but it nicely captures The Problem With Technology As I See It. Moving the state of the art forward should always be in the service of freeing us to do more important things. And I don&amp;rsquo;t think changes like this necessarily do so.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Split iPhone</title>
      <link>https://angelostavrow.com/post/split-iphone/</link>
      <pubDate>Fri, 26 Aug 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/split-iphone/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/2016-08-26/split-iphone.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I noticed this earlier in the year, but my iPhone is coming apart at the seams near the volume buttons.&lt;/p&gt;
&lt;p&gt;At first, I figured I&amp;rsquo;d managed to bend the phone, but upon closer inspection, both the back of the case and the screen are bulging outward—which is not the failure mode you&amp;rsquo;d expect for a bent phone.&lt;/p&gt;
&lt;p&gt;The gap at the seam is nearly 2mm, such that light from the screen leaks, but it&amp;rsquo;s nowhere near as bad as I&amp;rsquo;ve seen doing an image search. The screen doesn&amp;rsquo;t seem to be cracking, though I can see weird artifacts in the backlighting.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I thought my iPhone was bent, but both the back and the front bulge outward, with no cracking of the display. Bloated battery, maybe?&lt;/p&gt;&amp;mdash; Angelo Stavrow (@AngeloStavrow) &lt;a href=&#34;https://twitter.com/AngeloStavrow/status/768490399249739776&#34;&gt;August 24, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Most signs point to a &lt;a href=&#34;http://talestoldfromtheroad.com/2014/08/14/battery-can-swell-and-crack-iphone-screen/&#34;&gt;bloated battery&lt;/a&gt; being the culprit. This doesn&amp;rsquo;t sound like a safe state for a plastic baggie full of acid and electrons, so off to the Genius Bar we go.&lt;/p&gt;
&lt;p&gt;&lt;strike&gt;More tk.&lt;/strike&gt; &lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One look at the phone and the Genius confirmed the diagnosis. Normally, in the case of a bloated battery, they won&amp;rsquo;t bother with replacing the battery, in case it&amp;rsquo;s started leaking and caused damage to other internal components—they give you a new phone and your old device gets sent off to &lt;a href=&#34;http://youtu.be/AYshVbcEmUc&#34;&gt;Liam&lt;/a&gt; for disassembly and recycling. If you&amp;rsquo;re still covered by AppleCare, the exchange is free, but if not, you only pay for a replacement battery, not a replacement phone.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Light writing</title>
      <link>https://angelostavrow.com/post/light-writing/</link>
      <pubDate>Fri, 19 Aug 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/light-writing/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/2016-08-19/olympus-pen.jpg&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Literally &lt;em&gt;writing with light&lt;/em&gt;, or &lt;em&gt;photography&lt;/em&gt;, as it&amp;rsquo;s more commonly known.&lt;/p&gt;
&lt;p&gt;I used to think that I loved photography. I think I still do, I just&amp;hellip; never really do it anymore. At one point I had a whole mess of expensive camera gear, with the fancy full-frame digital SLR and red-ring&amp;rsquo;d lenses. And the fast primes—oh, I loved those. Studio strobes? Yup. Speedlights? Several. Fifty pounds of camera gear that stayed home because, I convinced myself, I couldn&amp;rsquo;t be arsed to carry fifty pounds of camera gear around with me.&lt;/p&gt;
&lt;p&gt;Unless there was some kind of cool reason to. I helped shoot a wedding and did a men&amp;rsquo;s fashion shoot. Several portraits, too. But mostly, the gear stayed at home, collecting dust.&lt;/p&gt;
&lt;p&gt;I mean, fifty pounds. I&amp;rsquo;m a relatively fit person, but come on.&lt;/p&gt;
&lt;p&gt;So I sold it all and downsized to a small micro-four-thirds setup. A kit zoom, a couple of fast primes, and a speedlight. Fifty pounds traded for five and a bucketful of cash. &lt;em&gt;Now&lt;/em&gt; I&amp;rsquo;d start taking more photos. &lt;em&gt;Obviously&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t, of course.&lt;/p&gt;
&lt;p&gt;Thing is, I &lt;em&gt;do&lt;/em&gt; enjoy photography. Crafting an image is immensely satisfying. Capturing a great moment is fun. But I&amp;rsquo;ve gotten lazy about it, because the best camera is the one that&amp;rsquo;s with you, and by gum the camera on my iPhone is pretty fantastic, all things considered.&lt;/p&gt;
&lt;p&gt;But it&amp;rsquo;s not the same. And while I don&amp;rsquo;t want to become fifty-pound camera-guy again, I do think I&amp;rsquo;ll take a cue from &lt;a href=&#34;https://ashfurrow.com/blog/photography-retrospective/&#34;&gt;Ash Furrow&lt;/a&gt; and start walking around with my little PEN day-to-day.&lt;/p&gt;
&lt;p&gt;I mean, look how &lt;em&gt;pretty&lt;/em&gt; it is.&lt;/p&gt;
&lt;p&gt;And of course, in true keeping-myself-honest fashion, I&amp;rsquo;m going to try to do a photo post every so often. Maybe once a month. Maybe some old photos, maybe some new photos, maybe a couple of words too.&lt;/p&gt;
&lt;p&gt;More —as always— tk. 📸&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swift, UnitTemperature, And Humidex</title>
      <link>https://angelostavrow.com/post/swift-unittemperature-and-humidex/</link>
      <pubDate>Fri, 12 Aug 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/swift-unittemperature-and-humidex/</guid>
      <description>&lt;p&gt;Last week, I &lt;a href=&#34;https://angelostavrow.com/post/how-about-that-heat/&#34;&gt;wrote&lt;/a&gt; about weather apps that use &lt;a href=&#34;https://developer.forecast.io&#34;&gt;the Dark Sky forecast API&lt;/a&gt; for weather data lacking the Canadian &lt;a href=&#34;https://en.wikipedia.org/wiki/Humidex&#34;&gt;humidex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Those that do tend to be riddled with ads and all kinds of content that, well, I don&amp;rsquo;t care about. And naturally, I started thinking about how I use weather apps. All I really want from my is a couple of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Current conditions, including humidex/ windchill values;&lt;/li&gt;
&lt;li&gt;Forecast conditions with highs and lows for today and tomorrow, again including humidex and windchill;&lt;/li&gt;
&lt;li&gt;Probability of precipitation for the next hour, with alerts of impending rain.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Getting the actual forecast along with alerts is a solved problem, thanks to Forecast.io. Doing conversion and such between different units is also a solved problem, thanks to the new &lt;a href=&#34;https://developer.apple.com/reference/foundation/nsmeasurement&#34;&gt;Measurement&lt;/a&gt; class in Cocoa.&lt;/p&gt;
&lt;p&gt;(&lt;a href=&#34;http://yannickloriot.com/2016/06/measurements-and-units-ios/&#34;&gt;Here&amp;rsquo;s a great starter post on Meaurement&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;So what would, say, a basic &lt;code&gt;CurrentConditions&lt;/code&gt; object look like in my ideal app? Probably something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import Foundation

struct CurrentConditions {
    var conditions: String
    var airTemperature: Measurement&amp;lt;UnitTemperature&amp;gt;
    var dewpoint: Measurement&amp;lt;UnitTemperature&amp;gt;
    
    var humidex: Measurement&amp;lt;UnitTemperature&amp;gt; {
        return Measurement(value: airTemperature.converted(to: UnitTemperature.celsius).value + 0.5555 * ((6.11 * exp(5417.7530 * ((1/273.16) - (1/dewpoint.converted(to: UnitTemperature.kelvin).value)))) - 10), unit: UnitTemperature.celsius)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We initialize this strict with some descriptive weather conditions (e.g., &amp;ldquo;cloudy&amp;rdquo;), and values for the air (i.e., actual) temperature and dewpoint. It doesn&amp;rsquo;t really matter what units we use when we pass the values in, because the calculated property &lt;code&gt;humidex&lt;/code&gt; will convert them to Celsius and Kelvin respectively, before returning a value in Celsius.&lt;/p&gt;
&lt;p&gt;Then you can simply add a switch in your weather app&amp;rsquo;s settings asking the user if they prefer apparent temperature be calculated according to heat index or humidex.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How about that heat?</title>
      <link>https://angelostavrow.com/post/how-about-that-heat/</link>
      <pubDate>Fri, 05 Aug 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/how-about-that-heat/</guid>
      <description>&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;In other news, I’m totally ready for this sweltering summer to be over.&lt;/p&gt;&amp;mdash; Angelo Stavrow (@AngeloStavrow) &lt;a href=&#34;https://twitter.com/AngeloStavrow/status/761251463213441025&#34;&gt;August 4, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;I don&amp;rsquo;t deal well with heat brought on by humidity. Which makes a Montreal summer pretty tough to deal with. Temperatures will routinely go over 30°C, but when combined with high humidity, it&amp;rsquo;ll feel even hotter.&lt;/p&gt;
&lt;p&gt;Like, three-showers-a-day-ain&amp;rsquo;t-enough hot. Grimy, unpleasant, swampy hot.&lt;/p&gt;
&lt;p&gt;And most weather apps out there don&amp;rsquo;t get it. Sure, they have a &amp;ldquo;feels like&amp;rdquo; temperature that compensates for some of it, but it never feels quite right.&lt;/p&gt;
&lt;p&gt;To really understand how it works, you need a weather app made by Canadians, for Canadians. Because Canadians use a &lt;a href=&#34;https://en.wikipedia.org/wiki/Humidex&#34;&gt;humidex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/2016-08-05/feels-like.png&#34; alt=&#34;Feels like&#34;&gt;&lt;/p&gt;
&lt;p&gt;Humidex distinguishes itself from the US &lt;a href=&#34;https://en.wikipedia.org/wiki/Heat_index&#34;&gt;heat index&lt;/a&gt; in that it&amp;rsquo;s proportional to the dew point, not relative humidity. And generally, it&amp;rsquo;s significantly higher.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve seen days where the &amp;ldquo;actual&amp;rdquo; temperature (i.e., air temperature) is in the high twenties, but the &amp;ldquo;feels like&amp;rdquo; humidex is mid-thirties. That&amp;rsquo;s a huge difference—what&amp;rsquo;s comfortable to wear at one temperature may not be at the other. Or worse: if you&amp;rsquo;re living with some medical conditions, the decision to leave the comfort of air conditioning may even be fatal.&lt;/p&gt;
&lt;p&gt;A cursory look at weather apps (I&amp;rsquo;ve used many) shows that most use &lt;a href=&#34;https://forecast.io&#34;&gt;Forecast.io&lt;/a&gt;&amp;lsquo;s API. It&amp;rsquo;s a great data source, especially for its hyper-local precipitation forecasts. But—and this of course makes sense, given market sizes—it doesn&amp;rsquo;t use Canadian humidex calculations to derive the apparent temperature, so I never feel like I can trust these apps for forecast highs.&lt;/p&gt;
&lt;p&gt;All I really want from a weather app is accurate alerts for incoming precipitation, and (humidex-corrected) forecast highs for the day. I&amp;rsquo;ve keep telling myself that I don&amp;rsquo;t want to take on new projects, but having to switch between a couple of apps every day is kind of a pain.&lt;/p&gt;
&lt;p&gt;🤔&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Give-A-💩 Manifesto</title>
      <link>https://angelostavrow.com/post/give-a-smiling-poop-manifesto/</link>
      <pubDate>Fri, 29 Jul 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/give-a-smiling-poop-manifesto/</guid>
      <description>&lt;p&gt;&lt;strong&gt;WHEREAS IT IS AGREED THAT&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There exist &lt;strong&gt;THINGS&lt;/strong&gt; which one &lt;strong&gt;MUST DO&lt;/strong&gt;; and&lt;/li&gt;
&lt;li&gt;There exist &lt;strong&gt;THINGS&lt;/strong&gt; which one &lt;strong&gt;WOULD ENJOY DOING&lt;/strong&gt;; and&lt;/li&gt;
&lt;li&gt;The above-listed &lt;strong&gt;THINGS&lt;/strong&gt; may be &lt;strong&gt;MUTUALLY EXCLUSIVE&lt;/strong&gt;;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;IT IS RESOLVED THAT&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Where a &lt;strong&gt;THING&lt;/strong&gt; is &lt;strong&gt;ENJOYED&lt;/strong&gt; and &lt;strong&gt;MUST BE DONE&lt;/strong&gt;, one shall &lt;strong&gt;REVEL&lt;/strong&gt; for one can easily give a 💩 about it; and&lt;/li&gt;
&lt;li&gt;Where a &lt;strong&gt;THING&lt;/strong&gt; is &lt;strong&gt;ENJOYED&lt;/strong&gt; but whose execution is &lt;strong&gt;NOT REQUIRED&lt;/strong&gt;, one shall strive to &lt;strong&gt;MAKE THE TIME&lt;/strong&gt; for it, for it is good to do things one gives a 💩 about; and&lt;/li&gt;
&lt;li&gt;Where a &lt;strong&gt;THING&lt;/strong&gt; is &lt;strong&gt;NOT ENJOYABLE&lt;/strong&gt; but &lt;strong&gt;MUST BE DONE&lt;/strong&gt;, one shall &lt;a href=&#34;https://angelostavrow.com/post/or-just-strive-to-be-the-best/&#34;&gt;give a 💩 about executing the &lt;strong&gt;THING&lt;/strong&gt; with &lt;strong&gt;CARE AND ATTENTION&lt;/strong&gt;&lt;/a&gt;; and&lt;/li&gt;
&lt;li&gt;Where a &lt;strong&gt;THING&lt;/strong&gt; is &lt;strong&gt;NOT ENJOYABLE&lt;/strong&gt; and is &lt;strong&gt;NOT REQUIRED&lt;/strong&gt;, one shall strive to &lt;strong&gt;ELIMINATE IT&lt;/strong&gt; from the list of things one invites into their lives, for one should strive to fill their lives with things one gives a 💩 about.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;AND THE MANIFESTO IS THUS RELEASED FOR APPLICATION&lt;/strong&gt; on this day in the presence of these &lt;strong&gt;WITNESSES&lt;/strong&gt;, the &lt;strong&gt;READERS&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wallet-based business cards</title>
      <link>https://angelostavrow.com/post/wallet-based-business-cards/</link>
      <pubDate>Fri, 22 Jul 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/wallet-based-business-cards/</guid>
      <description>&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Fun little morning project. 📇📲&lt;br&gt;&lt;br&gt;(Barcode is blurred because I’m not quite done yet. 🙃) &lt;a href=&#34;https://t.co/4eXh5NdTCP&#34;&gt;pic.twitter.com/4eXh5NdTCP&lt;/a&gt;&lt;/p&gt;&amp;mdash; Angelo Stavrow (@AngeloStavrow) &lt;a href=&#34;https://twitter.com/AngeloStavrow/status/731444850118279168&#34;&gt;May 14, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;A couple of months ago I played a little bit with PassKit and Wallet after finding &lt;a href=&#34;http://www.atomicbird.com/blog/passbook-card-details&#34;&gt;this little tutorial&lt;/a&gt; on adding a business card to Passbook (now named Wallet).&lt;/p&gt;
&lt;p&gt;A Wallet pass is pretty easy to create—just fill some metadata into a JSON file, create a Pass Type ID certificate in your Apple Developer account, and then run a signing utility. The whole process is pretty well described, step-by-step, &lt;a href=&#34;http://www.myuiviews.com/2014/06/01/step-by-step-create-a-passbook-business-card.html&#34;&gt;here&lt;/a&gt;, so I won&amp;rsquo;t re-iterate, but here are a couple of little perils and pitfalls to watch out for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To run &lt;code&gt;signpass&lt;/code&gt;, you&amp;rsquo;ll need to &lt;a href=&#34;https://developer.apple.com/services-account/download?path=/iOS/Wallet_Support_Materials/WalletCompanionFiles.zip&#34;&gt;download the Xcode project&lt;/a&gt; in the &lt;a href=&#34;https://developer.apple.com/library/prerelease/content/documentation/UserExperience/Conceptual/PassKit_PG/&#34;&gt;Wallet Developer Guide&lt;/a&gt;. Unzip the download and open &lt;strong&gt;signpass.xcodeproj&lt;/strong&gt; in the &lt;strong&gt;signpass&lt;/strong&gt; folder. Build it, right-click on the executable in the &lt;strong&gt;Products&lt;/strong&gt; folder in Xcode&amp;rsquo;s file navigator, and select &amp;ldquo;Show in Finder&amp;rdquo;; drag and drop it into your Documents folder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After you run &lt;code&gt;signpass&lt;/code&gt; from the Terminal, run &lt;code&gt;open PassName.pkpass&lt;/code&gt; and it&amp;rsquo;ll open in a Preview QuickLook window. From here, you can click on the &amp;ldquo;Add to Wallet&amp;rdquo; button and it&amp;rsquo;ll go up to iCloud and download to your iOS devices, without having to upload it to a server.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/2016-07-22/pkpass-open-front.png&#34; alt=&#34;Preview QuickLook&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If the pass doesn&amp;rsquo;t show up in your iOS device, there&amp;rsquo;s probably a typo in your JSON. Look for extra/missing commas, parentheses, square brackets, &amp;amp;cet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can double-check by launching Xcode&amp;rsquo;s Simulator, launching the Wallet app, and dragging and dropping your .pkpass file from the Finder into your Simulator Wallet. If everything checks out, it&amp;rsquo;ll ask if you want to add it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/2016-07-22/add-to-simulator.png&#34; alt=&#34;Simulator add pass&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you&amp;rsquo;re uploading it to S3, make sure you set the Content-Type to &lt;code&gt;application/vnd.apple.pkpass&lt;/code&gt;. Normally, this is a dropdown, but you can also just type whatever you want in there and S3 will accept it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://angelostavrow.com/images/2016-07-22/set-content-type.png&#34; alt=&#34;S3 Content-Type&#34;&gt;&lt;/p&gt;
&lt;p&gt;And now you have a fancy electronic business card that other iPhone users can scan and download. Have fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using XCTAssertThrowsError in your Swift tests</title>
      <link>https://angelostavrow.com/post/using-xctassertthrowserror-in-your-swift-tests/</link>
      <pubDate>Fri, 15 Jul 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/using-xctassertthrowserror-in-your-swift-tests/</guid>
      <description>&lt;p&gt;There&amp;rsquo;s a new kid on the XCTest block, and its name is &lt;a href=&#34;https://developer.apple.com/reference/xctest/1500795-xctassertthrowserror&#34;&gt;XCTAssertThrowsError&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t been able to find much on its usage aside from its original discussion on the &lt;a href=&#34;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160104/006091.html&#34;&gt;swift-evolution mailing list&lt;/a&gt; and a &lt;a href=&#34;http://stackoverflow.com/questions/36190161/xctassertthrowserror-strange-behavior-with-custom-errorhandler&#34;&gt;Stack Overflow question&lt;/a&gt;, so here&amp;rsquo;s a little bit of a discussion on how I&amp;rsquo;m using it in a new project of mine.&lt;/p&gt;
&lt;p&gt;Swift introduced some pretty neat error handling in 2.0, and &lt;a href=&#34;https://www.natashatherobot.com/swift-2-error-handling/&#34;&gt;Natasha the Robot provided a nice guide&lt;/a&gt; on how to throw an error in your code.&lt;/p&gt;
&lt;p&gt;So, as a contrived example, let&amp;rsquo;s say you have a class called &lt;code&gt;AccountManager&lt;/code&gt; that manages a set of &lt;code&gt;Account&lt;/code&gt; objects:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enum ListError: ErrorType {
    case AccountAlreadyExistsInList
    case AccountDoesNotExistInList
}
	
class AccountManager {
    var accountList = Set&amp;lt;Account&amp;gt;()    // Account conforms to Hashable, Equatable. I promise.
	
    func add(_ account: Account) throws {
        if (accountList.contains(account)) {
            throw ListError.AccountAlreadyExistsInList
        }
        else {
            accountList.insert(account)
        }
    }

    func remove(_ account: Account) throws {
        if (accountList.contains(account)) {
            accountList.remove(account)
        }
        else {
            throw ListError.AccountDoesNotExistInList
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Note that in Swift 3, &lt;code&gt;ErrorType&lt;/code&gt; has been renamed to &lt;a href=&#34;https://developer.apple.com/reference/swift/errorprotocol&#34;&gt;&lt;code&gt;ErrorProtocol&lt;/code&gt;&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;A couple of things to know about the &lt;a href=&#34;https://developer.apple.com/reference/swift/set&#34;&gt;Set&lt;/a&gt; type:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No duplicates can be added, a Set is silent when you try to add an element that it already contains.&lt;/li&gt;
&lt;li&gt;Unless you&amp;rsquo;re checking its return type, Set is also silent when you try to remove an element that it doesn&amp;rsquo;t contain&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; rel=&#34;footnote&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While this protects the integrity of the Set, it could be a bit frustrating for consumers of the &lt;code&gt;AccountManager&lt;/code&gt; class, because there&amp;rsquo;s no way to surface what&amp;rsquo;s going on when we try to add a duplicate or remove a non-existent element. So, we throw!&lt;/p&gt;
&lt;p&gt;Specifically, what we&amp;rsquo;re doing in the &lt;code&gt;AccountManager&lt;/code&gt; class is checking to see if the &lt;code&gt;Account&lt;/code&gt; argument we&amp;rsquo;re passing to the &lt;code&gt;add(account:)&lt;/code&gt; and &lt;code&gt;remove(account:)&lt;/code&gt; functions already exists in the &lt;code&gt;accountList&lt;/code&gt; Set, and handling the result appropriately:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If we&amp;rsquo;re trying to &lt;code&gt;remove&lt;/code&gt; an &lt;code&gt;Account&lt;/code&gt; from the &lt;code&gt;accountList&lt;/code&gt; and it exists, go ahead and do so. If it doesn&amp;rsquo;t, throw &lt;code&gt;ListError.AccountDoesNotExistInList&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If we&amp;rsquo;re trying to &lt;code&gt;add&lt;/code&gt; an &lt;code&gt;Account&lt;/code&gt; to the &lt;code&gt;accountList&lt;/code&gt; and it exists, throw &lt;code&gt;ListError.AccountAlreadyExistsInList&lt;/code&gt;. If it doesn&amp;rsquo;t, go ahead and add it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And of course, in our unit tests, we want to check that these errors are thrown properly. Enter &lt;code&gt;XCTAssertThrowsError&lt;/code&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Test that adding a duplicate account to an accountList throws an error.
func testAdd_AddingDuplicateAccount_ThrowsAccountAlreadyExistsInList() {
    let accounts = AccountManager()
    let firstAccount = Account(descriptiveName: &amp;quot;Account 1&amp;quot;, accountNumber: &amp;quot;12345AZ&amp;quot;)
    let secondAccount = Account(descriptiveName: &amp;quot;Account 1&amp;quot;, accountNumber: &amp;quot;12345AZ&amp;quot;)

    accounts.add(firstAccount)

    XCTAssertThrowsError(try accounts.add(secondAccount))
}

// Test that removing an account from an empty accountList throws an error.
func testRemove_RemovingAccountFromEmptyList_ThrowsAccountDoesNotExistInList() {
    let accounts = AccountManager()
    let firstAccount = Account(descriptiveName: &amp;quot;Account 1&amp;quot;, accountNumber: &amp;quot;12345AZ&amp;quot;)
    
    XCTAssertThrowsError(try accounts.remove(firstAccount))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the tests and they&amp;rsquo;ll pass, because the tested expression throws an error. Cool!&lt;/p&gt;
&lt;p&gt;This is a good start, but we&amp;rsquo;re only testing that &lt;em&gt;an&lt;/em&gt; error is thrown. That&amp;rsquo;s not good enough, of course, because &lt;em&gt;any&lt;/em&gt; error thrown will make this test pass, but we&amp;rsquo;re looking for a &lt;em&gt;specific&lt;/em&gt; error. Let&amp;rsquo;s take a closer look at the declaration for &lt;code&gt;XCTAssertThrowsError&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func XCTAssertThrowsError&amp;lt;T&amp;gt;(_ expression: @autoclosure () throws -&amp;gt; T,
                                _ message: @autoclosure () -&amp;gt; String = default,
                                     file: StaticString = #file,
                                     line: UInt = #line,
                             errorHandler: (error: ErrorProtocol) -&amp;gt; Void = default)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;ve split the signature up so that there&amp;rsquo;s just one argument per line. The description for each argument is &lt;a href=&#34;https://developer.apple.com/reference/xctest/1500795-xctassertthrowserror#parameters&#34;&gt;available in the  documentation&lt;/a&gt;, so I won&amp;rsquo;t repeat them here, but the important thing to note is that &lt;code&gt;XCTAssertThrowsError&lt;/code&gt; is actually a &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html&#34;&gt;generic&lt;/a&gt; on &lt;code&gt;T&lt;/code&gt;. This means that in the &lt;code&gt;expression&lt;/code&gt; argument, we can add a closure that checks to see if, in fact, an error of type &lt;code&gt;T&lt;/code&gt; is being thrown.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s add those checks to our two tests:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Test that adding a duplicate account to an accountList throws an AccountAlreadyExistsInList error.
    func testAdd_AddingDuplicateAccount_ThrowsAccountAlreadyExistsInList() {
    let accounts = AccountManager()
    let firstAccount = Account(descriptiveName: &amp;quot;Account 1&amp;quot;, accountNumber: &amp;quot;12345AZ&amp;quot;)
    let secondAccount = Account(descriptiveName: &amp;quot;Account 1&amp;quot;, accountNumber: &amp;quot;12345AZ&amp;quot;)
    
    accounts.add(firstAccount)
    
    XCTAssertThrowsError(try accounts.add(secondAccount)) { (error) -&amp;gt; Void in
        XCTAssertEqual(error as? ListError, ListError.AccountAlreadyExistsInList)
    }
}

// Test that removing an account from an empty accountList throws an AccountDoesNotExistInList error.
func testRemove_RemovingAccountFromEmptyList_ThrowsAccountDoesNotExistInList() {
    let accounts = AccountManager()
    let firstAccount = Account(descriptiveName: &amp;quot;Account 1&amp;quot;, accountNumber: &amp;quot;12345AZ&amp;quot;)

    XCTAssertThrowsError(try accounts.remove(firstAccount)) { (error) -&amp;gt; Void in
        XCTAssertEqual(error as? ListError, ListError.AccountDoesNotExistInList)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&amp;rsquo;re &lt;em&gt;sure&lt;/em&gt; that we&amp;rsquo;re testing that the right error is being thrown in our tests: in the closure, we call &lt;em&gt;another&lt;/em&gt; assertion, &lt;code&gt;XCTAssertEqual&lt;/code&gt;, to check that the error being thrown is the type of &lt;code&gt;ListError&lt;/code&gt; that we expect.&lt;/p&gt;
&lt;p&gt;What does this mean? We no longer have to create weirdo functions that return a tuple &lt;code&gt;&amp;lt;U, V&amp;gt;&lt;/code&gt;, where &lt;code&gt;U&lt;/code&gt; is the result and &lt;code&gt;V&lt;/code&gt; is an error that you can check for.&lt;/p&gt;
&lt;p&gt;You can add other arguments to your assertion, like a message or the specific file and line number if the test fails, but for now this should be enough to get you started checking your error throwing.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
  &lt;ol&gt;
  	&lt;li class=&#34;footnote&#34; id=&#34;fn:1&#34;&gt;
  	&lt;p&gt;Of course, you &lt;i&gt;should&lt;/i&gt; be checking the return type, and you’d see that you got back &lt;code&gt;nil&lt;/code&gt;, but like I said: this is a contrived example.&lt;a href=&#34;#fnref:1&#34; title=&#34;return to article&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Posting to Hugo on GitLab Pages from iOS</title>
      <link>https://angelostavrow.com/post/posting-to-hugo-on-gitlab-pages-from-ios/</link>
      <pubDate>Fri, 08 Jul 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/posting-to-hugo-on-gitlab-pages-from-ios/</guid>
      <description>&lt;p&gt;In moving this blog to a static site generator, one concern was whether I&amp;rsquo;d still be able to work on and/or publish a post from my phone. I tend to do a fair bit of mobile drafting while I&amp;rsquo;m in the subway or waiting in line, and will sometimes publish content when I&amp;rsquo;m away from my computer. YOLO.&lt;/p&gt;
&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s a given—since that&amp;rsquo;s how the site has been setup—that you need a GitLab.com account, and &lt;a href=&#34;https://gitlab.com/pages/hugo&#34;&gt;Hugo set up with GitLab CI&lt;/a&gt; to build the site and deploy it to GitLab Pages.&lt;/p&gt;
&lt;p&gt;On my iPhone, I have &lt;a href=&#34;https://itunes.apple.com/ca/app/working-copy-powerful-git/id896694807?mt=8&amp;amp;uo=4&#34;&gt;Working Copy&lt;/a&gt;, which I use for git operations on the repository. It&amp;rsquo;s an excellent app, and when you pair it with &lt;a href=&#34;https://itunes.apple.com/ca/app/editorial/id673907758?mt=8&amp;amp;uo=4&#34;&gt;Editorial&lt;/a&gt;&amp;lsquo;s powerful workflow and text editing capabilities, you&amp;rsquo;ve got a great toolkit for repository management as well as writing.&lt;/p&gt;
&lt;p&gt;I like using issues as jumping off points for new posts (including &lt;a href=&#34;https://gitlab.com/AngeloStavrow/makebeforebreak.com/issues/4&#34;&gt;this one&lt;/a&gt;, so I also use &lt;a href=&#34;https://itunes.apple.com/ca/app/git-trident-for-github-gitlab/id983962683?mt=8&#34;&gt;Git Trident&lt;/a&gt; to manage this in GitLab from my phone. Matt&amp;rsquo;s working hard on making this the best app for handling GitHub and GitLab issues on your iOS device, and I&amp;rsquo;m especially looking forward to offline access.&lt;/p&gt;
&lt;h3 id=&#34;workflow&#34;&gt;Workflow&lt;/h3&gt;
&lt;p&gt;This post was a test for how to add content to the site from my phone, and here&amp;rsquo;s how I&amp;rsquo;m going to do it from now on:&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;Usually (but not always), an issue tagged &lt;code&gt;post idea&lt;/code&gt; is the basis for a new post. When I&amp;rsquo;m ready to write, I assign the issue to myself and set a due date for it.&lt;/li&gt;
&lt;li&gt;I then create a new branch as &lt;code&gt;n_post_post-subject_yyyy-mm-dd&lt;/code&gt; in Working Copy, where &lt;code&gt;n&lt;/code&gt; is the issue number and &lt;code&gt;yyyy-mm-dd&lt;/code&gt; is the post date. If no issue exists, I drop the &lt;code&gt;n_&lt;/code&gt; prefix in the branch name. I try to avoid setting a title, as this can change over the course of the post. &amp;ldquo;Post subject&amp;rdquo; is already pretty well defined, since I know what I want to write about.&lt;/li&gt;
&lt;li&gt;Next, I create a new text file in Working Copy under &lt;code&gt;/content/post&lt;/code&gt;, and open it in Editorial via the share sheet to start writing. I have a &lt;a href=&#34;https://smilesoftware.com/TextExpander&#34;&gt;TextExpander&lt;/a&gt; snippet to add the TOML front matter; it&amp;rsquo;s also set as a draft, to ensure it doesn&amp;rsquo;t get published accidentally.&lt;/li&gt;
&lt;li&gt;Then comes the hard part: write the post. Commit as necessary with Working Copy&amp;rsquo;s workflow for Editorial. I commit and push for a &amp;ldquo;cloud save&amp;rdquo;, or if I think I might want to continue elsewhere (i.e., on my desktop, or in a web editor&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; rel=&#34;footnote&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;When it&amp;rsquo;s all said and done, I set &lt;code&gt;&#39;draft = false&lt;/code&gt; in the front matter, commit and push with message &lt;code&gt;Closes #n&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the issue number.&lt;/li&gt;
&lt;li&gt;When I&amp;rsquo;m ready to publish, I launch Safari and go to GitLab.com to open a new merge request. Merging the draft branch into &lt;code&gt;master&lt;/code&gt; will trigger GitLab CI; once the build passes, the post will be published. I also delete the original branch.&lt;/li&gt;
&lt;li&gt;That&amp;rsquo;s it! The post is published. Enjoy a tasty, refreshing beverage!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I wrote the majority of this post on my iPhone, although I&amp;rsquo;ll admit that it does feel a bit silly to tap away on a 4.7&amp;rdquo; screen when I&amp;rsquo;ve got a 24&amp;rdquo; monitor and full-size keyboard to work with. Still, for drafting and editing, it&amp;rsquo;s great, and in a pinch (or, say, on an iPad with an external keyboard), you can keep your blog running from your iOS device without issue.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
  &lt;ol&gt;
  	&lt;li class=&#34;footnote&#34; id=&#34;fn:1&#34;&gt;
    &lt;p&gt;Web editor, you say? Why yes! You can edit a file in GitLab, then commit the changes. Neat, huh?&lt;a href=&#34;#fnref:1&#34; title=&#34;return to article&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>A six-month update</title>
      <link>https://angelostavrow.com/post/a-six-month-update/</link>
      <pubDate>Fri, 01 Jul 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/a-six-month-update/</guid>
      <description>&lt;p&gt;As I mentioned &lt;a href=&#34;https://angelostavrow.com/post/flux/&#34;&gt;last week&lt;/a&gt;, today is July 1&lt;sup&gt;st&lt;/sup&gt;, which marks a convenient half-way point for the year. On New Year&amp;rsquo;s Day, &lt;a href=&#34;https://angelostavrow.com/post/on-fresh-starts/&#34;&gt;I posted a short list of goals&lt;/a&gt; that I was hoping to make progress towards. Here&amp;rsquo;s how it all breaks down.&lt;/p&gt;
&lt;h3 id=&#34;1-post-something-here-every-friday&#34;&gt;1. Post something here every Friday.&lt;/h3&gt;
&lt;p&gt;So far, so good. I haven&amp;rsquo;t missed a single week, which I&amp;rsquo;m pretty pleased with. I&amp;rsquo;ll grant that it hasn&amp;rsquo;t always (ever?) been a particularly interesting read, but I&amp;rsquo;ve been trying hard to &lt;em&gt;keep showing up&lt;/em&gt;. Discipline isn&amp;rsquo;t easy, but it helps if you try to avoid &lt;a href=&#34;https://angelostavrow.com/post/on-streaks/&#34;&gt;breaking the streak&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;2-post-to-a-journal-at-least-once-every-day&#34;&gt;2. Post to a journal at least once every day.&lt;/h3&gt;
&lt;p&gt;I was doing pretty well with this through to the end of March, and gave up by April 22&lt;sup&gt;nd&lt;/sup&gt;. It started well, but frankly, I wasn&amp;rsquo;t comfortable in writing my deepest thoughts into a service that can&amp;rsquo;t guarantee its privacy—not that I think the fine folks at Bloom would &lt;em&gt;ever&lt;/em&gt; consider it, but if &lt;a href=&#34;http://dayoneapp.com/sync/&#34;&gt;key employees have access to the decrypted data&lt;/a&gt;, that means necessarily that there&amp;rsquo;s some risk of a data breach.&lt;/p&gt;
&lt;p&gt;And I could feel it when I was writing, too—I was self-censoring &lt;em&gt;just in case&lt;/em&gt;. And if you can&amp;rsquo;t just write whatever you want in your journal, of all places, then it&amp;rsquo;s not &lt;em&gt;really&lt;/em&gt; a journal.&lt;/p&gt;
&lt;p&gt;So, I&amp;rsquo;ve deleted whatever I&amp;rsquo;d posted there, and I&amp;rsquo;m re-thinking this goal. There&amp;rsquo;s value to writing regularly, sure, and there&amp;rsquo;s value to getting your thoughts down, but between this blog, the &lt;a href=&#34;http://breakbeforemake.com/&#34;&gt;Break Before Make tumblr blog&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/angelostavrow&#34;&gt;Twitter&lt;/a&gt;, I think I&amp;rsquo;ve got more than enough opportunity to write.&lt;/p&gt;
&lt;h3 id=&#34;3-make-real-progress-towards-my-mac-app&#34;&gt;3. Make real progress towards my Mac app.&lt;/h3&gt;
&lt;p&gt;Myeah.&lt;/p&gt;
&lt;p&gt;Well, I settled on a name and registered a domain. I keep &lt;a href=&#34;https://angelostavrow.com/post/on-moving-to-hugo-on-gitlab-pages/&#34;&gt;starting&lt;/a&gt; new &lt;a href=&#34;https://angelostavrow.com/tags/tghr/&#34;&gt;projects&lt;/a&gt; and I&amp;rsquo;ve got even more in my Someday/Maybe list. I &lt;em&gt;really&lt;/em&gt; need to focus more on this.&lt;/p&gt;
&lt;h3 id=&#34;4-contribute-to-open-source-projects&#34;&gt;4. Contribute to open-source projects.&lt;/h3&gt;
&lt;p&gt;I feel like I haven&amp;rsquo;t done too much with this yet. I&amp;rsquo;ve &lt;a href=&#34;https://about.gitlab.com/2016/03/10/setting-up-gitlab-ci-for-ios-projects/&#34;&gt;&lt;em&gt;written&lt;/em&gt; for open-source projects&lt;/a&gt;, but beyond that, this also feels like something that&amp;rsquo;s maybe taking focus away from the Mac app.&lt;/p&gt;
&lt;h3 id=&#34;5-get-in-better-shape&#34;&gt;5. Get in better shape.&lt;/h3&gt;
&lt;p&gt;After taking care of some knee issues with my physiotherapist, she gave me the green light to start getting active again. So, as of the end of March, I&amp;rsquo;ve started by jogging. My goal is to get in three 15-minute runs per week—I&amp;rsquo;m not trying to run a marathon, just improve my cardiovascular health.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s been, well, shaky.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve lapsed into no-run periods a few times, either because of an injury, or because I&amp;rsquo;ve been too lazy to get out and do it. But generally, there&amp;rsquo;s a very strong downward trend in my pace (from a 7:41 to a 6:17), so I&amp;rsquo;m happy. Moreover, it&amp;rsquo;s just been getting &lt;em&gt;easier&lt;/em&gt; to run for extended periods of time.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s high time I add some kind of strength training into the mix, though!&lt;/p&gt;
&lt;h3 id=&#34;other-salient-projects&#34;&gt;Other salient projects&lt;/h3&gt;
&lt;p&gt;As linked above, other projects have come up that I started work on.&lt;/p&gt;
&lt;p&gt;For one, you may notice the new look of this site. As of today, it&amp;rsquo;s being built by &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; and is running on &lt;a href=&#34;https://pages.gitlab.io/&#34;&gt;GitLab Pages&lt;/a&gt;. That&amp;rsquo;s been a fun little project, with the side benefit of saving me a few bucks a month, too. I&amp;rsquo;m considering cross-posting over to &lt;a href=&#34;https://medium.com/@angelostavrow&#34;&gt;Medium&lt;/a&gt;, but we&amp;rsquo;ll see. There&amp;rsquo;s some theme work &lt;a href=&#34;https://gitlab.com/AngeloStavrow/makebeforebreak.com/issues/12&#34;&gt;to be done&lt;/a&gt;, but otherwise, hello Hugo!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also &lt;a href=&#34;https://gitlab.com/AngeloStavrow/HoneyJar&#34;&gt;open-sourced my first iOS app&lt;/a&gt;, in the hopes that having it in public will embarrass me into updating it. But again, I really don&amp;rsquo;t want this to distract me from the Mac app I want to write.&lt;/p&gt;
&lt;h3 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s next&lt;/h3&gt;
&lt;p&gt;Honestly?&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know.&lt;/p&gt;
&lt;p&gt;But the intention is, for the next six months, to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keep up with writing here, on (at least) a weekly basis;&lt;/li&gt;
&lt;li&gt;keep up with improving my general fitness and health; and&lt;/li&gt;
&lt;li&gt;really get cracking on this Mac app I keep hinting at.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Will I get sidetracked? Undoubtedly. Will I venture into new little projects that may or may not be abandoned? Yeah, it&amp;rsquo;s possible. We live &lt;a href=&#34;https://angelostavrow.com/post/flux/&#34;&gt;in flux&lt;/a&gt;, after all, and it&amp;rsquo;s way more fun to explore the forest than it is to walk the path.&lt;/p&gt;
&lt;p&gt;Definitely more tk.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Flux</title>
      <link>https://angelostavrow.com/post/flux/</link>
      <pubDate>Fri, 24 Jun 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/flux/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Reminder: as of next week, the RSS feed for this site is moving! If you subscribe, please be sure to point your favourite reader to:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://makebeforebreak.com/index.xml&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next week is July the first. It&amp;rsquo;s Canada Day here, which means it&amp;rsquo;s a national holiday, but in Montreal, it&amp;rsquo;s also an unofficial moving day.&lt;/p&gt;
&lt;p&gt;So it&amp;rsquo;s &lt;em&gt;a propos&lt;/em&gt; that this site will be moving over to its new digs on that same day.&lt;/p&gt;
&lt;p&gt;But July first also marks the halfway point of the year, a year which I started &lt;a href=&#34;https://angelostavrow.com/blog/2016/1/1/on-fresh-starts&#34;&gt;with some set of goals&lt;/a&gt;. So it&amp;rsquo;s also a good time to take stock of progress made against those goals, and make any necessary course-corrections.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t intend on revisiting that here today, but I can tell you that I know that I haven&amp;rsquo;t made the kind of progress I was hoping for. In fact, the only thing I&amp;rsquo;ve &amp;ldquo;succeeded&amp;rdquo; at, strictly speaking, is posting something here every Friday. It hasn&amp;rsquo;t always been easy, but so far &lt;a href=&#34;https://angelostavrow.com/blog/2016/4/22/on-streaks&#34;&gt;the streak has remained unbroken&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, technically, I&amp;rsquo;m looking at an 80% failure rate. That doesn&amp;rsquo;t sound encouraging at all.&lt;/p&gt;
&lt;p&gt;I could feel bad about this.&lt;/p&gt;
&lt;p&gt;But I don&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;Ash Furrow gave &lt;a href=&#34;https://m.youtube.com/watch?v=hlLhtWLghGA&#34;&gt;a great talk called &lt;em&gt;Loosely Held Strong Convictions&lt;/em&gt;&lt;/a&gt; last year. It reminded me that, despite our belief to the contrary, we exist in a state of &lt;em&gt;flux&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s strange how we unconsciously fight this. I mean, we &lt;em&gt;know&lt;/em&gt; that things—including ourselves—are constantly changing. And yet, we often try to plot rigid courses through life, despite the fact that today&amp;rsquo;s road may well be tomorrow&amp;rsquo;s wall.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s fine to change your mind. In fact, it&amp;rsquo;s encouraged. It means you&amp;rsquo;re adaptable. You&amp;rsquo;re able to go beyond living your life as a to-do list.&lt;/p&gt;
&lt;p&gt;The hard part in all of this, what I fight with the most, is whether or not I&amp;rsquo;m changing my mind because a path has become irrelevant, or just unpleasant. I may not be doing super well at getting to the gym (like, at all), but I &lt;em&gt;am&lt;/em&gt; trying to run for 15 minutes or so, three times a week.&lt;/p&gt;
&lt;p&gt;Except if it&amp;rsquo;s raining.&lt;/p&gt;
&lt;p&gt;Or if I really need to get into the office soon.&lt;/p&gt;
&lt;p&gt;Or maybe if I woke up with a bit of a gurgle in my tummy.&lt;/p&gt;
&lt;p&gt;Discipline is &lt;em&gt;hard&lt;/em&gt;. Which means it&amp;rsquo;s way more valuable than &lt;em&gt;motivation&lt;/em&gt;. It&amp;rsquo;s easy to do the pleasant thing when you&amp;rsquo;re motivated; it&amp;rsquo;s useful to do the unpleasant thing because you&amp;rsquo;re disciplined.&lt;/p&gt;
&lt;p&gt;So, yeah. By all means, make changes to your opinions and your plans. But do it because it&amp;rsquo;s a good idea, not because it makes your life easier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On moving to Hugo on GitLab Pages</title>
      <link>https://angelostavrow.com/post/on-moving-to-hugo-on-gitlab-pages/</link>
      <pubDate>Fri, 17 Jun 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-moving-to-hugo-on-gitlab-pages/</guid>
      <description>&lt;p&gt;This week, I took a hiatus from the &lt;a href=&#34;https://angelostavrow.com/tags/tghr/&#34;&gt;refactoring fun&lt;/a&gt; I&amp;rsquo;ve undertaken to (finally) move the blog over to a static site generator.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://angelostavrow.com/blog/2016/1/21/on-moving-preparations&#34;&gt;I&amp;rsquo;ve written before&lt;/a&gt; about my plans to move to &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, and that&amp;rsquo;s now complete. Since the beginning of the year, all posts have been written as Markdown files that I can easily grab and format with the necessary front matter. Before then, I hadn&amp;rsquo;t written very much, and in fact I&amp;rsquo;ve dropped a couple of old posts that I felt didn&amp;rsquo;t add to the site in any way.&lt;/p&gt;
&lt;p&gt;The site-generation files exist in a &lt;a href=&#34;https://gitlab.com/AngeloStavrow/makebeforebreak.com&#34;&gt;GitLab repo&lt;/a&gt;. I treat this site as I would any other software project; &lt;a href=&#34;https://gitlab.com/AngeloStavrow/makebeforebreak.com/issues&#34;&gt;issues&lt;/a&gt; are opened to add or modify things (including posts), a branch is created to address these issues, and when the work is done, the changes are merged into &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Whenever something happens on &lt;code&gt;master&lt;/code&gt;, GitLab&amp;rsquo;s CI kicks in and a shared runner picks up the job, builds the site, and uploads the &lt;code&gt;public/&lt;/code&gt; folder to &lt;a href=&#34;https://pages.gitlab.io&#34;&gt;GitLab Pages&lt;/a&gt;. This is one of the easiest ways to set up continuous deployment for the site, but when I started trying it out &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/issues/1390&#34;&gt;there was an open issue&lt;/a&gt; to resolve for performance—it could take hours before the changes went live. That&amp;rsquo;s gotten much better since GitLab 8.9RC3 was deployed, and I only make one post per week so it&amp;rsquo;s not that big a deal—but if you need to keep things up-to-the-minute fresh it&amp;rsquo;s not a bad idea to set up a project-specific runner instead to build and deploy your site.&lt;/p&gt;
&lt;p&gt;The official deploy date of the site is—as you can see from the &lt;a href=&#34;https://gitlab.com/AngeloStavrow/makebeforebreak.com/milestones/1&#34;&gt;&lt;code&gt;1.0&lt;/code&gt; milestone&lt;/a&gt;—Friday, July 1&lt;sup&gt;st&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;One more thing: &lt;strong&gt;the RSS feed for this site will be changing.&lt;/strong&gt; &lt;em&gt;If&lt;/em&gt; you subscribe to the feed, &lt;strong&gt;please update your link&lt;/strong&gt; to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://makebeforebreak.com/index.xml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;More tk!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A moving update</title>
      <link>https://angelostavrow.com/post/a-moving-update/</link>
      <pubDate>Fri, 10 Jun 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/a-moving-update/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m in the process of (finally) finalizing the move of this site to &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;No, for real.&lt;/p&gt;
&lt;p&gt;Most content is already in place. A few older posts need to be added, and some info pages are to be added. This is normal-priority.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using a slightly-modified built-in template to render the site. There a few more modifications to make, but this is low-priority.&lt;/p&gt;
&lt;p&gt;A commenting platform will be added. This is also normal-priority.&lt;/p&gt;
&lt;p&gt;I want to explore adding SSL to the site, but this is low-priority.&lt;/p&gt;
&lt;p&gt;Finally, a deploy strategy is to be set up—this is high-priority. The plan right now is to have the following workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Merge in some changes (i.e. New post, updating old content, &amp;amp;cet.);&lt;/li&gt;
&lt;li&gt;Merge commit triggers CI to build the site;&lt;/li&gt;
&lt;li&gt;When CI succeeds, deploy the built site to the web host.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will give me the opportunity to post from either my computer or my phone without issue. Then it&amp;rsquo;s just a question of reconfiguring DNS to serve up the new site.&lt;/p&gt;
&lt;p&gt;If all goes well, next week&amp;rsquo;s post should be on the new platform!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TGHR: Testing the units</title>
      <link>https://angelostavrow.com/post/tghr-testing-the-units/</link>
      <pubDate>Fri, 03 Jun 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/tghr-testing-the-units/</guid>
      <description>&lt;blockquote&gt;&lt;strong&gt;The Great HoneyJar Refactoring&lt;/strong&gt; is a series of posts in which I take the first iOS app I ever wrote, &lt;a href=&#34;http://droppedbits.com/honeyjar/&#34;&gt;HoneyJar&lt;/a&gt;, and refactor it out of its original burning-dumpster-fire state and into a modern app. And I&#39;m doing it &lt;a href=&#34;https://gitlab.com/AngeloStavrow/HoneyJar&#34;&gt;in public&lt;/a&gt;.&lt;/blockquote&gt;
&lt;p&gt;Earlier this week, &lt;a href=&#34;https://twitter.com/AngeloStavrow/status/738053482490527744&#34;&gt;I tweeted&lt;/a&gt; about my adventures in trying to add a test suite to HoneyJar.&lt;/p&gt;
&lt;p&gt;The idea is this: I want to be sure that I&amp;rsquo;m not breaking anything in the app, as it exists right now, when I start refactoring. Without an existing test suite, I have no way of knowing if I&amp;rsquo;m creating any regressions.&lt;/p&gt;
&lt;p&gt;The TDD approach is to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write a test that checks a particular public method against a particular condition;&lt;/li&gt;
&lt;li&gt;Write the code that makes the test pass; and&lt;/li&gt;
&lt;li&gt;Repeat steps 1 and 2 until you&amp;rsquo;re done writing the method / class / app.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The tests come first, and the code &amp;ldquo;fills in the blanks&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;ve got a legacy codebase&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; rel=&#34;footnote&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, however, does it still make sense to write failing tests first? Probably not.&lt;/p&gt;
&lt;p&gt;Furthermore, what if it&amp;rsquo;s just not &lt;em&gt;possible&lt;/em&gt; to test certain methods or classes, because of the way the code is structured? If you haven&amp;rsquo;t written the code with testing in mind, then it might be too coupled or complex to test after the fact.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Stop writing legacy code. Do not write new features without unit testing. You are just making the code base worse and getting further away from introducing tests into your system. Get your testing infrastructure set up and a few tests running successfully and it will be much easier to think about introducing tests for the rest of the code.&lt;/p&gt;
&lt;p&gt;— Dan Lee, &lt;a href=&#34;https://danlimerick.wordpress.com/2012/04/25/tdd-when-up-to-your-neck-in-legacy-code/&#34;&gt;&lt;em&gt;TDD when up to your neck in legacy code&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Right now, what&amp;rsquo;s making me a little bit crazy is that I&amp;rsquo;ll open a class to start adding some unit tests, see all kinds of ways to improve the code before adding the tests, and have to remind myself that I&amp;rsquo;ve made a promise not to touch the code until the test suite is in place.&lt;/p&gt;
&lt;p&gt;SO. FRUSTRATING.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s &lt;em&gt;especially&lt;/em&gt; frustrating when you realize that you&amp;rsquo;d written something that you can&amp;rsquo;t really test, but you&amp;rsquo;re not allowing yourself to fix it.&lt;/p&gt;
&lt;p&gt;But we have a great way of getting around that. &lt;a href=&#34;https://angelostavrow.com/blog/2016/5/13/on-comments&#34;&gt;Comments&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, here&amp;rsquo;s what I&amp;rsquo;m doing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the class to which I want to add tests;&lt;/li&gt;
&lt;li&gt;Add a new test case class for said tests;&lt;/li&gt;
&lt;li&gt;Scan through the class under test and grind my teeth at obvious problems;&lt;/li&gt;
&lt;li&gt;Take three deep breaths;&lt;/li&gt;
&lt;li&gt;Start adding whatever tests that I can add without changing the code; and&lt;/li&gt;
&lt;li&gt;Add thorough &lt;code&gt;//TODO&lt;/code&gt; comments on &amp;ldquo;next steps&amp;rdquo; for refactoring this class—obvious problems, how to improve testability, &amp;amp;cet.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;m going to go through doing this for the entire codebase first. I &lt;em&gt;could&lt;/em&gt; add some tests for a class, then refactor it, then move on to the next one, but then I have no way of knowing if I&amp;rsquo;m making a change that will somehow propagate through the app and trigger a failure elsewhere. So, while I&amp;rsquo;m not especially happy with the coverage I&amp;rsquo;m getting right now, it&amp;rsquo;s better this way.&lt;/p&gt;
&lt;p&gt;Once &lt;a href=&#34;https://gitlab.com/AngeloStavrow/HoneyJar/issues/2&#34;&gt;the issue is closed&lt;/a&gt;, I&amp;rsquo;ll start tackling the actual refactoring—and I&amp;rsquo;ll feel more like the project is ready for others to work on, too. For me, at least, I t&amp;rsquo;s really hard to make changes to a codebase I&amp;rsquo;m unfamiliar with if I don&amp;rsquo;t have the safety net of a test suite.&lt;/p&gt;
&lt;p&gt;As always, more tk.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
  &lt;ol&gt;
  	&lt;li class=&#34;footnote&#34; id=&#34;fn:1&#34;&gt;
  &lt;p&gt;By &#34;legacy codebase&#34;, here, we mean untested code, i.e., a codebase with no pre-existing test suite.&lt;a href=&#34;#fnref:1&#34; title=&#34;return to article&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>TGHR: Opening the source</title>
      <link>https://angelostavrow.com/post/tghr-opening-the-source/</link>
      <pubDate>Sat, 28 May 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/tghr-opening-the-source/</guid>
      <description>&lt;blockquote&gt;&lt;strong&gt;The Great HoneyJar Refactoring&lt;/strong&gt; is a series of posts in which I take the first iOS app I ever wrote, &lt;a href=&#34;http://droppedbits.com/honeyjar/&#34;&gt;HoneyJar&lt;/a&gt;, and refactor it out of its original burning-dumpster-fire state and into a modern app. And I&#39;m doing it &lt;a href=&#34;https://gitlab.com/AngeloStavrow/HoneyJar&#34;&gt;in public&lt;/a&gt;.&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://angelostavrow.com/blog/2016/5/20/the-great-honeyjar-refactoring&#34;&gt;Last week&lt;/a&gt; I introduced an idea I had: to open-source my first-ever iOS app, embarrassing as it might be, and refactor it out in the open.&lt;/p&gt;
&lt;p&gt;Over the last week, I handled the open-sourcing of the app. This took a bit more time than I expected, and normally this should be done &lt;em&gt;before&lt;/em&gt; releasing the project to the wild, but I figured it might be interesting to see just what the process was, what I learned, and some resources I found along the way.&lt;/p&gt;
&lt;h2 id=&#34;the-starting-point&#34;&gt;The starting point&lt;/h2&gt;
&lt;p&gt;HoneyJar, in its closed-source state, was very clearly an &amp;ldquo;I&amp;rsquo;m learning as I go and am super excited to ship&amp;rdquo; kind of project. It had a &lt;a href=&#34;https://gitlab.com/AngeloStavrow/HoneyJar/blob/4b5fa1653ac040ebe6f0896bd17b4ba463fc80aa/README.md&#34;&gt;README&lt;/a&gt;, kinda, which really just re-iterated some tagline-style description of the project, and that&amp;rsquo;s it. Unit tests were few and far between, comments were… &lt;a href=&#34;https://angelostavrow.com/blog/2016/5/13/on-comments&#34;&gt;not awesome&lt;/a&gt;, and there was no real structure in place to make it useful for other contributors.&lt;/p&gt;
&lt;p&gt;So the first step was to do exactly that. I opened the &lt;a href=&#34;https://gitlab.com/AngeloStavrow/HoneyJar/issues/1&#34;&gt;first issue&lt;/a&gt; and set up a task list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a CONTRIBUTING document&lt;/li&gt;
&lt;li&gt;Add a LICENSE document&lt;/li&gt;
&lt;li&gt;Add a CHANGELOG document&lt;/li&gt;
&lt;li&gt;Update the README to provide more information on the project&lt;/li&gt;
&lt;li&gt;Set up GitLab continuous integration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay. I know. That &lt;em&gt;sounds&lt;/em&gt; like a pretty straightforward list. Quick and easy to add. Turns out, you should put a little effort into these things.&lt;/p&gt;
&lt;h2 id=&#34;readez-moi&#34;&gt;Readez-moi&lt;/h2&gt;
&lt;p&gt;The first thing most people will see in a project is the README file. This should provide some information on how to install/use the project, where to find further info on licensing and contributing, &amp;amp;cet. But how much info? What exactly do I need to add?&lt;/p&gt;
&lt;p&gt;I found &lt;a href=&#34;https://gist.github.com/PurpleBooth/109311bb0361f32d87a2&#34;&gt;an excellent template&lt;/a&gt; by &lt;a href=&#34;https://github.com/PurpleBooth&#34;&gt;Billie Thompson&lt;/a&gt; that fits the bill nicely. While I&amp;rsquo;ve commented out a bunch of stuff that isn&amp;rsquo;t necessarily relevant (or maybe not relevant yet), I think it provides a pretty good overview of the what, who, why, and hows of the project. I&amp;rsquo;m relatively happy with the way the &lt;a href=&#34;https://gitlab.com/AngeloStavrow/HoneyJar/blob/master/README.md&#34;&gt;README&lt;/a&gt; turned out.&lt;/p&gt;
&lt;h2 id=&#34;with-every-change-log-log-log&#34;&gt;With every change, log, log, log&lt;/h2&gt;
&lt;p&gt;Next up: everyone&amp;rsquo;s favourite, the &lt;a href=&#34;https://gitlab.com/AngeloStavrow/HoneyJar/blob/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;No, seriously. This either gets totally overlooked, or totally becomes a series of punchlines about episodes of Friends or whatever. In trying to figure out what needs to go into a change log, I discovered &lt;a href=&#34;http://keepachangelog.com/&#34;&gt;Keep A CHANGLELOG&lt;/a&gt;. Great resource.&lt;/p&gt;
&lt;p&gt;As you go through merging in changes, part of the merge should including updating the change log with whatever you&amp;rsquo;ve, well, changed. As the project maintainers indicate, typical sections are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Added&lt;/code&gt; for new features.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Changed&lt;/code&gt; for changes in existing functionality.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Deprecated&lt;/code&gt; for once-stable features removed in upcoming releases.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Removed&lt;/code&gt; for deprecated features removed in this release.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fixed&lt;/code&gt; for any bug fixes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Security&lt;/code&gt; to invite users to upgrade in case of vulnerabilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Additionally—I love this— every subtitle of the document should be a link to a &lt;code&gt;git compare&lt;/code&gt; of the previous and current tags (or &lt;code&gt;HEAD&lt;/code&gt;, if you&amp;rsquo;re working on an unreleased version).&lt;/p&gt;
&lt;p&gt;Excellent idea.&lt;/p&gt;
&lt;h2 id=&#34;license-to-thrive&#34;&gt;License to thrive&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.codinghorror.com/pick-a-license-any-license/&#34;&gt;Jeff Atwood said it in 5 words&lt;/a&gt;. Pick a license. This is important, or you&amp;rsquo;re pretty much putting your work out there without letting anyone know if they can use it. Picking a license helps you both cut the overhead of having to reply to emails (&amp;ldquo;can I use this code?&amp;quot;) while putting down some ground rules on how your work can be used.&lt;/p&gt;
&lt;p&gt;I went with a simple &lt;a href=&#34;https://gitlab.com/AngeloStavrow/HoneyJar/blob/master/LICENSE&#34;&gt;3-clause BSD license&lt;/a&gt;. Essentially, this is a use-as-is-without-warranty license, requiring attribution by others who redistribute your work, and written permission if they want to use my name (or my organization&amp;rsquo;s name) in any endorsement or promotion of their derived products.&lt;/p&gt;
&lt;h2 id=&#34;just-add-contributors&#34;&gt;Just add contributors&lt;/h2&gt;
&lt;p&gt;The hardest to set up was the &lt;a href=&#34;https://gitlab.com/AngeloStavrow/HoneyJar/blob/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document. Here, there are two main things I wanted to address:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Expectations of all involved (i.e., a code of conduct), and&lt;/li&gt;
&lt;li&gt;Just &lt;em&gt;how&lt;/em&gt; to contribute.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The how-to-contribute part is pretty straightforward. Everything should start with an issue, and once labels and owners are assigned, work can begin. There&amp;rsquo;s some basic info on how to report a bug vs. how to add a feature request, and I added some requirements for merge requests too. Such requirements can get pretty complex and involved, but it&amp;rsquo;s important to step back and examine the scope of the project too. We&amp;rsquo;re not building CocoaPods here; a tiny not-super-important project like HoneyJar probably won&amp;rsquo;t attract much in the way of contributions, so there&amp;rsquo;s no need for overly complex requirements for making changes.&lt;/p&gt;
&lt;p&gt;That said, I believe that &lt;em&gt;any&lt;/em&gt; project, regardless of size, has the potential for community. And a community is only as good as the expectations for interaction. In my work, as in my life, I really try to come from a position of trust, mindfulness, and open-ness, so putting together a code of conduct that embraces these values is important to me.&lt;/p&gt;
&lt;p&gt;Luckily, I&amp;rsquo;m not the only one that feels this way. The &lt;a href=&#34;http://contributor-covenant.org/version/1/4/code_of_conduct.md&#34;&gt;Contributor Covenant&lt;/a&gt; is a good place to start, and other open-source communities (&lt;a href=&#34;https://thoughtbot.com/open-source-code-of-conduct&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/blob/master/CODE_OF_CONDUCT.md&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;https://swift.org/community/&#34;&gt;3&lt;/a&gt;, as examples) have done a great job of adapting it. I&amp;rsquo;ve followed in their footsteps, and I think the code of conduct section nicely explains the let&amp;rsquo;s-be-wonderful-to-each-other feels that I want in my community.&lt;/p&gt;
&lt;h2 id=&#34;all-the-great-fails&#34;&gt;All the great fails&lt;/h2&gt;
&lt;p&gt;The last thing I absolutely wanted up and running for this first issue was to get continuous integration up and running.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;But Angelo, you don&amp;rsquo;t have a test suite set up for your project.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Yeah, I know. But the &lt;a href=&#34;https://gitlab.com/AngeloStavrow/HoneyJar/issues/2&#34;&gt;next big step&lt;/a&gt; before I start working on the actual refactoring is &lt;em&gt;exactly that&lt;/em&gt;: add a test suite for existing code. It would be downright silly to try refactoring something without making sure that you&amp;rsquo;re not breaking anything as you go through.&lt;/p&gt;
&lt;p&gt;So, I followed &lt;a href=&#34;https://about.gitlab.com/2016/03/10/setting-up-gitlab-ci-for-ios-projects/&#34;&gt;the steps in the article I wrote&lt;/a&gt; and created a new runner and a &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file, along with some sample test, to make sure everything&amp;rsquo;s working.&lt;/p&gt;
&lt;p&gt;And builds kept getting stuck with the error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Failed to authorize rights (0x1) with status: -60007.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Turns out, &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/issues/1143&#34;&gt;I needed to update the runner on my build machine&lt;/a&gt; to address some changes in Xcode 7.3—once that was done, things started building as expected. One of the great things about GitLab being an open-source project is that if you&amp;rsquo;re running into trouble, there&amp;rsquo;s likely an issue available to help you figure out what&amp;rsquo;s happening and how to fix it (and if there isn&amp;rsquo;t, open one!).&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve left the &lt;a href=&#34;https://gitlab.com/AngeloStavrow/HoneyJar/builds&#34;&gt;build history&lt;/a&gt; as-is, along with the &lt;a href=&#34;https://gitlab.com/AngeloStavrow/HoneyJar/commits/9a3e8202b2dab26bf2ed45251918cfa5c844b0fc&#34;&gt;commit history&lt;/a&gt;, as breadcrumbs to how I managed to get things working, along with the stupid mistakes like overlooked typos in your runner tags. I don&amp;rsquo;t think there&amp;rsquo;s any value in trying to hide these goofs, because they could be invaluable the next time you&amp;rsquo;re yelling at your system for not &lt;em&gt;just working come on you stupid thing everything was fine a minute ago what do you mean this tag doesn&amp;rsquo;t exist&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;onwards-and-upwards&#34;&gt;Onwards and upwards&lt;/h2&gt;
&lt;p&gt;So, the project is now, IMO, officially open-sourced. The next big step is to add the test suite, and &lt;em&gt;then&lt;/em&gt; I can move on to the fun stuff: refactoring.&lt;/p&gt;
&lt;p&gt;More tk.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Great HoneyJar Refactoring</title>
      <link>https://angelostavrow.com/post/the-great-honeyjar-refactoring/</link>
      <pubDate>Fri, 20 May 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/the-great-honeyjar-refactoring/</guid>
      <description>&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Thinking about a series of posts where I take HoneyJar, the first iOS app I wrote, and refactor it out of its burning-dumpster-fire state.&lt;/p&gt;&amp;mdash; Angelo Stavrow (@AngeloStavrow) &lt;a href=&#34;https://twitter.com/AngeloStavrow/status/732279293464678400&#34;&gt;May 16, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Over the next few weeks, I&amp;rsquo;ve decided to write a series of posts about taking my first iOS app, &lt;a href=&#34;https://droppedbits.com/honeyjar&#34;&gt;HoneyJar&lt;/a&gt;, and refactoring it from its current (terrible) state into something, well, less-terrible.&lt;/p&gt;
&lt;p&gt;And I plan on doing it &lt;a href=&#34;https://gitlab.com/AngeloStavrow/HoneyJar&#34;&gt;&lt;em&gt;in public&lt;/em&gt;&lt;/a&gt;, too.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m calling this project &lt;strong&gt;The Great HoneyJar Refactoring&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;HoneyJar is a future-value calculator. As explained on the product page, you set a payment amount, a rate of return, and a period of time, and HoneyJar will give you a scenario showing how your money will grow if the amount entered amount was&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a one-time lump-sum payment&lt;/li&gt;
&lt;li&gt;a series of equal weekly payments&lt;/li&gt;
&lt;li&gt;a series of equal monthly payments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I haven&amp;rsquo;t really touched it after I released 1.0 save for a few minor updates. It could certainly use some love, as there&amp;rsquo;s a whole lot of &lt;a href=&#34;https://en.wikipedia.org/wiki/Technical_debt&#34;&gt;technical debt&lt;/a&gt; going on in that codebase. Just off the top of my head, without having poked around the repository for months, I can list the following required fixes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Refactor the main UIViewController into several lighter classes. The thing is a mess.&lt;/li&gt;
&lt;li&gt;Along a similar line, convert the project to use Storyboards and Autolayout.&lt;/li&gt;
&lt;li&gt;Add a test suite.&lt;/li&gt;
&lt;li&gt;Add localization (I&amp;rsquo;ll start with English and French, since I speak those languages pretty fluently).&lt;/li&gt;
&lt;li&gt;Ensure accessibility.&lt;/li&gt;
&lt;li&gt;Port the thing to Swift, or at least write new code in Swift.&lt;/li&gt;
&lt;li&gt;General UI/UX improvements (e.g., make the result presentation clearer).&lt;/li&gt;
&lt;li&gt;Drop support for devices running iOS 8 and before.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;m going to call this version 2.0 and I&amp;rsquo;ve &lt;a href=&#34;https://gitlab.com/AngeloStavrow/HoneyJar/milestones/1&#34;&gt;opened a milestone in GitLab&lt;/a&gt; to track my progress. The associated issues will be added over the next day or two, so you can see how what I&amp;rsquo;m working on at any given time. I&amp;rsquo;ll also be setting up CI and other (non-code) project settings.&lt;/p&gt;
&lt;p&gt;So, I&amp;rsquo;m open-sourcing the (embarrassing) version as it exists right now—&lt;em&gt;please be nice&lt;/em&gt;—and I plan on tackling one issue every couple of weeks or so, until the milestone is closed and 2.0 is released. Each time I close an issue, I&amp;rsquo;ll write up a post on the whys and wherefores of the changes.&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t yet decided if I&amp;rsquo;ll accept any merge requests during this project, but I certainly look forward to feedback on my work. To make it easier for people, to follow along, I will be mirroring the repository &lt;a href=&#34;https://github.com/DroppedBits/HoneyJar&#34;&gt;on GitHub&lt;/a&gt;, too—GitLab makes it easy to push changes to a remote repo. GitLab is my &lt;code&gt;origin&lt;/code&gt; of choice, though, thanks to the built-in continuous integration.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update (2016-05-25):&lt;/strong&gt; I&amp;rsquo;ve moved the GitHub mirror from my personal account to the organization account, since it&amp;rsquo;s Dropped Bits that&amp;rsquo;s handling the App Store stuff.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;More tk!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On comments</title>
      <link>https://angelostavrow.com/post/on-comments/</link>
      <pubDate>Fri, 13 May 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-comments/</guid>
      <description>&lt;p&gt;I &lt;a href=&#34;(http://www.makebeforebreak.com/blog/2016/4/29/on-interruption-driven-development)&#34;&gt;mentioned&lt;/a&gt; that keeping comments up-to-date with modifications in source code helps me with task-switching in a busy workplace.&lt;/p&gt;
&lt;p&gt;Of course, that doesn&amp;rsquo;t make a difference if you&amp;rsquo;re not commenting your code &lt;em&gt;well&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Therein lies the rub. I spent weeks on learning various sorting algorithms in my data structures and algorithms class, but I never really learned anything on the whys and wherefores of commenting.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been taught that&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// This is an inline comment.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and that&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* This is a block comment, which makes
 * longer comments a little bit more
 * readable.
 */
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and also how to use comments to temporarily disable portions of your source code to try something out.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s fine.&lt;/p&gt;
&lt;p&gt;But what should you put &lt;em&gt;in&lt;/em&gt; your comments?&lt;/p&gt;
&lt;p&gt;Visual Studio has a neat feature where if you type three slashes in a row (&lt;code&gt;///&lt;/code&gt;) before a method definition, it&amp;rsquo;ll expand a comment snippet that includes, as appropriate, sections for a &lt;em&gt;summary&lt;/em&gt;, what method argument &lt;em&gt;parameters&lt;/em&gt; are, and what the method &lt;em&gt;returns&lt;/em&gt;. Whatever you enter there shows up in a tool tip when you hover over the method call later.&lt;/p&gt;
&lt;p&gt;Similarly, three slashes (&lt;code&gt;///&lt;/code&gt;) in Xcode will allow you to enter comments that show up when you hover over method calls.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; rel=&#34;footnote&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Handy, for sure.&lt;/p&gt;
&lt;p&gt;But, really, when I&amp;rsquo;m heads down and trying to push code out before, say, I leave for the day, I&amp;rsquo;ve noticed that all I write in these comments is a re-iteration of the method signature—and given that I try to use very descriptive method and variable names in the first place, these extra lines of typing are pretty redundant. I&amp;rsquo;m just giving myself work for zero added benefit.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;My point here is that if you have trouble expressing basic intent of code then there are bigger issues with it &lt;a href=&#34;https://t.co/YcyuvQQxSH&#34;&gt;https://t.co/YcyuvQQxSH&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mx.Samantha (@queersorceress) &lt;a href=&#34;https://twitter.com/queersorceress/status/730484670027186176&#34;&gt;May 11, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Samantha&amp;rsquo;s tweet inspired me to think a bit more about how I comment my code. Intent is key, I agree. If the source code is the documentation&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; rel=&#34;footnote&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, then the comments should probably play the role of both the chapter summaries, &lt;em&gt;and&lt;/em&gt; the sidebars that warn of the gotchas, the perils, and the pitfalls. The bigger-picture stuff. &lt;em&gt;Why&lt;/em&gt; is this structured this way? &lt;em&gt;What&lt;/em&gt; might I have to look out for when testing this particular method?&lt;/p&gt;
&lt;p&gt;All the best practices we learn—design patterns, unit testing, &amp;amp;cet.—are meant to make our code more maintainable. Comments should be an integral part of that, not just as a repetition of what&amp;rsquo;s obvious from the source, but as a reflection of the intent of the thing.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
  &lt;ol&gt;
  &lt;li class=&#34;footnote&#34; id=&#34;fn:1&#34;&gt;
  &lt;p&gt;You definitely should pick up Erica Sadun&#39;s &lt;a href=&#34;https://leanpub.com/swiftdocumentationmarkup&#34;&gt;Swift Documentation Markup&lt;/a&gt; to really make the most of this feature, by the way.&lt;a href=&#34;#fnref:1&#34; title=&#34;return to article&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
  	&lt;li class=&#34;footnote&#34; id=&#34;fn:2&#34;&gt;
  	&lt;p&gt;I&#39;m not 100% convinced of this particular mantra. Of course, code is the canonical source of ground truth, and that&#39;s the intent, but as far as it being documentation&amp;mdash;well, that&#39;s a post for another day.&lt;a href=&#34;#fnref:1&#34; title=&#34;return to article&#34;&gt; ↩&lt;/a&gt;
  	&lt;/p&gt;
	&lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>On delays</title>
      <link>https://angelostavrow.com/post/on-delays/</link>
      <pubDate>Fri, 06 May 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-delays/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://angelostavrow.com/blog/2016/1/21/on-moving-preparations&#34;&gt;I&amp;rsquo;ve discussed the transition over to a static-site generator before&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, I&amp;rsquo;m still planning on doing this.&lt;/p&gt;
&lt;p&gt;Yes, it&amp;rsquo;s been a long time coming.&lt;/p&gt;
&lt;p&gt;So I&amp;rsquo;m setting a deadline for myself: the next post on this blog will be with the new setup. It probably won&amp;rsquo;t have all the pieces in place re: design and other &lt;a href=&#34;https://angelostavrow.com/blog/2016/3/18/on-sitemaps-for-roadp&#34;&gt;related-site plans&lt;/a&gt;, but I&amp;rsquo;ve got to start somewhere.&lt;/p&gt;
&lt;p&gt;More tk.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On interruption-driven development</title>
      <link>https://angelostavrow.com/post/on-interruption-driven-development/</link>
      <pubDate>Fri, 29 Apr 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-interruption-driven-development/</guid>
      <description>&lt;p&gt;As the sole developer at work, I have to balance our “ask me anything, anytime” culture with a need for unbroken concentration on whatever code I&amp;rsquo;m writing.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m generally fine with a door-always-open policy like this, because it makes communication fast and easy—especially in a small team, where everyone wears several hats—but as projects get closer to a deadline, it does tend to put a bit of strain on my ability to get things done. When that project involves a relatively complex application, however, it can be very hard to keep things on schedule, because &lt;a href=&#34;http://www.joelonsoftware.com/articles/fog0000000022.html&#34;&gt;task switching has such a high cost&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;That&amp;rsquo;s because programming is the kind of task where you have to keep a lot of things in your head at once. The more things you remember at once, the more productive you are at programming.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve been struggling with this a little bit lately. It&amp;rsquo;s no one&amp;rsquo;s fault, of course—colleagues are just interacting with each other the way they always have.&lt;/p&gt;
&lt;p&gt;So far, I&amp;rsquo;ve been trying some of the more common workarounds to this kind of workflow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;coming in to work two hours earlier than anyone else to focus on trickier problems&lt;/li&gt;
&lt;li&gt;working from home&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; rel=&#34;footnote&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;declining meeting requests that I don&amp;rsquo;t absolutely need to join&lt;/li&gt;
&lt;li&gt;delegating other tasks to other colleagues&lt;/li&gt;
&lt;li&gt;using noise-attenuating headphones when I need peak focus&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s helping somewhat, but what I&amp;rsquo;ve noticed as the project approaches release-candidate is a little more interesting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The more loosely-coupled the code is, the easier it is to come back to it after an interruption.&lt;/strong&gt; Instead of having to keep all kinds of interaction in my head, I love small, simple classes that have no knowledge of their context. They do one or two related things, and that&amp;rsquo;s &lt;em&gt;it&lt;/em&gt;. Jumping in and out of these is relatively easy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A good debugger and a test suite are indispensible.&lt;/strong&gt; Interrupted tasks are &lt;a href=&#34;http://blog.ninlabs.com/2013/01/programmer-interrupted/&#34;&gt;twice as likely to contain errors&lt;/a&gt;, so a thorough test suite—and really writing tests before code, as TDD requires—helps catch these. Some parts of my project include firmware that&amp;rsquo;s written without the benefits of test frameworks or breakpoints, so I have to resort to &lt;a href=&#34;http://www.ecnmag.com/blog/2015/06/debugging-caveman&#34;&gt;caveman debugging&lt;/a&gt;. This is something I&amp;rsquo;m going to avoid in future projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Refactor your comments with your code.&lt;/strong&gt; You should never trust your comments to accurately reflect what your code does unless you consider them to be inseparable from the code, and change them while you make changes to your code. When you&amp;rsquo;re interrupted, ask for a minute to take a note on what you&amp;rsquo;re doing and add &lt;code&gt;TODO:&lt;/code&gt;, &lt;code&gt;FIXME:&lt;/code&gt;, or &lt;code&gt;HAX:&lt;/code&gt; comments that you can come back to.&lt;/p&gt;
&lt;p&gt;These things do way more for my ability to mitigate how badly an interruption affects my productivity than headphones, working from home, or refusing meetings, &lt;em&gt;and&lt;/em&gt; they make my code better to boot.&lt;/p&gt;
&lt;p&gt;What works best for you?&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
  &lt;ol&gt;
  	&lt;li class=&#34;footnote&#34; id=&#34;fn:1&#34;&gt;
  		&lt;p&gt;This is difficult, because the software I’m working on has to control some permanently-installed hardware in our lab.&lt;a href=&#34;#fnref:1&#34; title=&#34;return to article&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>On streaks</title>
      <link>https://angelostavrow.com/post/on-streaks/</link>
      <pubDate>Fri, 22 Apr 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-streaks/</guid>
      <description>&lt;p&gt;This is the 17&lt;sup&gt;th&lt;/sup&gt; post made to this blog since the beginning of 2016.&lt;/p&gt;
&lt;p&gt;That means that I&amp;rsquo;ve posted something every Friday since the start of the year.&lt;/p&gt;
&lt;p&gt;Yesterday, &lt;a href=&#34;https://twitter.com/AngeloStavrow/status/723268757825720322&#34;&gt;I suggested that I might not be posting anything today&lt;/a&gt;. I&amp;rsquo;ve been feeling a bit tired lately as deadlines loom for work projects, so personal side-projects tend to slip a bit.&lt;/p&gt;
&lt;p&gt;But, dammit, the idea of not breaking a streak—especially four months in—really does work as a motivator to keep things going. This may be far from a daily habit, and I imagine most people wouldn&amp;rsquo;t notice if I missed a week, but I just couldn&amp;rsquo;t bring myself to leave a gap in my posts.&lt;/p&gt;
&lt;p&gt;Because that&amp;rsquo;s how it starts for me—skip one entry, and then I&amp;rsquo;ve subconsciously given myself permission to drop the project entirely.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s okay to drop projects, but I feel that should be a conscious decision made when you&amp;rsquo;re taking stock of what&amp;rsquo;s going on in the entirety of your life, not some subconscious decision from a contextless state of mind.&lt;/p&gt;
&lt;p&gt;So, yeah. Post number seventeen. Streaks work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On getting there</title>
      <link>https://angelostavrow.com/post/on-getting-there/</link>
      <pubDate>Fri, 15 Apr 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-getting-there/</guid>
      <description>&lt;p&gt;A short post today, based on a realization I had earlier this week at &lt;a href=&#34;http://cocoaheadsmtl.com/&#34;&gt;CocoaHeads&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Like many, I often suffer from &lt;a href=&#34;https://en.wikipedia.org/wiki/Impostor_syndrome&#34;&gt;impostor syndrome&lt;/a&gt;. It hits when I&amp;rsquo;m tackling something new that I &lt;em&gt;thought&lt;/em&gt; built on previous knowledge, leaving me feeling a bit bewildered, and undermining my confidence in having mastered lesser matters.&lt;/p&gt;
&lt;p&gt;Usually, I take a walk and come back to the problem with a clearer head, and will work my way through it.&lt;/p&gt;
&lt;p&gt;Given that I&amp;rsquo;ve always worked as a solo developer, with no formal computer science or software engineering background, I&amp;rsquo;ve always felt a bit iffy about my programming chops. I do my best to emulate what I see, but sometimes can&amp;rsquo;t shake the feeling that the code I write is amateur and inelegant.&lt;/p&gt;
&lt;p&gt;I look back at old code and think it&amp;rsquo;s garbage. This should probably be seen as an indicator that I&amp;rsquo;m progressing, but it sometimes just reinforces the &amp;ldquo;you&amp;rsquo;re a hack&amp;rdquo; feelings.&lt;/p&gt;
&lt;p&gt;But Tuesday, looking at some of the code presented in the demos, I realized that people were writing code &lt;em&gt;the same way I would have written it&lt;/em&gt;. Maybe some stylistic differences, sure, but generally, it turns out that I&amp;rsquo;m at a point where my approach to writing code is getting there.&lt;/p&gt;
&lt;p&gt;I guess the point is that, eventually, you get there. A year ago, if I had to show code to someone, I would have been making all manner of apologies for it. While I&amp;rsquo;m still pretty far from mastery, it&amp;rsquo;s reassuring to see the improvement.&lt;/p&gt;
&lt;p&gt;So, you know. Just keep swimming.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On subscription software</title>
      <link>https://angelostavrow.com/post/on-subscription-software/</link>
      <pubDate>Fri, 08 Apr 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-subscription-software/</guid>
      <description>&lt;p&gt;On Tuesday of this week, Smile Software announced that their &lt;a href=&#34;https://smilesoftware.com/software-releases/entry/the-new-textexpander&#34;&gt;TextExpander software would be switching to a subscription model&lt;/a&gt;. As a longtime user and big fan of TextExpander, I have some thoughts on this change.&lt;/p&gt;
&lt;p&gt;Another bit of software that I&amp;rsquo;m a huge fan of, YNAB, &lt;a href=&#34;http://www.youneedabudget.com/blog/post/the-new-ynab-is-here&#34;&gt;made a similar switch&lt;/a&gt; at the end of 2015—no more desktop apps sold with traditional licenses, but rather a new web app with a yearly subscription.&lt;/p&gt;
&lt;p&gt;They&amp;rsquo;re hardly the first to abandon the paid-up-front/paid-upgrade business model. And it&amp;rsquo;s not just a question of small software publishers that trying on a new pricing option to improve cash flow. Most famously, Microsoft and Adobe moved to subscription models for Office and CC, respectively. While Microsoft still sells traditional one-time-purchase licenses for Office, that may not be an option forever—it&amp;rsquo;s clear that they want you to move to their subscription model.&lt;/p&gt;
&lt;p&gt;Some believe that subscription models are the most logical conclusion for sustainable revenue. Certainly, it &lt;em&gt;does&lt;/em&gt; make income more predictable: it more-or-less normalizes revenue across the fiscal year, moving away from the typical huge-spike-at-launch (followed by smaller spikes on paid upgrades) sales patterns. When a business can better predict income, it can better plan resource allocation and feature releases.&lt;/p&gt;
&lt;p&gt;This is something that web-service businesses have been doing from the outset—monthly fees (with, perhaps, a discounted yearly fee) are the norm. I can only think of &lt;em&gt;one&lt;/em&gt; service (&lt;a href=&#34;https://pinboard.in&#34;&gt;Pinboard&lt;/a&gt;) that &lt;em&gt;used&lt;/em&gt; to charge a one-time, paid-up-front fee (although even that &lt;a href=&#34;https://blog.pinboard.in/2014/11/new_pricing_policy/&#34;&gt;has changed&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;But charging a monthly fee does not sustainable revenue make.&lt;/p&gt;
&lt;p&gt;At least, I don&amp;rsquo;t think it does for a large segment of the market. Monthly fees are something that are far easier to justify when they&amp;rsquo;re mission critical—which typically means software that helps a business improve cash flow. They can look at a cost/benefit ratio and determine that the net result is positive.&lt;/p&gt;
&lt;p&gt;The vast majority of software does not fall in this category.&lt;/p&gt;
&lt;p&gt;But I don&amp;rsquo;t think this is the largest impediment for software publishers going to a monthly fee. An even more interesting problem that comes with transitioning to a subscription model is that it takes the renewal-timing decision out of users&amp;rsquo; control.&lt;/p&gt;
&lt;p&gt;Nerds like myself will &lt;em&gt;probably&lt;/em&gt; upgrade to the latest version of software the day it&amp;rsquo;s released, but smart people will weigh the pros and cons and see if it&amp;rsquo;s a worthwhile upgrade. Even if it is, a user can decide that they&amp;rsquo;ll keep using the current version awhile longer, if only because it improves their total cost of ownership.&lt;/p&gt;
&lt;p&gt;Sven Fechner illustrates this nicely &lt;a href=&#34;https://twitter.com/simplicitybliss/status/717746576718999557&#34;&gt;in his tweet on the TCO of TextExpander Classic vs. TextExpander 6&lt;/a&gt;. Taken over a longer period of time, with the traditional pricing model, users could opt to upgrade every eighteen months or even two years (assuming yearly upgrades) and save even more money. Or, at least, improve cash flow a bit by delaying some upgrades so that they don&amp;rsquo;t all fall around the same time of year.&lt;/p&gt;
&lt;p&gt;Instead, with a subscription, what happens now is that I have no influence on when the lump-sum yearly payments will become due (unless there&amp;rsquo;s an option for a monthly fee, I guess, but that&amp;rsquo;s usually the more expensive option).&lt;/p&gt;
&lt;p&gt;So, instead, I&amp;rsquo;m forced to create a &amp;ldquo;subscription software&amp;rdquo; budget category and start putting aside some amount to cover next year&amp;rsquo;s fee—or worse, come renewal time, I&amp;rsquo;m taken by surprise when I see a the fee I forgot about charged to my credit card.&lt;/p&gt;
&lt;p&gt;I can tell you this: as that subscription software category starts to grow, some hard choices will be made. YNAB will stay because the money it saves me is at least an order of magnitude over what it costs me. TextExpander? Well, it&amp;rsquo;s a &lt;em&gt;great&lt;/em&gt; utility, but I don&amp;rsquo;t know that I can justify a yearly fee for it.&lt;/p&gt;
&lt;p&gt;I get that it&amp;rsquo;s tough for smaller/indie developers to make a sustainable income from their apps, but the reality of the market is borne out by the App Store: cheap/free apps are what get the downloads. So, businesses are forced to try new things, so that they can afford to keep making the software that we use and love. At the end of the day, the only people who are &lt;em&gt;really&lt;/em&gt; willing to pay sustainable prices for software are software developers.&lt;/p&gt;
&lt;p&gt;Paul Haddad &lt;a href=&#34;https://twitter.com/tapbot_paul/status/717341611932266496&#34;&gt;tweeted some possible outcomes&lt;/a&gt; of TextExpander&amp;rsquo;s pricing experiment.&lt;/p&gt;
&lt;p&gt;While I think that subscription software is a phase that some parts of the industry are trying on for size, it doesn&amp;rsquo;t have any staying power &lt;em&gt;unless&lt;/em&gt; there&amp;rsquo;s a radical shift in the way we consume software. Something like, for example, an &lt;em&gt;App Store subscription&lt;/em&gt;. We&amp;rsquo;re moving to music and TV/movie subscriptions anyhow; maybe—just maybe—one way to make this work would be to pay Apple a monthly fee for access to any app on the App Stores?&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; rel=&#34;footnote&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;An interesting note: Smile have &lt;a href=&#34;https://smilesoftware.com/blog/entry/textexpander-release-follow-up&#34;&gt;made sure to clarify&lt;/a&gt; that TextExpander 5 will continue to be supported for at least one more OS X version. It&amp;rsquo;s clear that they&amp;rsquo;re listening to the feedback they&amp;rsquo;re getting from their users.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
  &lt;ol&gt;
  	&lt;li class=&#34;footnote&#34; id=&#34;fn:1&#34;&gt;
	  &lt;p&gt;I realize that on the Mac, this wouldn’t work for apps like TextExpander, as they cannot break out of the sandbox restrictions required by the Mac App Store to do what they do.&lt;a href=&#34;#fnref:1&#34; title=&#34;return to article&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>On sweating the small stuff</title>
      <link>https://angelostavrow.com/post/on-sweating-the-small-stuff/</link>
      <pubDate>Fri, 01 Apr 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-sweating-the-small-stuff/</guid>
      <description>&lt;p&gt;When I hear &lt;em&gt;ship it&lt;/em&gt;, or &lt;em&gt;we&amp;rsquo;ll fix it in post&amp;rdquo;&lt;/em&gt;, I get that the intended sentiment is  that &lt;em&gt;perfect is the enemy of done&lt;/em&gt;. But too often, this translates to &lt;em&gt;I&amp;rsquo;m okay with shipping garbage&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a delicate balance to be struck between &lt;a href=&#34;https://angelostavrow.com/blog/2014/6/19/festina-lente&#34;&gt;doing it quickly vs. doing it well&lt;/a&gt;, sure, but if you&amp;rsquo;re having a hard time getting there, then maybe you&amp;rsquo;ve bitten off more than you can chew. And that&amp;rsquo;s a whole other kettle of fish.&lt;/p&gt;
&lt;p&gt;And it doesn&amp;rsquo;t just come down to outwardly sloppiness, either. When it comes down to your shipped product, people won&amp;rsquo;t necessarily notice features that didn&amp;rsquo;t ship—but every lapse from perfection &lt;em&gt;will&lt;/em&gt; be noticed, and will go against your credibility as a Maker Of Great Things.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://about.gitlab.com/2015/12/07/why-we-shift-objectives-and-not-release-dates-at-gitlab/&#34;&gt;GitLab has an interesting take on shipping&lt;/a&gt;. They have time-based releases (the 22nd of every month), rather than feature-based releases. If a feature isn&amp;rsquo;t ready for the next point-upgrade, it gets pushed to the one after. No big deal. This way, the only thing that ships is what&amp;rsquo;s &lt;em&gt;truly&lt;/em&gt; ready from prime time.&lt;/p&gt;
&lt;p&gt;I like this approach, and it works well in the continuous-delivery context of a web app, but I think the lesson applies more broadly, too.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t ship for the sake of shipping. It becomes pretty clear pretty quickly that the product is taking a backseat to the profits when you do so. And the product always has to come first.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On iterative learning</title>
      <link>https://angelostavrow.com/post/on-iterative-learning/</link>
      <pubDate>Fri, 25 Mar 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-iterative-learning/</guid>
      <description>&lt;p&gt;Earlier this week, I had a chance to talk out my approach to learning new things in the context of Cocoa development.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve always found that I learn best when I get to &lt;a href=&#34;http://english.stackexchange.com/questions/30939/is-used-in-anger-a-britishism-for-something&#34;&gt;use it in anger&lt;/a&gt;, but when it comes to something as big and sprawling as the Cocoa framework, there&amp;rsquo;s a &lt;em&gt;lot&lt;/em&gt; of stuff to learn.&lt;/p&gt;
&lt;p&gt;Given that I do the vast majority of my development solo, I&amp;rsquo;ve found that the best way to approach this is to break the framework down into manageable chunks, write a little project based around that chunk, and then ship it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I wrote my first app, &lt;a href=&#34;http://droppedbits.com/honeyjar&#34;&gt;HoneyJar&lt;/a&gt;, as a first introduction to &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011210-CH1-SW1&#34;&gt;Objective-C&lt;/a&gt; and Xcode. IDEs like Xcode are generally pretty similar—at their core, they&amp;rsquo;re text editors with some special features—but Objective-C looked like no other programming language I&amp;rsquo;d ever seen before.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)doYouKnowTheMuffinMan:(TheMuffinMan)theMuffinMan;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;(I saw this somewhere on Twitter and I wish I could remember who to credit for it!)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I also made the app iPhone-only, as this made for a much less complex platform as far as things like filesystems, window sizes, and interaction go.&lt;/p&gt;
&lt;p&gt;I also took the opportunity to explore &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, adding some libraries to handle some view and viewcontroller tasks—I had my hands full trying to figure out the language and the platform. I also integrated &lt;a href=&#34;http://hockeyapp.net/features/&#34;&gt;HockeyApp&lt;/a&gt; into the beta version I was working on, to get feedback from friends.&lt;/p&gt;
&lt;p&gt;Once I was relatively happy with the app, I revved it to 1.0 and submitted it to the App Store—again, something I&amp;rsquo;d never done before. HoneyJar was never expected to be some kind of successful product, but a few people have downloaded it, and I know it&amp;rsquo;s been useful to me on occasion.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;When Apple &lt;a href=&#34;https://swift.org/&#34;&gt;announced Swift&lt;/a&gt;, its new programming language, I got pretty excited. Swift certainly &lt;em&gt;looked&lt;/em&gt; a lot more like the programming languages I was familiar with, and there was something really neat about &amp;ldquo;growing up&amp;rdquo; with a new language.&lt;/p&gt;
&lt;p&gt;So, I started work on my next app, &lt;a href=&#34;http://droppedbits.com/per&#34;&gt;Per&lt;/a&gt;. Per was all about digging into Swift (which has changed dramatically since the app was written)—there are no external libraries used anywhere in the app.&lt;/p&gt;
&lt;p&gt;I also used it as an opportunity to play with some animations when presenting and dismissing view controllers:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static1.squarespace.com/static/53ebc004e4b0aa86f612f6fd/t/54ea85a1e4b08f2aaf399192/1424655859170/unit-conversion.gif?format=500w&#34; alt=&#34;Per&amp;rsquo;s unit-converter feature&#34;&gt;&lt;/p&gt;
&lt;p&gt;This meant that I got to look into &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html&#34;&gt;closures&lt;/a&gt; as well, again as a small chunk of their applicability.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Last week I wrote about &lt;a href=&#34;https://angelostavrow.com/blog/2016/3/11/on-writing-for-gitlab&#34;&gt;writing for GitLab&lt;/a&gt; as a means of teaching myself more about their continuous integration features.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m now interested in working with &lt;a href=&#34;https://fastlane.tools/&#34;&gt;fastlane tools&lt;/a&gt;, so I&amp;rsquo;m working on an app as a counterpart to &lt;a href=&#34;https://gitlab.com/gitlab-com/blog-posts/issues/169&#34;&gt;a new article I&amp;rsquo;ll be writing for GitLab&lt;/a&gt;. The app is relatively simple: it consumes GitLab&amp;rsquo;s  API to present some kind of a dashboard for project milestones that the user is involved in.&lt;/p&gt;
&lt;p&gt;Because I want to focus on learning fastlane, I don&amp;rsquo;t want to worry &lt;em&gt;too&lt;/em&gt; much about handling API requests and responses, so I&amp;rsquo;m using a great library called &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt;, &lt;em&gt;and&lt;/em&gt; I&amp;rsquo;m making this a &lt;a href=&#34;https://developer.apple.com/tvos/&#34;&gt;tvOS app&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Why tvOS?&lt;/p&gt;
&lt;p&gt;Well, firstly, it&amp;rsquo;s a new platform that I get to play with. That&amp;rsquo;s pretty interesting in and of itself, because while it brings a standardized screen size, it also includes the Siri remote as the sole means of interaction.&lt;/p&gt;
&lt;p&gt;But, additionally, an Apple TV assumes a persistent connection to the internet, which means one less thing to worry about: testing for a lack of connectivity (or worse, &lt;em&gt;spotty&lt;/em&gt; connectivity).&lt;/p&gt;
&lt;p&gt;This way, I can learn about a new platform and a new toolchain without worrying about other pitfalls and perils.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So that&amp;rsquo;s how I like to learn: small, neatly defined chunks, where I can focus on the thing I want to find out about, and ship something that showcases what I&amp;rsquo;ve learned. I&amp;rsquo;d love to know what works best for you!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On roadmaps for sitemaps</title>
      <link>https://angelostavrow.com/post/on-roadmaps-for-sitemaps/</link>
      <pubDate>Fri, 18 Mar 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-roadmaps-for-sitemaps/</guid>
      <description>&lt;p&gt;As I&amp;rsquo;ve &lt;a href=&#34;https://angelostavrow.com/blog/2016/1/21/on-moving-preparations&#34;&gt;mentioned before&lt;/a&gt;, I&amp;rsquo;m looking into re-working things a little bit for some of my &amp;ldquo;online presence&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Right now my personal site is just a static landing page. It&amp;rsquo;s generated by &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; and links to other things (this blog, my Tumblr, GitLab/GitHub, Twitter, &amp;amp;cet.)—and I think it&amp;rsquo;s time to start consolidating some of that.&lt;/p&gt;
&lt;p&gt;This blog will be moving to a static-site generator soon, too (again, Hugo). The domain and all links will remain active, but I&amp;rsquo;d like it to also live under a &lt;code&gt;/blog&lt;/code&gt; directory on my personal site. I&amp;rsquo;ll continue to write longer-form posts here.&lt;/p&gt;
&lt;p&gt;My Tumblr, &lt;a href=&#34;http://breakbeforemake&#34;&gt;Break Before Make&lt;/a&gt;, will shift roles to becoming more of a linkblog—I have a huge backlog of stuff in Instapaper that I want to start sharing, and I think this is probably a better option than &lt;a href=&#34;https://angelostavrow.com/blog/2016/2/5/on-reading-lists&#34;&gt;starting a newsletter&lt;/a&gt;. I&amp;rsquo;d also like to pull those posts into the &lt;code&gt;/blog&lt;/code&gt; directory, between the MBB posts. It&amp;rsquo;ll stay on Tumblr because I like its sharing capabilities via its iOS app.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m also think of adding &lt;a href=&#34;http://nownownow.com/about&#34;&gt;&lt;code&gt;/now&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;/using&lt;/code&gt; pages to my personal site, to discuss my projects and my tools, respectively. The former is &lt;em&gt;supposed&lt;/em&gt; to keep you focussed on &lt;em&gt;what you&amp;rsquo;re doing&lt;/em&gt;, which &lt;a href=&#34;https://angelostavrow.com/blog/2016/1/24/on-focus&#34;&gt;I often need help with&lt;/a&gt;; the latter I&amp;rsquo;m not sure about, because really, I&amp;rsquo;m more interested in results than I am in tools—but maybe workflows will be of interest to some.&lt;/p&gt;
&lt;p&gt;So that&amp;rsquo;s the plan. Initially I&amp;rsquo;d hoped to have completed at least moving this site to a static generator by the end of February, but, well… time makes fools of us all.&lt;/p&gt;
&lt;p&gt;More tk…&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On writing for GitLab</title>
      <link>https://angelostavrow.com/post/on-writing-for-gitlab/</link>
      <pubDate>Fri, 11 Mar 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-writing-for-gitlab/</guid>
      <description>&lt;p&gt;Yesterday, an article I wrote on setting up &lt;a href=&#34;https://about.gitlab.com/2016/03/10/setting-up-gitlab-ci-for-ios-projects/&#34;&gt;GitLab CI for your iOS projects&lt;/a&gt; was posted on the GitLab blog.&lt;/p&gt;
&lt;p&gt;Now, I&amp;rsquo;m a relative newcomer to continuous integration, but I know that it&amp;rsquo;s valuable. And I also know that GitLab&amp;rsquo;s feature is free, regardless of whether your project is public or private.&lt;/p&gt;
&lt;p&gt;I also know that the best way to learn something is to show someone else how to do it—so I launched BBEdit and took notes as I worked my way through the setup, with the intention of posting something here about my experiences.&lt;/p&gt;
&lt;p&gt;Then I discovered GitLab&amp;rsquo;s &lt;a href=&#34;https://about.gitlab.com/2016/01/26/call-for-writers/&#34;&gt;call for writers&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;gitlab-runs-gitlab-on-gitlab-to-continuously-improve-gitlab&#34;&gt;GitLab runs GitLab on GitLab to continuously improve GitLab&lt;/h2&gt;
&lt;p&gt;GitLab is more than just a version-control system. It&amp;rsquo;s a community. I deployed their Community Edition on a work server back around v3 and it&amp;rsquo;s been in use ever since, partly because it&amp;rsquo;s nice to have your own internal DVCS, and partly because of the predictable roll-outs of new versions (every month, on the 22nd), which makes scheduled maintenance easy to plan for.&lt;/p&gt;
&lt;p&gt;But the key reason is that it&amp;rsquo;s always been more than just a DVCS. I&amp;rsquo;ve watched GitLab grow from its humble beginnings to, in my mind, one of the most interesting open-source projects out there.&lt;/p&gt;
&lt;p&gt;And you can see the value of this kind of Extreme Dogfooding in the bug report response time and the cool new features that come around with every point release. But you also see it in their &lt;a href=&#34;https://about.gitlab.com/strategy/&#34;&gt;strategy document&lt;/a&gt;. And their &lt;a href=&#34;https://about.gitlab.com/handbook/&#34;&gt;team handbook&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;it-all-starts-with-an-issue&#34;&gt;It all starts with an issue&lt;/h2&gt;
&lt;p&gt;Whether talking about &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-ce/issues/12712&#34;&gt;a bug report&lt;/a&gt; or a blog post, &lt;a href=&#34;https://about.gitlab.com/2016/03/03/start-with-an-issue/&#34;&gt;everything starts with the opening an issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After applying to their call for writers, I heard back from Heather, GitLab&amp;rsquo;s Developer Marketing Manager, who assigned me to &lt;a href=&#34;https://gitlab.com/gitlab-com/blog-posts/issues/29&#34;&gt;an issue on the topic&lt;/a&gt;. I proposed an outline of the post, and after some discussion and clarification on the topic, I forked the GitLab-website repo and began work on my draft.&lt;/p&gt;
&lt;p&gt;Everything is done publicly, in the open. This means that everyone can contribute, and you can easily send links to conversations and drafts to peers for comment and review.&lt;/p&gt;
&lt;h2 id=&#34;wip-it-good&#34;&gt;WIP it good&lt;/h2&gt;
&lt;p&gt;And so the writing commenced. A few days later, I &lt;a href=&#34;https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/1567&#34;&gt;opened a Merge Request&lt;/a&gt; with a commit of my first draft. By adding &lt;code&gt;[WIP]&lt;/code&gt; (&lt;strong&gt;W&lt;/strong&gt;ork &lt;strong&gt;I&lt;/strong&gt;n &lt;strong&gt;P&lt;/strong&gt;rogress) to the MR title, GitLab prevents it from being accidentally merged to the master branch until the diff has been discussed and reviewed by the team.&lt;/p&gt;
&lt;p&gt;Heather started with a first review of the post for general formatting and style according to the &lt;a href=&#34;https://gitlab.com/gitlab-com/blog-posts/blob/master/STYLEGUIDE.md&#34;&gt;Style Guide&lt;/a&gt;, made a patch to correct some line breaks, and then assigned it for technical review to Kamil, author of the GitLab Runner.&lt;/p&gt;
&lt;p&gt;Kamil made some comments and asked some questions; I responded and committed an updated draft, which updated the MR. These changes were reviewed, and the process continued until the post was ready.&lt;/p&gt;
&lt;p&gt;At that point, all that was left to do was &lt;a href=&#34;https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/1567#note_4185659&#34;&gt;remove the &lt;code&gt;[WIP]&lt;/code&gt; comment from the MR&lt;/a&gt;, and the post was ready to go up on GitLab&amp;rsquo;s blog.&lt;/p&gt;
&lt;p&gt;Which it did, yesterday.&lt;/p&gt;
&lt;h2 id=&#34;closing-thoughts&#34;&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;Whenever I take part in some community event, I ask myself one question:&lt;/p&gt;
&lt;p&gt;Would I participate again?&lt;/p&gt;
&lt;p&gt;In the end, that&amp;rsquo;s all that matters. I want to feel like I&amp;rsquo;m making a contribution, that I&amp;rsquo;m learning, and that the community I&amp;rsquo;m working with is working towards some positive change.&lt;/p&gt;
&lt;p&gt;Contributing to GitLab, even with just a small blog post, feels that way. In fact, it&amp;rsquo;s only increased my interest in moving my own projects to their service, and working with them towards improving GitLab however I can, be it bug report or blog post.&lt;/p&gt;
&lt;p&gt;Actually, maybe I should start learning Ruby to contribute even more. 🤔&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On this week&#39;s hiatus</title>
      <link>https://angelostavrow.com/post/on-this-weeks-hiatus/</link>
      <pubDate>Fri, 04 Mar 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-this-weeks-hiatus/</guid>
      <description>&lt;p&gt;While I don&amp;rsquo;t have much to post here this week, I have been writing a technical article over the last couple of weeks. The final draft was submitted yesterday and, barring any unexpected changes or delays, it should be published next week.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s been an interesting experience, and I intend on discussing it for next week&amp;rsquo;s instalment.&lt;/p&gt;
&lt;p&gt;Until then, I&amp;rsquo;m trying to post fun little items and interesting links to &lt;a href=&#34;http://breakbeforemake.com&#34;&gt;Break Before Make&lt;/a&gt; more often, so feel free check check that out. 😊&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On methodologies</title>
      <link>https://angelostavrow.com/post/on-methodologies/</link>
      <pubDate>Fri, 26 Feb 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-methodologies/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been thinking a bit about people and some popular techniques that they use to try to improve the quality of their lives.&lt;/p&gt;
&lt;p&gt;Specifically, I wonder if successful application of &lt;a href=&#34;http://gettingthingsdone.com/&#34;&gt;GTD&lt;/a&gt;, &lt;a href=&#34;http://www.youneedabudget.com/learn/guide/learn-to-prioritize&#34;&gt;YNAB&amp;rsquo;s rules&lt;/a&gt;, or &lt;a href=&#34;http://tidyingup.com/&#34;&gt;KonMari&lt;/a&gt;—essentially, the curation of stuff (life, money, possessions)—might be self-selecting.&lt;/p&gt;
&lt;p&gt;Curation is maybe a bit of a weak description. These are &lt;em&gt;methodologies&lt;/em&gt; for the processing of inputs with the goal of (typically measurable) progress towards a desired state.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Mind like water&amp;rdquo; and &amp;ldquo;roll with the punches&amp;rdquo; may sound hand-wavy and zen-like, but it&amp;rsquo;s the result of discipline and rigour. I&amp;rsquo;m a pretty methodical person who does well with ritual and routine, so weekly reviews and giving every dollar a job &amp;ldquo;makes sense&amp;rdquo; to me.&lt;/p&gt;
&lt;p&gt;I wonder, though, if some people just aren&amp;rsquo;t naturally wired to ease into methodologies like these. In the same way that some people get comfortable faster with programming or geometry concepts than others, maybe there&amp;rsquo;s something to the way we&amp;rsquo;ve gotten used to parsing the world that makes it easier for methodical types to successfully apply methodologies.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; believe that programming or geometry is beyond the grasp of some subset of people because of their personality type or what-have-you. For some, the learning process needs to be adapted to better suit their understanding of things. For others, maybe practice makes perfect.&lt;/p&gt;
&lt;p&gt;I think the same is true of methodologies.&lt;/p&gt;
&lt;p&gt;When I&amp;rsquo;m struggling to understand or apply a concept, I look for one of two things: a re-framed explanation of some principle, or some kind of community support. YNAB does a great job of this, with their free classes, their community forums, and their blog. GTD does this with personal coaching and communities that build off of the system&amp;rsquo;s flexibility.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s probably why they have staying power, rather than just being some fad &lt;em&gt;life-hack&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On heroes and patient zeroes</title>
      <link>https://angelostavrow.com/post/on-heroes-and-patient-zeroes/</link>
      <pubDate>Fri, 19 Feb 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-heroes-and-patient-zeroes/</guid>
      <description>&lt;p&gt;I rarely get sick, and when I do, it seldom lasts more than 72 hours. Having just recently gotten over a nasty cold, however, I have a couple of thoughts on the matter of working through cold and flu season.&lt;/p&gt;
&lt;p&gt;Inevitably, there will always be someone who feels that they &lt;em&gt;can&amp;rsquo;t&lt;/em&gt;, for whatever reason, afford to take a sick day. So they load up on decongestants, fight their way in to the office, where they basically fill a seat with their butt, a trashcan with their snotty tissues, and their workplace with their germs.&lt;/p&gt;
&lt;p&gt;Now, in many cases, our patient zero may legitimately feel that their paycheck is threatened by them taking a sick day. This is a failure of their corporate culture: if you&amp;rsquo;re going to get fired for catching a cold, you&amp;rsquo;re going to get fired for myriad other reasons. Resign yourself to that fact, stay home, and maybe start looking for something new.&lt;/p&gt;
&lt;p&gt;For some others, it&amp;rsquo;s a point of pride to show how responsible and diligent they are by coming in and struggling through the day. Look at how hard they try. Poor thing. They should be home resting, but instead they came in because they&amp;rsquo;ve got work to do. What a team player. What a hero.&lt;/p&gt;
&lt;p&gt;What a jackass.&lt;/p&gt;
&lt;p&gt;Because no matter how careful they are keep the environment hygienic, they become a transmission vector for whatever they&amp;rsquo;re carrying. Which means their coworkers will get sick. Got a coworker with a depressed immune system? Welp, they&amp;rsquo;re screwed.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a saying about the fine line between heroism and stupidity. This is a fine example.&lt;/p&gt;
&lt;p&gt;Stay home. Get well.&lt;/p&gt;
&lt;p&gt;If you have the energy for it, maybe keep up with some email just to stay abreast of what to expect when you get back.&lt;/p&gt;
&lt;p&gt;But energy is probably in short supply. You simply can&amp;rsquo;t be productive, efficient, and creative when your head is packed full of mucus. Don&amp;rsquo;t try; you&amp;rsquo;ll frustrate and stress yourself out even more.&lt;/p&gt;
&lt;p&gt;So: Netflix and sleep. Plenty of fluids. NyQuil is my personal weapon of choice in the battle for my sinuses.&lt;/p&gt;
&lt;p&gt;As you start feeling better—and if the work you do allows for it—maybe do some work from home. Maybe crank out some of the tasks that are more like project overhead. Or take advantage of a quiet home to concentrate on some strategic or creative work.&lt;/p&gt;
&lt;p&gt;Of course, this isn&amp;rsquo;t possible for everyone. Point is, stay home until you&amp;rsquo;re ready—and you&amp;rsquo;re no longer contagious.&lt;/p&gt;
&lt;p&gt;Then, come back and catch up.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s almost never anything so urgent that the business will go bankrupt if it doesn&amp;rsquo;t have your constant attention. This fact is diametrically opposed to the point of view that some managers have. Again, this is a failure of corporate culture.&lt;/p&gt;
&lt;p&gt;But I digress: the point is, you&amp;rsquo;re back, you&amp;rsquo;re well-rested, and you&amp;rsquo;re ready to tackle your inbox. You&amp;rsquo;re operating at peak levels. You &lt;em&gt;can&lt;/em&gt; plow through that backlog.&lt;/p&gt;
&lt;p&gt;Yes, I know that I can say these things because I&amp;rsquo;m lucky to have a pretty generous (if unspoken) sick-day policy. Our team works hard and we&amp;rsquo;re evaluated on what we get done, not the hours we put in. As a result, my stress levels don&amp;rsquo;t go through the roof at the first sign of a sore throat because I might be getting sick—I just deal with getting better, then get back to work, rather than letting the stress make it worse.&lt;/p&gt;
&lt;p&gt;More businesses should follow suit.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On local personalities</title>
      <link>https://angelostavrow.com/post/on-local-personalities/</link>
      <pubDate>Wed, 10 Feb 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-local-personalities/</guid>
      <description>&lt;p&gt;The January 28&lt;sup&gt;th&lt;/sup&gt; episode of Under The Radar, &lt;a href=&#34;https://www.relay.fm/radar/12&#34;&gt;&lt;em&gt;Apps With Personality&lt;/em&gt;&lt;/a&gt;, left me thinking about just &lt;em&gt;why&lt;/em&gt; software from bigger software publishers tend to be more… well, bland.&lt;/p&gt;
&lt;p&gt;A lot of it surely comes down to the design-by-committee (or, in the worst case, design-by-accountants/lawyers) way of working that David and Marco alluded to, but I think there&amp;rsquo;s something else worth considering.&lt;/p&gt;
&lt;p&gt;Every business-school student has heard the (&lt;a href=&#34;http://www.snopes.com/business/misxlate/nova.asp&#34;&gt;actually false&lt;/a&gt;) Chevy Nova &amp;ldquo;legend&amp;rdquo;, whereby GM execs scratched their heads in trying to figure out why sales of the car were so poor in Latin America. It serves as a warning against moving your business into foreign markets without doing your homework first. In 2016 parlance, it speaks to the importance of &lt;a href=&#34;https://en.wikipedia.org/wiki/Inclusion_(value_and_practice)&#34;&gt;inclusivity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While words that are homonyms across tongues may be the low-hanging fruit of localization, &amp;ldquo;personality&amp;rdquo; may be one of the most difficult. The personality created for an inanimate object often comes from cultural significance that may not be universally understood. Some of the animism described in the &lt;a href=&#34;http://konmari.com/en/&#34;&gt;KonMari method&lt;/a&gt;—thanking your shoes for a long day of supporting you, for example—just doesn&amp;rsquo;t translate well in Western consumer/capitalist society, where race-to-the-bottom market economics has associated the shoe with a thing to be disposed of, not thanked.&lt;/p&gt;
&lt;p&gt;In the podcast, &lt;a href=&#34;http://www.meetcarrot.com/weather/&#34;&gt;Carrot Weather&lt;/a&gt; was rolled out as an example of an app with strong personality.&lt;/p&gt;
&lt;p&gt;And it is. That maniacal AI/robot has a charm a that keeps some users (myself included) coming back.&lt;/p&gt;
&lt;p&gt;But how easily can that be localized? Even with good translations for the spoken quips, things like the secret-location Easter eggs are hard. Some might be universally understood, like the Moon, and some pop-culture references (see: Star Wars) might be &lt;em&gt;almost&lt;/em&gt; universal, but is Mount Doom meaningful to someone in Ulaanbataar?&lt;/p&gt;
&lt;p&gt;And therein lies the rub. An indie developer that wants to inject &lt;em&gt;strong&lt;/em&gt; personality in an app often doesn&amp;rsquo;t have the resources to localize said personality to all regions in which it will sell, and a large company will probably want to invest those resources elsewhere—especially with profitability on the App Store being what it is these days.&lt;/p&gt;
&lt;p&gt;So, the former designs something as a result of their cultural context, with whatever lack of universality that may result. The latter &amp;ldquo;blands down&amp;rdquo; their design, in an effort to find some lowest common denominator.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On reading lists</title>
      <link>https://angelostavrow.com/post/on-reading-lists/</link>
      <pubDate>Fri, 05 Feb 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-reading-lists/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been thinking about adding a second kind of post to this site every week: a selection links that I found to be an interesting read during the week.&lt;/p&gt;
&lt;p&gt;More specifically, I&amp;rsquo;m thinking about maybe three to five links, with a few words of my own commentary. Those links might be to freshly-published items, or they may be an interesting article from an archive somewhere. I don&amp;rsquo;t really know.&lt;/p&gt;
&lt;p&gt;What I do know, is that I come across a &lt;em&gt;lot&lt;/em&gt; of thought-provoking, inspiring, or fascinating pieces of writing, and I want a more permanent place to share them than the Twitter firehose, or the Facebook walled garden.&lt;/p&gt;
&lt;p&gt;To that end, I&amp;rsquo;ll be moving my own writing to a Monday post, and a link post on Fridays.&lt;/p&gt;
&lt;p&gt;More to come…&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On focus</title>
      <link>https://angelostavrow.com/post/on-focus/</link>
      <pubDate>Sun, 24 Jan 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-focus/</guid>
      <description>&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I&amp;#39;ve been allowing myself to get too distracted by random projects. It&amp;#39;s time to cull that list and redouble my efforts on the key projects.&lt;/p&gt;&amp;mdash; Angelo Stavrow (@AngeloStavrow) &lt;a href=&#34;https://twitter.com/AngeloStavrow/status/691000171539214336&#34;&gt;January 23, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Years ago, as part of an engineering internship prep course, I had to do a &lt;a href=&#34;http://www.myersbriggs.org/&#34;&gt;Myers-Briggs personality test&lt;/a&gt;. The results indicated that I&amp;rsquo;m an &lt;a href=&#34;https://en.wikipedia.org/wiki/ENFP&#34;&gt;ENFP type&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While the MBTI was &lt;a href=&#34;http://www.vox.com/2014/7/15/5881947/myers-briggs-personality-test-meaningless&#34;&gt;proven to be mostly malarky&lt;/a&gt;, one thing that keeps coming up about ENFP types is that they have trouble with follow-through. From the profile I received as a result of the test:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;An ENFP needs to focus on following through with their projects&lt;/strong&gt;. This can be a problem area for some of these individuals. Unlike other extraverted types, ENFPs need time alone to center themselves, and make sure they are moving in a direction which is in sync with their values. ENFPs who remain centered will usually be quite successful at their endeavours. &lt;strong&gt;Others may fall into the habit of dropping a project when they become excited about a new possibility&lt;/strong&gt;, and thus they never achieve the great accomplishments which they are capable of achieving.&amp;rdquo; [emphasis mine]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Regardless of whether the test is BS or not, there&amp;rsquo;s some truth to what they&amp;rsquo;re saying.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not that I &lt;em&gt;can&amp;rsquo;t&lt;/em&gt; focus. I can sit and hack away at a problem for hours, unconsciously suppressing signals from my body telling me to eat or go to the bathroom. If the task at hand is interesting enough, I will become fully engrossed in doing it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;However—&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve identified some impediments to my own ability to focus and follow-through.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a &lt;em&gt;lot&lt;/em&gt; of cool stuff to try out there. Off the top of my head, I have at least four app ideas in various stages of completion sitting in my &lt;code&gt;Developer&lt;/code&gt; folder, and at least a couple more in a Someday/Maybe category in OmniFocus. Given that it can be a &lt;em&gt;lot&lt;/em&gt; more fun to start a new project than to udpate and maintain an old one, a certain level of discipline—saying no, specifically—is important to keep things on track.&lt;/p&gt;
&lt;p&gt;Not all projects are engrossing. Maybe the challenge isn&amp;rsquo;t quite right for my level of competence, so rather than entering a state of &lt;a href=&#34;https://en.wikipedia.org/wiki/Flow_(psychology)&#34;&gt;flow&lt;/a&gt;, I end up either discouraged or bored. Maybe it&amp;rsquo;s a clerical kind of task that I just don&amp;rsquo;t &lt;em&gt;feel&lt;/em&gt; like doing, even if the end goal would improve my life&lt;/p&gt;
&lt;p&gt;Maybe the end goal just feels insurmountable.&lt;/p&gt;
&lt;p&gt;Maybe I&amp;rsquo;m just trying to start a new habit, and I just don&amp;rsquo;t remember to act on it because it&amp;rsquo;s foreign to my daily routine.&lt;/p&gt;
&lt;p&gt;For those kinds of projects, it helps me to keep my head in the game, and my eye on the prize, so to speak.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s something satisfying about seeing yourself chip away a goal. Here, automation can actually be a source of failure, if it prevents you from getting the kind of feedback that keeps you moving in the right direction.&lt;/p&gt;
&lt;p&gt;Instead, I try to use the dopamine hit of checking off a to-do item, and I like to provide myself with progress reports. That way, my focus is driven by &lt;a href=&#34;http://lifehacker.com/281626/jerry-seinfelds-productivity-secret&#34;&gt;the motivation to keep a streak going&lt;/a&gt;, which is infinitely more effective for me than just &lt;em&gt;doing what I gotta do&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The GTD system uses the weekly review as one such measure, although sometimes that feels more like you&amp;rsquo;re just making sure nothing&amp;rsquo;s slipping through the cracks, rather than checking how far along you&amp;rsquo;ve gotten towards completing the project. I find it useful to track some numbers (but only when appropriate—be careful of &lt;a href=&#34;https://en.wikipedia.org/wiki/McNamara_fallacy&#34;&gt;the McNamara fallacy&lt;/a&gt; here) as a more quantitative measure of progress:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How many issues have I closed towards that milestone?&lt;/li&gt;
&lt;li&gt;How am I doing on funding my Christmas expense budget?&lt;/li&gt;
&lt;li&gt;How&amp;rsquo;s my pace improving when I go jogging?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Periodic reminders are another good tool, especially for things like starting a new habit. I use a daily reminder to get myself to work on blog posts, and another to make sure I write in my journal.&lt;/p&gt;
&lt;p&gt;(I really like &lt;a href=&#34;http://balancedapp.com/&#34;&gt;Balanced for iOS&lt;/a&gt; as a way to track this, by the way.)&lt;/p&gt;
&lt;p&gt;Setting tools aside, at the end of the day, getting to  focus is about managing time and attention. Even with Someday/Maybe lists and reminders and weekly reviews, the one immutable law is that you&amp;rsquo;ll only ever get 24 hours in a day. If you try to cram too many &lt;em&gt;things&lt;/em&gt; into too little &lt;em&gt;time&lt;/em&gt;, there&amp;rsquo;s no opportunity to focus, because you&amp;rsquo;re forcing yourself to switch contexts too often, or you&amp;rsquo;re cutting back on sleep, or you&amp;rsquo;re probably feeling too overwhelmed to &lt;em&gt;stay on target&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One of the best things about a good  task management system is that you don&amp;rsquo;t have to feel committed to anything you throw in your inbox. It&amp;rsquo;s just a staging area where you can try on an idea, let it percolate, and—if it doesn&amp;rsquo;t &lt;em&gt;fit&lt;/em&gt;—flush it down the toilet. Stop wasting mental bandwidth on it.&lt;/p&gt;
&lt;p&gt;And if it does &lt;em&gt;fit&lt;/em&gt;, and it&amp;rsquo;s just on of a select few, then it&amp;rsquo;s easier to keep on top it and follow through.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On moving preparations</title>
      <link>https://angelostavrow.com/post/on-moving-preparations/</link>
      <pubDate>Thu, 21 Jan 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-moving-preparations/</guid>
      <description>&lt;p&gt;A short break from the usual posts for a bit of site news: by the end of February, I&amp;rsquo;m hoping to have completed the move of this site over to a static-site generator called &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are a few reasons for this.&lt;/p&gt;
&lt;p&gt;First, I&amp;rsquo;m ready to leave Squarespace. It&amp;rsquo;s not that there&amp;rsquo;s anything really &lt;em&gt;wrong&lt;/em&gt; with their service. It&amp;rsquo;s pretty reliable, their customer service is great, and it&amp;rsquo;s generally pretty easy to use. It&amp;rsquo;s just that it&amp;rsquo;s overkill for what I need (a simple blog), and while they&amp;rsquo;re constantly bringing out new features, those features aren&amp;rsquo;t really of interest to me—the features I &lt;em&gt;would&lt;/em&gt; be interested in paying for just don&amp;rsquo;t seem to be rolling out.&lt;/p&gt;
&lt;p&gt;Second, while some basic customization is available to base-plan users, it just can&amp;rsquo;t compare to the level of customization available to a roll-your-own, hackable, static-site generator.&lt;/p&gt;
&lt;p&gt;Third, Hugo will be the basis for another project I&amp;rsquo;m slowly putting together, so this will be good practice.&lt;/p&gt;
&lt;p&gt;While I will probably be re-architecting the way URLs are set up, Hugo has an &lt;a href=&#34;http://gohugo.io/extras/aliases/&#34;&gt;awesome built-in feature for handling redirects&lt;/a&gt;, so all the old links should continue working. Comment will probably go away, which is fine, because there really aren&amp;rsquo;t many. Going back to &lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt; is an option, but I&amp;rsquo;m really interested in &lt;a href=&#34;https://www.civilcomments.com&#34;&gt;Civil Comments&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll follow up when the move is complete.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On expectations</title>
      <link>https://angelostavrow.com/post/on-expectations/</link>
      <pubDate>Thu, 14 Jan 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-expectations/</guid>
      <description>&lt;p&gt;Two weeks ago, &lt;a href=&#34;https://angelostavrow.com/blog/2016/1/1/on-fresh-starts&#34;&gt;I wrote&lt;/a&gt; that I wanted to write more—primarily by posting to the blog once a week, and by writing in a journal daily.&lt;/p&gt;
&lt;p&gt;So far, the journal has been a success. I haven&amp;rsquo;t missed a day, because it&amp;rsquo;s easy: I launch &lt;a href=&#34;http://dayoneapp.com/&#34;&gt;Day One&lt;/a&gt; on a device, and just write. I don&amp;rsquo;t limit myself to certain topics, I don&amp;rsquo;t use any tags, I don&amp;rsquo;t add photos, and I certainly don&amp;rsquo;t worry about length. Four words, four sentences, four paragraphs—it doesn&amp;rsquo;t matter.&lt;/p&gt;
&lt;p&gt;Easy wins. Much happy.&lt;/p&gt;
&lt;p&gt;Writing here on a regular basis, however, has been more stress than success. It&amp;rsquo;s not for a lack of things to say: as it stands, I&amp;rsquo;ve got four files in various stages of completion sitting in my drafts folder.&lt;/p&gt;
&lt;p&gt;So what&amp;rsquo;s making it so hard for me to get those done and uploaded?&lt;/p&gt;
&lt;p&gt;Sure, part of it is that it&amp;rsquo;s a bit more involved to write and post to the blog. I do it from my computer, at my desk, rather than from wherever I might have a web-connected device.&lt;/p&gt;
&lt;p&gt;But more importantly, I think I feel more pressure to write &lt;em&gt;for an audience&lt;/em&gt;, rather than just &lt;em&gt;for me&lt;/em&gt;. And that imagined audience has &lt;em&gt;expectations&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And so I try to push myself to meet those imagined expectations. Because THINKPIECES.&lt;/p&gt;
&lt;p&gt;And then there&amp;rsquo;s that weekly deadline.&lt;/p&gt;
&lt;p&gt;Which means that by 6:30AM Friday morning, I found myself posting something that just didn&amp;rsquo;t feel quite &lt;em&gt;done&lt;/em&gt;. I mean, it was okay, and it meant that I could check off the task as completed, but I wasn&amp;rsquo;t really satisfied with it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; &lt;em&gt;I&amp;rsquo;ve been using &lt;a href=&#34;http://balancedapp.com&#34;&gt;Balanced&lt;/a&gt; as a motivator for new habits that I want to cultivate. It&amp;rsquo;s been working well for me, and I like that those little habits live outside of my GTD workflow.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t set any kind of length objective for these posts, so I&amp;rsquo;m going to start pushing back against the feeling that I need to get 500+ words out every week. The longer drafts that I have, I&amp;rsquo;ll work on periodically, and post them when they&amp;rsquo;re &lt;em&gt;ready&lt;/em&gt;, rather than forcing them to be &lt;em&gt;done&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And while they&amp;rsquo;re getting ready, I&amp;rsquo;ll write short(er)-but-sweet posts on something I&amp;rsquo;ve been thinking about, or that take the place of a tweetstorm.&lt;/p&gt;
&lt;p&gt;Because quality over quantity is more than just a platitude, but showing up every week is important too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On happiness</title>
      <link>https://angelostavrow.com/post/on-happiness/</link>
      <pubDate>Fri, 08 Jan 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-happiness/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re now a week in to the new year. As I&amp;rsquo;ve &lt;a href=&#34;https://angelostavrow.com/blog/2016/1/1/on-fresh-starts&#34;&gt;mentioned before&lt;/a&gt;, I&amp;rsquo;m not really one for resolutions, but here&amp;rsquo;s something that&amp;rsquo;s been on my mind lately. A proposal, of sorts, in two parts.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;ol&gt;
&lt;li&gt;Be the person that makes you happy.&lt;/li&gt;
&lt;li&gt;Be the person that makes other people happy.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&amp;rsquo;s the how and why of it, as I see it.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Part 1&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Part 2&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Situation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;This is the worst-case scenario. You&amp;rsquo;re not happy. You&amp;rsquo;re surrounded by people who aren&amp;rsquo;t happy, which can perpetuate a downward spiral. It gets dark here, but on the bright side, there&amp;rsquo;s lots of room for improvement too.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;You&amp;rsquo;re making others happy at the expense of your own happiness. Maybe even acting as an enabler. Who knows? Alternatively, your friends may be jerks. One way or the other, this is a huge energy sink. It&amp;rsquo;s a bit clichéd and simplistic, I know, but ultimately, you have to be okay with who you are before you can &lt;em&gt;really&lt;/em&gt; make things better for others.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;You&amp;rsquo;re happy, but no one else is. You might be a jerk, but probably you&amp;rsquo;re caught up in something and you&amp;rsquo;re maybe a little less mindful than you want to be. Alternatively, you may be surrounded by people who need your help. A word of caution here, though: it&amp;rsquo;s possible that you&amp;rsquo;re just not equipped for this task. Take care that this situation doesn&amp;rsquo;t change into the one described above.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;This is the best place to be. You&amp;rsquo;re making strides towards being the person you want to be, and you&amp;rsquo;re helping others win too. Good on ya.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The tricky part is that these scenarios are fluid. Some days everyone&amp;rsquo;s happy, and some days no one&amp;rsquo;s happy; on most days, though, it&amp;rsquo;s one of those mutually-exclusive-happiness situations.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Things always come back to centre, but it&amp;rsquo;s important to keep in mind that &lt;em&gt;we&lt;/em&gt; define where that centre is. And when we&amp;rsquo;re having a hard time in a tough situation, centre can feel like the worst of these scenarios.&lt;/p&gt;
&lt;p&gt;Screw it all, I don&amp;rsquo;t give a crap.&lt;/p&gt;
&lt;p&gt;Or: I&amp;rsquo;m burning out, but at least I&amp;rsquo;m making other people happy, and they probably appreciate that, right?&lt;/p&gt;
&lt;p&gt;Most of the time, we define where we live, emotionally-speaking, without even thinking about it. We fixate on an argument we had with a loved one, or a project we really can&amp;rsquo;t be arsed about at work, and the feelings we have about that particular thing spread to other areas of our life.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Happiness is a fleeting thing, and always will be.&lt;/p&gt;
&lt;p&gt;Turns out, though, that if you listen hard enough, there&amp;rsquo;s always a little voice that&amp;rsquo;s providing real-time metrics on your progress towards becoming the person that makes you happy. That internal director&amp;rsquo;s commentary takes the form of a great night&amp;rsquo;s sleep, or a bout of heart palpitations, or a morning of inexplicable crankiness, or even a day of insufferable boredom.&lt;/p&gt;
&lt;p&gt;This is mindfulness. It lets us step in and interrupt the signal chain between &lt;em&gt;what&amp;rsquo;s happening to us&lt;/em&gt; and &lt;em&gt;how we feel about it&lt;/em&gt;, and make the appropriate course corrections. It&amp;rsquo;s the compass you need, to guide you back to a centre that makes you feel like the person you want to be.&lt;/p&gt;
&lt;p&gt;I struggle with this, but the more thought I put into these goals—the more mindful I am of them—the better I do.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On fresh starts</title>
      <link>https://angelostavrow.com/post/on-fresh-starts/</link>
      <pubDate>Fri, 01 Jan 2016 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-fresh-starts/</guid>
      <description>&lt;p&gt;A lot of people seem to think that New Year&amp;rsquo;s resolutions are a waste of time. While I agree that any day is a good day to make changes, I also know that I like things in neat and tidy little parcels, and a year is a very nice little short- to medium-term period of time for setting goals, and revisiting them to see how you did.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t try anything like that for 2015. While I feel the year was pretty good on the whole, this year I&amp;rsquo;d like to make it a little more official, make some of those goals (and their results) public record here.&lt;/p&gt;
&lt;p&gt;So, in no particular order, here are some goals for this year:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Post something here every Friday.&lt;/strong&gt; I&amp;rsquo;m not setting any kind of length for now—it&amp;rsquo;ll be hard enough to get back into the habit of writing regularly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Post to a journal at least once every day.&lt;/strong&gt; Again, no stated length; even a sentence will do. Thankfully, &lt;a href=&#34;http://dayoneapp.com&#34;&gt;DayOne&lt;/a&gt; makes this really easy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make real progress towards my Mac app.&lt;/strong&gt; I&amp;rsquo;ve been kicking around an idea for years now, and by year end I&amp;rsquo;d really like to have at least a first beta available.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contribute to open-source projects.&lt;/strong&gt; Without setting a goal for a number or frequency of pull requests, I&amp;rsquo;d like to participate more in some OSS projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Get in better shape.&lt;/strong&gt; I&amp;rsquo;m not overweight, I&amp;rsquo;m not underweight, and I&amp;rsquo;m generally in good shape, but there&amp;rsquo;s always room for improvement—in my case, that&amp;rsquo;ll come from discipline in getting to the gym. To that end, I&amp;rsquo;m really thinking about making some of my fitness-tracker profiles public.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This isn&amp;rsquo;t an exhaustive list by any means, as I have some personal and private goals that I&amp;rsquo;d also like to aim for, but it&amp;rsquo;s a good start. I&amp;rsquo;ll revisit this list every quarter and see how I&amp;rsquo;m doing.&lt;/p&gt;
&lt;p&gt;That said, I hope that the next 366 days are happy, healthy, and fruitful for you. On with the show.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On automation</title>
      <link>https://angelostavrow.com/post/on-automation/</link>
      <pubDate>Thu, 17 Dec 2015 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/on-automation/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a firm believer in automation.&lt;/p&gt;
&lt;p&gt;Computers are great environments for this—scripting languages (and convenient utilities that leverage them, like &lt;a href=&#34;https://www.noodlesoft.com/hazel.php&#34;&gt;Hazel&lt;/a&gt;, &lt;a href=&#34;https://smilesoftware.com/textexpander&#34;&gt;TextExpander&lt;/a&gt;, or &lt;a href=&#34;https://ifttt.com/&#34;&gt;If This Then That&lt;/a&gt;) make it trivial to organize, queue, and execute all kinds of tasks that otherwise time away from more enjoyable things.&lt;/p&gt;
&lt;p&gt;• • •&lt;/p&gt;
&lt;p&gt;Life can be a bit harder to automate. It can get  expensive, too, because automating real-life tasks tends to require both hardware &lt;em&gt;and&lt;/em&gt; software, working in concert, to manipulate the physical world.&lt;/p&gt;
&lt;p&gt;On top of that, a lot of the automation we look at isn&amp;rsquo;t really something that saves us any significant amount of time, because what&amp;rsquo;s being automated isn&amp;rsquo;t real work. Probably the most obvious example of this are home-automation tasks like lighting schemes, motorized blinds, and auto-adjusting thermostats. Sure, they&amp;rsquo;re convenient, but they&amp;rsquo;re luxuries. They don&amp;rsquo;t have a meaningful impact in the quality of our lives.&lt;/p&gt;
&lt;p&gt;I love my universal remote, but it&amp;rsquo;s not a time- or work-saver. Not really.&lt;/p&gt;
&lt;p&gt;• • •&lt;/p&gt;
&lt;p&gt;There &lt;em&gt;are&lt;/em&gt; automation technologies, however, that do provide real savings on time and work. Here, however, it&amp;rsquo;s easy to fall into the trap of automating work that would otherwise be beneficial to do manually.&lt;/p&gt;
&lt;p&gt;As an example: I own a &lt;a href=&#34;http://www.irobot.com/For-the-Home/Vacuum-Cleaning/Roomba.aspx&#34;&gt;Roomba&lt;/a&gt;, but not a dishwasher.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve got a long-haired cat whose contributions to the household mainly consists of bundles of fur that roll down hallways like tumbleweed in the desert. My wife is pretty allergic to it, so we need to keep on top of the vacuuming or things go south quickly for her. Given that it&amp;rsquo;s an otherwise hated chore, we got ourselves a Roomba to patrol our flat for dander and dust bunnies on a daily basis.&lt;/p&gt;
&lt;p&gt;On the other hand, doing dishes—while not exactly pleasant—is a chore that allows me to settle into my thoughts, and has been shown to reduce stress levels in studies. I&amp;rsquo;ll concede that it&amp;rsquo;s not that hard to deal with, as we&amp;rsquo;re only two people, but nonetheless this feels like work that&amp;rsquo;s worth making time for. It&amp;rsquo;s not uncommon for me to come up with ideas, or solve problems that I&amp;rsquo;ve been working on, while wrist-deep in suds.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s sort of a mandated creative-thinking time, if you will. Given how hectic our lives can be, why would you want to automate that away?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Festina lente</title>
      <link>https://angelostavrow.com/post/festina-lente/</link>
      <pubDate>Thu, 19 Jun 2014 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/festina-lente/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Make haste slowly.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or, if we forsake brevity for clarity: get it done quickly, but not so urgently that thoroughness is sacrificed for speed.&lt;/p&gt;
&lt;p&gt;Once committed to action, it is desirable to move swiftly, decisively; but to do so without having completed one&amp;rsquo;s due diligence&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; rel=&#34;footnote&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; is foolhardy at best, and dangerous at worst.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
  &lt;ol&gt;
  &lt;li class=&#34;footnote&#34; id=&#34;fn:1&#34;&gt;
  &lt;p&gt;The hard part in all of this, of course, is know when the diligence is done and the planning can begin. Look too hard for the perils and pitfalls, and you&#39;ll never get the thing underway. Don&#39;t look hard enough, and you might find yourself starting from scratch—or abandoning the project completely.&lt;a href=&#34;#fnref:1&#34; title=&#34;return to article&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Or, just strive to be the best</title>
      <link>https://angelostavrow.com/post/or-just-strive-to-be-the-best/</link>
      <pubDate>Fri, 02 May 2014 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/or-just-strive-to-be-the-best/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;The only way to do great work is to love what you do.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;m not sure to whom the above quote is attributed, but I don&amp;rsquo;t buy it.&lt;/p&gt;
&lt;p&gt;The only way to do great work is to put in 100% of your attention and your effort, follow a thorough PDCA&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; rel=&#34;footnote&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; methodology, and understand that the quality of your work depends entirely on your will.&lt;/p&gt;
&lt;p&gt;I get that this quote is supposed to be an inspirational call to action, but thinking that you can only excel at things that you love is equal parts reductive and defeatist.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll concede that it&amp;rsquo;s easier to mail it in when you don&amp;rsquo;t especially care for the work you&amp;rsquo;re doing, but that doesn&amp;rsquo;t mean you&amp;rsquo;re forced to be mediocre about it.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t make excuses. Make great things—regardless of your passion for them.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
  &lt;ol&gt;
  &lt;li class=&#34;footnote&#34; id=&#34;fn:1&#34;&gt;
  &lt;p&gt;Plan &amp;rarr; Do &amp;rarr; Check &amp;rarr; Act: one of the tenets of a quality management system.&lt;a href=&#34;#fnref:1&#34; title=&#34;return to article&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Due dates, do dates, and die dates</title>
      <link>https://angelostavrow.com/post/due-dates-do-dates-and-die-dates/</link>
      <pubDate>Thu, 10 Apr 2014 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/due-dates-do-dates-and-die-dates/</guid>
      <description>&lt;p&gt;A calendar is, at its essence, just a list. But how effectively that list is used can transform your calendar from a mostly-neglected application to a finely-tuned productivity tool.&lt;/p&gt;
&lt;p&gt;The key to this transformation is the proper care and feeding of your calendar. It is a garbage-in-garbage-out system, so it&amp;rsquo;s crucial that we make sure that we only add items to our calendar that belong there.&lt;/p&gt;
&lt;p&gt;For &lt;a href=&#34;http://gettingthingsdone.com&#34;&gt;GTD&lt;/a&gt; acolytes like myself, it feels like we rise and fall by the quality of our lists. After all, these various context lists pretty act like an outboard brain, telling us what we&amp;rsquo;re supposed to be doing at the given moment, so if we throw action items onto them willy-nilly, and if they&amp;rsquo;re not tended to regularly, it all falls apart, becoming a system that you don&amp;rsquo;t use because you can&amp;rsquo;t trust it. Specifically, this means that anything you place on your calendar, you should treat as a promise.&lt;/p&gt;
&lt;p&gt;But—and this is the key—don’t use your calendar for task management, as it’s really meant for time management&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; rel=&#34;footnote&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. I really like an idea &lt;a href=&#34;http://www.merlinmann.com&#34;&gt;Merlin Mann&lt;/a&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; rel=&#34;footnote&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; has &lt;a href=&#34;http://www.43folders.com/2008/02/14/time-attention-talk&#34;&gt;discussed&lt;/a&gt;, where he suggests that productivity is not just about managing your time, but also about managing your attention. Let &lt;a href=&#34;http://www.omnigroup.com/omnifocus&#34;&gt;Omnifocus&lt;/a&gt; (or whatever) handle your tasks, and let your calendar handle your time.&lt;/p&gt;
&lt;p&gt;There was a good &lt;a href=&#34;http://5by5.tv/mpu/179&#34;&gt;Mac Power Users episode&lt;/a&gt; on calendar management that got me thinking about how I use mine, and how I deal with time management in general.&lt;/p&gt;
&lt;h2 id=&#34;due-dates&#34;&gt;Due Dates&lt;/h2&gt;
&lt;p&gt;It feels like including this field in a task-management system is probably one of the most polarizing conversation in GTD-Land&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; rel=&#34;footnote&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. I go back and forth on it, myself (a &lt;em&gt;time required&lt;/em&gt; field makes more sense, maybe, because you can then sort your context lists according to how much free time you have).&lt;/p&gt;
&lt;p&gt;For most tasks, however, adding due dates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;makes little sense in the real world;&lt;/li&gt;
&lt;li&gt;clutters your calendar needlessly (it&amp;rsquo;s no longer a “hard landscape” of real appointments);&lt;/li&gt;
&lt;li&gt;undermines the flexibility of your workflows if you strictly follow these due dates;&lt;/li&gt;
&lt;li&gt;undermines the reliability of your system if you don’t; and&lt;/li&gt;
&lt;li&gt;adds busywork that would probably be unnecessary if you were doing better reviews of your projects and lists.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Still, sometimes a date of some sort makes sense for a particular task. So I tend to use the due-date field as one of two things: a &lt;em&gt;do&lt;/em&gt; date, or a &lt;em&gt;die&lt;/em&gt; date.&lt;/p&gt;
&lt;h2 id=&#34;do-dates&#34;&gt;Do Dates&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Do dates&lt;/em&gt; are for tasks that absolutely need to get done on a certain day or by a certain time. Should these go on your calendar? Renewing your driver&amp;rsquo;s license, for example, is just such a thing, but you&amp;rsquo;ll get a notice ahead of time reminding you of this, so you probably don&amp;rsquo;t need another reminder in your calendar.&lt;/p&gt;
&lt;p&gt;What about your wife&amp;rsquo;s birthday? Sure, that may be on your calendar, but did you give yourself a heads-up early enough to shop for her present, or will she be getting another six-pack of premium carwashes and a box of four-year-old chocolates that you had to pick up at the gas station on the way home because it was a long day at the office and it was the only place still open?&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; rel=&#34;footnote&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; Maybe that&amp;rsquo;s a good candidate for a do date.&lt;/p&gt;
&lt;p&gt;A better one is passport renewal. For myself, it&amp;rsquo;s on a five-year renewal period, but I don&amp;rsquo;t get any kind of reminder, and if it has expired, I&amp;rsquo;ve only got six months to get it done if I want the &amp;ldquo;simplified&amp;rdquo; renewal option. But it still requires a few things, like getting a photo taken, locating my old passport, completing a form, and mailing it out, so it&amp;rsquo;s a project, and I really don&amp;rsquo;t want to find myself with an expired passport two weeks before a business trip. So while I&amp;rsquo;ll have a 5-year review cycle for my &amp;ldquo;renew passport&amp;rdquo; project, I&amp;rsquo;ll go ahead and add some do dates to those tasks that are more time sensitive.&lt;/p&gt;
&lt;h2 id=&#34;die-dates&#34;&gt;Die Dates&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Die dates&lt;/em&gt; are for tasks that are far less important—optional, even—but that still have some kind of time sensitivity to them. While it&amp;rsquo;s not paramount that you actually complete the task (like an item on your &lt;em&gt;Someday/Maybe&lt;/em&gt; list), you may only have a limited amount of time to do it.&lt;/p&gt;
&lt;p&gt;Looking into concert tickets, for example, is just such a thing. Popping into a store that&amp;rsquo;s having a sale on iTunes cards is yet another. It&amp;rsquo;s okay if these things get skipped, but they &lt;em&gt;are&lt;/em&gt; in your system for a reason, and if you don&amp;rsquo;t give yourself a reminder, you&amp;rsquo;re likely to miss the opportunity because of its limited-time availability.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
  &lt;ol&gt;
  	&lt;li class=&#34;footnote&#34; id=&#34;fn:1&#34;&gt;
	&lt;p&gt;There are more good tips [here][6] and [here][7].&lt;a href=&#34;#fnref:1&#34; title=&#34;return to article&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li class=&#34;footnote&#34; id=&#34;fn:2&#34;&gt;
	&lt;p&gt;Don&#39;t call him a productivity guru. But do listen to his [podcast, Back To Work, with Dan Benjamin][8].&lt;a href=&#34;#fnref:2&#34; title=&#34;return to article&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li class=&#34;footnote&#34; id=&#34;fn:3&#34;&gt;
  	&lt;p&gt;&lt;i&gt;GTD-Land&lt;/i&gt; is a magical place where apparently everyone is so fantastically efficient at getting things done that they can sit back and nitpick the minutia of every GTD tool out there. For 18 hours per day. Every day. Weekends and holidays included.&lt;a href=&#34;#fnref:3&#34; title=&#34;return to article&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li class=&#34;footnote&#34; id=&#34;fn:4&#34;&gt;
	&lt;p&gt;Bonus points may be awarded if she doesn&#39;t own a car and/or you forgot that she&#39;s allergic to chocolate.&lt;a href=&#34;#fnref:4&#34; title=&#34;return to article&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Finishing moves</title>
      <link>https://angelostavrow.com/post/finishing-moves/</link>
      <pubDate>Tue, 08 Apr 2014 12:00:00 -0400</pubDate>
      
      <guid>https://angelostavrow.com/post/finishing-moves/</guid>
      <description>&lt;p&gt;Remember Mortal Combat?&lt;/p&gt;
&lt;p&gt;It was (and I guess still is) a fighting game whose claim to fame, when it was released in arcades back in the 90s, was the idea of a &amp;ldquo;finishing move&amp;rdquo;—if you beat your opponent, you had the opportunity to do a special attack, sending them off to meet their maker in a rather bloody fashion.&lt;/p&gt;
&lt;p&gt;While I don&amp;rsquo;t condone violence, the idea of a &amp;ldquo;finishing move&amp;rdquo; made me think a little bit about how I tend to deal with recurring tasks.&lt;/p&gt;
&lt;p&gt;Here are some examples.&lt;/p&gt;
&lt;hr&gt;
* **Task:**`Vacuuming`
* **Type:**`Chore`
* **Overview:**
&lt;ol&gt;
&lt;li&gt;Pull tiny &lt;a href=&#34;http://www.amazon.com/Dyson-DC26-Multi-Compact-Canister/dp/B004AQ591K/ref=sr_1_cc_1?s=aps&amp;amp;ie=UTF8&amp;amp;qid=1396999803&amp;amp;sr=1-1-catcorr&amp;amp;keywords=dyson+city&#34;&gt;Dyson City vacuum cleaner&lt;/a&gt; out of its cramped storage space&lt;/li&gt;
&lt;li&gt;Give the flat a good once-over&lt;/li&gt;
&lt;li&gt;Replace vacuum cleaner in aforementioned cramped storage space&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Comment:&lt;/strong&gt; Older apartments have next to no storage space, which means that we needed a small but effective vacuum cleaner. The Dyson City is positively lilliputian, but with this space-saving design comes an equally tiny cannister to hold all the cat-hair tumbleweeds that our remarkably-fluffy cat can produce at an alarming rate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Finishing Move:&lt;/strong&gt; Always empty cannister just before putting the vacuum cleaner back into storage. This way, it&amp;rsquo;s always ready for the next round of a chore we both hate.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
* **Task:**`Getting a haircut`
* **Type:**`Errand`
* **Overview:**
&lt;ol&gt;
&lt;li&gt;Arrive at purveyors of fine haircuts&lt;/li&gt;
&lt;li&gt;Enjoy the courtesy massage&lt;/li&gt;
&lt;li&gt;Engage in banter about comic books and movies with hairdresser while getting haircut&lt;/li&gt;
&lt;li&gt;Pay for services rendered&lt;/li&gt;
&lt;li&gt;Leave purveyors of fine haircuts&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Comment:&lt;/strong&gt; My hair grows like a weed. Coarse, wavy, rebellios weeds, to be specific. Given that my appearance needs all the help it can get, I go in for a haircut every three to four weeks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Finishing Move:&lt;/strong&gt; So that I don&amp;rsquo;t have to give it a second though, I always schedule my next appointment while paying on my way out, and put it into my calendar immediately. This way, I don&amp;rsquo;t have to set any reminders to make an appointment, nor do I have to worry about looking like a sheepdog.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
I could go on, but I think you get the idea.
&lt;p&gt;The key is that when I&amp;rsquo;ve got some kind of task that I know will pop back up on my to-do list at some point in the future, I ensure that I build into my workflow some kind of finishing move that makes my life a little bit easier the next time around.&lt;/p&gt;
&lt;p&gt;Sure, it&amp;rsquo;s not a big deal to call up and make a haircut appointment, but my brain is put to much better use doing creative and enjoyable things, like solving problems at work or focusing on the people that are special to me.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also no big deal to empty a vacuum cleaner before you start vacuuming, but it&amp;rsquo;s such an unpleasant thing to do in the first place that I don&amp;rsquo;t want to give myself &lt;em&gt;any&lt;/em&gt; reason to stall. It&amp;rsquo;s friction, when it comes to productivity, friction is failure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About this site</title>
      <link>https://angelostavrow.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://angelostavrow.com/about/</guid>
      <description>&lt;p&gt;This is my personal website and blog. If you&amp;rsquo;d like to know more about what I&amp;rsquo;m up to at the moment, check out my &lt;a href=&#34;https://angelostavrow.com/now&#34;&gt;now&lt;/a&gt; page, or have a look at my &lt;a href=&#34;https://angelo.micro.blog&#34;&gt;microblog&lt;/a&gt;. You can get in touch with me via &lt;a href=&#34;mailto:contact@angelostavrow.com&#34;&gt;email&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;philosophy&#34;&gt;Philosophy&lt;/h2&gt;
&lt;p&gt;This site includes a &lt;code&gt;philosphy.txt&lt;/code&gt;. &lt;a href=&#34;../philosophy.txt&#34;&gt;Check it out&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-youll-find-here&#34;&gt;What you’ll find here&lt;/h2&gt;
&lt;p&gt;I enjoy writing, which is good, because I’m terrible at it and they say that the only way to improve is through practice. From here on out, this is where my writing will live. I write about pretty much whatever topic comes to mind, but it&amp;rsquo;s typically focused on development, of both the personal and software persuasion.&lt;/p&gt;
&lt;h2 id=&#34;where-youll-find-more-of-my-stuff&#34;&gt;Where you&amp;rsquo;ll find more of my stuff&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s a row of social-network icons at the bottom of this site, linking to my various profiles.&lt;/p&gt;
&lt;h2 id=&#34;privacy-policy&#34;&gt;Privacy policy&lt;/h2&gt;
&lt;p&gt;I don&amp;rsquo;t use any analytics on this site. I tried anayltics on a personal site and frankly, the data and trends weren&amp;rsquo;t interesting to me. If you like what you read, I hope you&amp;rsquo;ll come back. If not, I&amp;rsquo;ll try to do better.&lt;/p&gt;
&lt;p&gt;If you email me, I&amp;rsquo;ll read your email! By extension, that means I will have a record of your email address.  I won&amp;rsquo;t use it for anything other than replying to you without your explicit, written consent.&lt;/p&gt;
&lt;h3 id=&#34;affiliate-links&#34;&gt;Affiliate links&lt;/h3&gt;
&lt;p&gt;I used to use affiliate links to generate revenue. They… didn&amp;rsquo;t. I don&amp;rsquo;t use affiliate links any more. I&amp;rsquo;ve tried to go back and remove them from old posts, but if I&amp;rsquo;ve missed any, please &lt;a href=&#34;mailto:contact@angelostavrow.com&#34;&gt;let me know&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-stack&#34;&gt;The stack&lt;/h2&gt;
&lt;p&gt;This site is statically generated using &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; and runs a custom fork of a theme I built called &lt;a href=&#34;https://github.com/AngeloStavrow/indigo&#34;&gt;&lt;em&gt;Indigo&lt;/em&gt;&lt;/a&gt;. Indigo includes a few IndieWeb features that you can read about &lt;a href=&#34;https://angelostavrow.com/post/introducing-indigo/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;typography&#34;&gt;Typography&lt;/h3&gt;
&lt;p&gt;This site makes use of the following wonderful typefaces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bboxtype.com/typefaces/FiraSans/#!layout=specimen&#34;&gt;Fira Sans&lt;/a&gt; for heading text&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://practicaltypography.com/charter.html&#34;&gt;Charter&lt;/a&gt; for body text&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira Code&lt;/a&gt; for monospaced text&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Licenses are included in the Indigo theme&amp;rsquo;s &lt;a href=&#34;https://github.com/AngeloStavrow/indigo/tree/master/static/fonts&#34;&gt;&lt;code&gt;static/fonts&lt;/code&gt; folder&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Now</title>
      <link>https://angelostavrow.com/now/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://angelostavrow.com/now/</guid>
      <description>&lt;p&gt;&lt;em&gt;Last updated September 17&lt;sup&gt;th&lt;/sup&gt;, 2019&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inspired by Derek Sivers&amp;rsquo; &lt;a href=&#34;https://sivers.org/nowff&#34;&gt;now&lt;/a&gt; page, this page gives you a little bit of information on what I&amp;rsquo;m up to these days.&lt;/p&gt;
&lt;h2 id=&#34;right-now-i-am&#34;&gt;Right now I am…&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Living in: Montreal, Canada. 🇨🇦&lt;/li&gt;
&lt;li&gt;Working with the &lt;a href=&#34;https://glitch.com&#34;&gt;Glitch&lt;/a&gt; team, providing solutions engineering services&lt;/li&gt;
&lt;li&gt;Re-writing one of my &lt;a href=&#34;https://droppedbits.com/apps/per&#34;&gt;iOS apps&lt;/a&gt; from scratch &lt;a href=&#34;https://angelostavrow.com/tags/per-rewrite-diary/&#34;&gt;and live-journaling the process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.makebeforebreak.com&#34;&gt;Publishing a podcast&lt;/a&gt; with &lt;a href=&#34;https://ioscoachfrank.com/&#34;&gt;Frank Courville&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Status updates</title>
      <link>https://angelostavrow.com/updates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://angelostavrow.com/updates/</guid>
      <description>&lt;h2 id=&#34;from-microbloghttpsangelomicroblog&#34;&gt;From &lt;a href=&#34;https://angelo.micro.blog/&#34;&gt;micro.blog&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This content is typically syndicated to &lt;a href=&#34;https://twitter.com/AngeloStavrow&#34;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://micro.blog/sidebar.js?username=angelostavrow&amp;count=25&#34;&gt;&lt;/script&gt;</description>
    </item>
    
  </channel>
</rss>